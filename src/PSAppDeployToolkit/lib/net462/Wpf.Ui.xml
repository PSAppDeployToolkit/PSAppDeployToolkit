<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wpf.Ui</name>
    </assembly>
    <members>
        <member name="T:Wpf.Ui.Animations.Transition">
            <summary>
            Available types of transitions.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Animations.Transition.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Animations.Transition.FadeIn">
            <summary>
            Change opacity.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Animations.Transition.FadeInWithSlide">
            <summary>
            Change opacity and slide from bottom.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Animations.Transition.SlideBottom">
            <summary>
            Slide from bottom.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Animations.Transition.SlideRight">
            <summary>
            Slide from the right side.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Animations.Transition.SlideLeft">
            <summary>
            Slide from the left side.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Animations.TransitionAnimationProvider">
            <summary>
            Provides tools for <see cref="T:System.Windows.FrameworkElement"/> animation.
            </summary>
            <example>
            <code lang="csharp">
            TransitionAnimationProvider.ApplyTransition(MyFrameworkElement, Transition.FadeIn, 500);
            </code>
            </example>
        </member>
        <member name="M:Wpf.Ui.Animations.TransitionAnimationProvider.ApplyTransition(System.Object,Wpf.Ui.Animations.Transition,System.Int32)">
            <summary>
            Attempts to apply an animation effect while adding content to the frame.
            </summary>
            <param name="element">Currently rendered element.</param>
            <param name="type">Selected transition type.</param>
            <param name="duration">Transition duration.</param>
            <returns>Returns <see langword="true"/> if the transition was applied. Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Wpf.Ui.Appearance.ApplicationAccentColorManager">
            <summary>
            Allows updating the accents used by controls in the application by swapping dynamic resources.
            </summary>
            <example>
            <code lang="csharp">
            ApplicationAccentColorManager.Apply(
                Color.FromArgb(0xFF, 0xEE, 0x00, 0xBB),
                ApplicationTheme.Dark,
                false
            );
            </code>
            <code lang="csharp">
            ApplicationAccentColorManager.Apply(
                ApplicationAccentColorManager.GetColorizationColor(),
                ApplicationTheme.Dark,
                false
            );
            </code>
            </example>
        </member>
        <member name="F:Wpf.Ui.Appearance.ApplicationAccentColorManager.BackgroundBrightnessThresholdValue">
            <summary>
            The maximum value of the background HSV brightness after which the text on the accent will be turned dark.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.ApplicationAccentColorManager.SystemAccent">
            <summary>
            Gets the SystemAccentColor.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.ApplicationAccentColorManager.SystemAccentBrush">
            <summary>
            Gets the <see cref="T:System.Windows.Media.Brush"/> of the SystemAccentColor.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.ApplicationAccentColorManager.PrimaryAccent">
            <summary>
            Gets the SystemAccentColorPrimary.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.ApplicationAccentColorManager.PrimaryAccentBrush">
            <summary>
            Gets the <see cref="T:System.Windows.Media.Brush"/> of the SystemAccentColorPrimary.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.ApplicationAccentColorManager.SecondaryAccent">
            <summary>
            Gets the SystemAccentColorSecondary.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.ApplicationAccentColorManager.SecondaryAccentBrush">
            <summary>
            Gets the <see cref="T:System.Windows.Media.Brush"/> of the SystemAccentColorSecondary.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.ApplicationAccentColorManager.TertiaryAccent">
            <summary>
            Gets the SystemAccentColorTertiary.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.ApplicationAccentColorManager.TertiaryAccentBrush">
            <summary>
            Gets the <see cref="T:System.Windows.Media.Brush"/> of the SystemAccentColorTertiary.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.ApplicationAccentColorManager.Apply(System.Windows.Media.Color,Wpf.Ui.Appearance.ApplicationTheme,System.Boolean)">
            <summary>
            Changes the color accents of the application based on the color entered.
            </summary>
            <param name="systemAccent">Primary accent color.</param>
            <param name="applicationTheme">If <see cref="F:Wpf.Ui.Appearance.ApplicationTheme.Dark"/>, the colors will be different.</param>
            <param name="systemGlassColor">If the color is taken from the Glass Color System, its brightness will be increased with the help of the operations on HSV space.</param>
        </member>
        <member name="M:Wpf.Ui.Appearance.ApplicationAccentColorManager.Apply(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Changes the color accents of the application based on the entered colors.
            </summary>
            <param name="systemAccent">Primary color.</param>
            <param name="primaryAccent">Alternative light or dark color.</param>
            <param name="secondaryAccent">Second alternative light or dark color (most used).</param>
            <param name="tertiaryAccent">Third alternative light or dark color.</param>
        </member>
        <member name="M:Wpf.Ui.Appearance.ApplicationAccentColorManager.ApplySystemAccent">
            <summary>
            Applies system accent color to the application.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.ApplicationAccentColorManager.GetColorizationColor">
            <summary>
            Gets current Desktop Window Manager colorization color.
            <para>It should be the color defined in the system Personalization.</para>
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.ApplicationAccentColorManager.UpdateColorResources(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Updates application resources.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Appearance.ApplicationTheme">
            <summary>
            Theme in which an application using WPF UI is displayed.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.ApplicationTheme.Unknown">
            <summary>
            Unknown application theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.ApplicationTheme.Dark">
            <summary>
            Dark application theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.ApplicationTheme.Light">
            <summary>
            Light application theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.ApplicationTheme.HighContrast">
            <summary>
            High contract application theme.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Appearance.ApplicationThemeManager">
            <summary>
            Allows to manage the application theme by swapping resource dictionaries containing dynamic resources with color information.
            </summary>
            <example>
            <code lang="csharp">
            ApplicationThemeManager.Apply(
                ApplicationTheme.Light
            );
            </code>
            <code lang="csharp">
            if (ApplicationThemeManager.GetAppTheme() == ApplicationTheme.Dark)
            {
                ApplicationThemeManager.Apply(
                    ApplicationTheme.Light
                );
            }
            </code>
            <code>
            ApplicationThemeManager.Changed += (theme, accent) =>
            {
                Debug.WriteLine($"Application theme changed to {theme.ToString()}");
            };
            </code>
            </example>
        </member>
        <member name="E:Wpf.Ui.Appearance.ApplicationThemeManager.Changed">
            <summary>
            Event triggered when the application's theme is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.ApplicationThemeManager.IsHighContrast">
            <summary>
            Gets a value that indicates whether the application is currently using the high contrast theme.
            </summary>
            <returns><see langword="true"/> if application uses high contrast theme.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.ApplicationThemeManager.IsSystemHighContrast">
            <summary>
            Gets a value that indicates whether the Windows is currently using the high contrast theme.
            </summary>
            <returns><see langword="true"/> if system uses high contrast theme.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.ApplicationThemeManager.Apply(Wpf.Ui.Appearance.ApplicationTheme,Wpf.Ui.Controls.WindowBackdropType,System.Boolean)">
            <summary>
            Changes the current application theme.
            </summary>
            <param name="applicationTheme">Theme to set.</param>
            <param name="backgroundEffect">Whether the custom background effect should be applied.</param>
            <param name="updateAccent">Whether the color accents should be changed.</param>
        </member>
        <member name="M:Wpf.Ui.Appearance.ApplicationThemeManager.Apply(System.Windows.FrameworkElement)">
            <summary>
            Applies Resources in the <paramref name="frameworkElement"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.ApplicationThemeManager.GetAppTheme">
            <summary>
            Gets currently set application theme.
            </summary>
            <returns><see cref="F:Wpf.Ui.Appearance.ApplicationTheme.Unknown"/> if something goes wrong.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.ApplicationThemeManager.GetSystemTheme">
            <summary>
            Gets currently set system theme.
            </summary>
            <returns><see cref="F:Wpf.Ui.Appearance.SystemTheme.Unknown"/> if something goes wrong.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.ApplicationThemeManager.IsAppMatchesSystem">
            <summary>
            Gets a value that indicates whether the application is matching the system theme.
            </summary>
            <returns><see langword="true"/> if the application has the same theme as the system.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.ApplicationThemeManager.IsMatchedDark">
            <summary>
            Checks if the application and the operating system are currently working in a dark theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.ApplicationThemeManager.IsMatchedLight">
            <summary>
            Checks if the application and the operating system are currently working in a light theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.ApplicationThemeManager.FetchApplicationTheme">
            <summary>
            Tries to guess the currently set application theme.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Appearance.ObservedWindow">
            <summary>
            Represents a window that is being observed for changes in appearance.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.ObservedWindow.#ctor(System.IntPtr,Wpf.Ui.Controls.WindowBackdropType,System.Boolean)">
            <summary>
            Initializes a new instance of the ObservedWindow class.
            </summary>
            <param name="handle">The handle of the window.</param>
            <param name="backdrop">The backdrop type of the window.</param>
            <param name="updateAccents">Indicates whether to update accents.</param>
        </member>
        <member name="P:Wpf.Ui.Appearance.ObservedWindow.RootVisual">
            <summary>
            Gets the root visual of the window.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.ObservedWindow.Handle">
            <summary>
            Gets the handle of the window.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.ObservedWindow.Backdrop">
            <summary>
            Gets the backdrop type of the window.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.ObservedWindow.UpdateAccents">
            <summary>
            Gets a value indicating whether to update accents.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.ObservedWindow.HasHook">
            <summary>
            Gets a value indicating whether the window has a hook.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.ObservedWindow.AddHook(System.Windows.Interop.HwndSourceHook)">
            <summary>
            Adds a hook to the window.
            </summary>
            <param name="hook">The hook to add.</param>
        </member>
        <member name="M:Wpf.Ui.Appearance.ObservedWindow.RemoveHook(System.Windows.Interop.HwndSourceHook)">
            <summary>
            Removes a hook from the window.
            </summary>
            <param name="hook">The hook to remove.</param>
        </member>
        <member name="T:Wpf.Ui.Appearance.ResourceDictionaryManager">
            <summary>
            Allows managing application dictionaries.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.ResourceDictionaryManager.SearchNamespace">
            <summary>
            Gets the namespace, e.g. the library the resource is being searched for.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.ResourceDictionaryManager.HasDictionary(System.String)">
            <summary>
            Shows whether the application contains the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
            <param name="resourceLookup">Any part of the resource name.</param>
            <returns><see langword="false"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.ResourceDictionaryManager.GetDictionary(System.String)">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceDictionary"/> if exists.
            </summary>
            <param name="resourceLookup">Any part of the resource name.</param>
            <returns><see cref="T:System.Windows.ResourceDictionary"/>, <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.ResourceDictionaryManager.UpdateDictionary(System.String,System.Uri)">
            <summary>
            Shows whether the application contains the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
            <param name="resourceLookup">Any part of the resource name.</param>
            <param name="newResourceUri">A valid <see cref="T:System.Uri"/> for the replaced resource.</param>
            <returns><see langword="true"/> if the dictionary <see cref="T:System.Uri"/> was updated. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Wpf.Ui.Appearance.SystemTheme">
            <summary>
            Windows 11 themes.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemTheme.Unknown">
            <summary>
            Unknown Windows theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemTheme.Custom">
            <summary>
            Custom Windows theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemTheme.Light">
            <summary>
            Default light theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemTheme.Dark">
            <summary>
            Default dark theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemTheme.HCWhite">
            <summary>
            High-contrast theme: Desert
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemTheme.HCBlack">
            <summary>
            High-contrast theme: Acquatic
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemTheme.HC1">
            <summary>
            High-contrast theme: Dusk
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemTheme.HC2">
            <summary>
            High-contrast theme: Nightsky
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemTheme.Glow">
            <summary>
            Dark theme: Glow
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemTheme.CapturedMotion">
            <summary>
            Dark theme: Captured Motion
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemTheme.Sunrise">
            <summary>
            Light theme: Sunrise
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemTheme.Flow">
            <summary>
            Light theme: Flow
            </summary>
        </member>
        <member name="T:Wpf.Ui.Appearance.SystemThemeManager">
            <summary>
            Provides information about Windows system themes.
            </summary>
            <example>
            <code lang="csharp">
            var currentWindowTheme = SystemThemeManager.GetCachedSystemTheme();
            </code>
            <code lang="csharp">
            SystemThemeManager.UpdateSystemThemeCache();
            var currentWindowTheme = SystemThemeManager.GetCachedSystemTheme();
            </code>
            </example>
        </member>
        <member name="P:Wpf.Ui.Appearance.SystemThemeManager.GlassColor">
            <summary>
            Gets the Windows glass color.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.SystemThemeManager.HighContrast">
            <summary>
            Gets a value indicating whether the system is currently using the high contrast theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.SystemThemeManager.GetCachedSystemTheme">
            <summary>
            Returns the Windows theme retrieved from the registry. If it has not been cached before, invokes the <see cref="M:Wpf.Ui.Appearance.SystemThemeManager.UpdateSystemThemeCache"/> and then returns the currently obtained theme.
            </summary>
            <returns>Currently cached Windows theme.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.SystemThemeManager.UpdateSystemThemeCache">
            <summary>
            Refreshes the currently saved system theme.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Appearance.SystemThemeWatcher">
            <summary>
            Automatically updates the application background if the system theme or color is changed.
            <para><see cref="T:Wpf.Ui.Appearance.SystemThemeWatcher"/> settings work globally and cannot be changed for each <see cref="T:System.Windows.Window"/>.</para>
            </summary>
            <example>
            <code lang="csharp">
            SystemThemeWatcher.Watch(this as System.Windows.Window);
            SystemThemeWatcher.UnWatch(this as System.Windows.Window);
            </code>
            <code lang="csharp">
            SystemThemeWatcher.Watch(
                _serviceProvider.GetRequiredService&lt;MainWindow&gt;()
            );
            </code>
            </example>
        </member>
        <member name="M:Wpf.Ui.Appearance.SystemThemeWatcher.Watch(System.Windows.Window,Wpf.Ui.Controls.WindowBackdropType,System.Boolean)">
            <summary>
            Watches the <see cref="T:System.Windows.Window"/> and applies the background effect and theme according to the system theme.
            </summary>
            <param name="window">The window that will be updated.</param>
            <param name="backdrop">Background effect to be applied when changing the theme.</param>
            <param name="updateAccents">If <see langword="true"/>, the accents will be updated when the change is detected.</param>
        </member>
        <member name="M:Wpf.Ui.Appearance.SystemThemeWatcher.UnWatch(System.Windows.Window)">
            <summary>
            Unwatches the window and removes the hook to receive messages from the system.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.SystemThemeWatcher.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Listens to system messages on the application windows.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Appearance.ThemeChangedEvent">
            <summary>
            Event triggered when application theme is updated.
            </summary>
            <param name="currentApplicationTheme">Current application <see cref="T:Wpf.Ui.Appearance.ApplicationTheme"/>.</param>
            <param name="systemAccent">Current base system accent <see cref="T:System.Windows.Media.Color"/>.</param>
        </member>
        <member name="T:Wpf.Ui.Appearance.WindowBackgroundManager">
            <summary>
            Facilitates the management of the window background.
            </summary>
            <example>
            <code lang="csharp">
            WindowBackgroundManager.UpdateBackground(
                observedWindow.RootVisual,
                currentApplicationTheme,
                observedWindow.Backdrop
            );
            </code>
            </example>
        </member>
        <member name="M:Wpf.Ui.Appearance.WindowBackgroundManager.ApplyDarkThemeToWindow(System.Windows.Window)">
            <summary>
            Tries to apply dark theme to <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.WindowBackgroundManager.RemoveDarkThemeFromWindow(System.Windows.Window)">
            <summary>
            Tries to remove dark theme from <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.WindowBackgroundManager.UpdateBackground(System.Windows.Window,Wpf.Ui.Appearance.ApplicationTheme,Wpf.Ui.Controls.WindowBackdropType)">
            <summary>
            Forces change to application background. Required if custom background effect was previously applied.
            </summary>
        </member>
        <member name="T:Wpf.Ui.AutomationPeers.CardControlAutomationPeer">
            <summary>
            Provides UI Automation peer for the CardControl.
            </summary>
        </member>
        <member name="M:Wpf.Ui.AutomationPeers.CardControlAutomationPeer.#ctor(Wpf.Ui.Controls.CardControl)">
            <summary>
            Provides UI Automation peer for the CardControl.
            </summary>
        </member>
        <member name="T:Wpf.Ui.ContentDialogService">
             <summary>
             Represents a contract with the service that creates <see cref="T:Wpf.Ui.Controls.ContentDialog"/>.
             </summary>
             <example>
             <code lang="xml">
             &lt;ContentPresenter x:Name="RootContentDialogPresenter" Grid.Row="0" /&gt;
             </code>
             <code lang="csharp">
             IContentDialogService contentDialogService = new ContentDialogService();
             contentDialogService.SetContentPresenter(RootContentDialogPresenter);
            
             await _contentDialogService.ShowAsync(
                 new ContentDialog(){
                     Title = "The cake?",
                     Content = "IS A LIE!",
                     PrimaryButtonText = "Save",
                     SecondaryButtonText = "Don't Save",
                     CloseButtonText = "Cancel"
                 }
             );
             </code>
             </example>
        </member>
        <member name="M:Wpf.Ui.ContentDialogService.SetDialogHost(System.Windows.Controls.ContentPresenter)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.ContentDialogService.GetDialogHost">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.ContentDialogService.ShowAsync(Wpf.Ui.Controls.ContentDialog,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Wpf.Ui.Controls.Anchor">
            <summary>
            Creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address.
            </summary>
            <example>
            <code lang="xml">
            &lt;ui:Anchor
                NavigateUri="https://lepo.co/" /&gt;
            </code>
            </example>
        </member>
        <member name="T:Wpf.Ui.Controls.Arc">
            <summary>
            Control that draws a symmetrical arc with rounded edges.
            </summary>
            <example>
            <code lang="xml">
            &lt;ui:Arc
                EndAngle="359"
                StartAngle="0"
                Stroke="{ui:ThemeResource SystemAccentColorSecondaryBrush}"
                StrokeThickness="2"
                Visibility="Visible" /&gt;
            </code>
            </example>
        </member>
        <member name="F:Wpf.Ui.Controls.Arc.StartAngleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Arc.StartAngle"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Arc.EndAngleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Arc.EndAngle"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Arc.SweepDirectionProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Arc.SweepDirection"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Arc.StrokeStartLineCapProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Arc.StrokeStartLineCap"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Arc.StartAngle">
            <summary>
            Gets or sets the initial angle from which the arc will be drawn.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Arc.EndAngle">
            <summary>
            Gets or sets the final angle from which the arc will be drawn.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Arc.SweepDirection">
            <summary>
            Gets or sets the direction to where the arc will be drawn.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Arc.IsLargeArc">
            <summary>
            Gets a value indicating whether one of the two larger arc sweeps is chosen; otherwise, if is <see langword="false"/>, one of the smaller arc sweeps is chosen.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Arc.DefiningGeometry">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.Arc.DefinedGeometry">
            <summary>
            Get the geometry that defines this shape.
            <para><see href="https://stackoverflow.com/a/36756365/13224348">Based on Mark Feldman implementation.</see></para>
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Arc.PointAtAngle(System.Double)">
            <summary>
            Draws a point on the coordinates of the given angle.
            <para><see href="https://stackoverflow.com/a/36756365/13224348">Based on Mark Feldman implementation.</see></para>
            </summary>
            <param name="angle">The angle at which to create the point.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.Arc.PropertyChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Event triggered when one of the key parameters is changed. Forces the geometry to be redrawn.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Arc.OnRender(System.Windows.Media.DrawingContext)">
            <summary>Overrides the default OnRender method to draw the <see cref="T:Wpf.Ui.Controls.Arc" /> element.</summary>
            <param name="drawingContext">A <see cref="T:System.Windows.Media.DrawingContext" /> object that is drawn during the rendering pass of this <see cref="T:System.Windows.Shapes.Shape" />.</param>
        </member>
        <member name="T:Wpf.Ui.Controls.AutoSuggestBox">
            <summary>
            Represents a text control that makes suggestions to users as they enter text using a keyboard. The app is notified when text has been changed by the user and is responsible for providing relevant suggestions for this control to display.
            </summary>
            <example>
            <code lang="xml">
            &lt;ui:AutoSuggestBox x:Name="AutoSuggestBox" PlaceholderText="Search"&gt;
                &lt;ui:AutoSuggestBox.Icon&gt;
                    &lt;ui:IconSourceElement&gt;
                        &lt;ui:SymbolIconSource Symbol="Search24" /&gt;
                    &lt;/ui:IconSourceElement&gt;
                &lt;/ui:AutoSuggestBox.Icon&gt;
            &lt;/ui:AutoSuggestBox&gt;
            </code>
            </example>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.OriginalItemsSourceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.AutoSuggestBox.OriginalItemsSource"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.IsSuggestionListOpenProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.AutoSuggestBox.IsSuggestionListOpen"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.TextProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.AutoSuggestBox.Text"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.PlaceholderTextProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.AutoSuggestBox.PlaceholderText"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.UpdateTextOnSelectProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.AutoSuggestBox.UpdateTextOnSelect"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.MaxSuggestionListHeightProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.AutoSuggestBox.MaxSuggestionListHeight"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.IconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.AutoSuggestBox.Icon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.FocusCommandProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.AutoSuggestBox.FocusCommand"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.OriginalItemsSource">
            <summary>
            Gets or sets your items here if you want to use the default filtering
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.IsSuggestionListOpen">
            <summary>
            Gets or sets a value indicating whether the drop-down portion of the <see cref="T:Wpf.Ui.Controls.AutoSuggestBox"/> is open.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.Text">
            <summary>
            Gets or sets the text that is shown in the control.
            </summary>
            <remarks>
            This property is not typically set in XAML.
            </remarks>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.PlaceholderText">
            <summary>
            Gets or sets the placeholder text to be displayed in the control.
            </summary>
            <remarks>
            The placeholder text to be displayed in the control. The default is an empty string.
            </remarks>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.MaxSuggestionListHeight">
            <summary>
            Gets or sets the maximum height for the drop-down portion of the <see cref="T:Wpf.Ui.Controls.AutoSuggestBox"/> control.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.UpdateTextOnSelect">
            <summary>
            Gets or sets a value indicating whether items in the view will trigger an update of the editable text part of the <see cref="T:Wpf.Ui.Controls.AutoSuggestBox"/> when clicked.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.Icon">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Controls.IconElement"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.FocusCommand">
            <summary>
            Gets command used for focusing control.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.QuerySubmittedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.AutoSuggestBox.QuerySubmitted"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.SuggestionChosenEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.AutoSuggestBox.SuggestionChosen"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.TextChangedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.AutoSuggestBox.TextChanged"/> routed event.</summary>
        </member>
        <member name="E:Wpf.Ui.Controls.AutoSuggestBox.QuerySubmitted">
            <summary>
            Occurs when the user submits a search query.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.AutoSuggestBox.SuggestionChosen">
            <summary>
            Event occurs when the user selects an item from the recommended ones.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.AutoSuggestBox.TextChanged">
            <summary>
            Raised after the text content of the editable control component is updated.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.AutoSuggestBox.Focus">
            <inheritdoc cref="M:System.Windows.UIElement.Focus" />
        </member>
        <member name="M:Wpf.Ui.Controls.AutoSuggestBox.OnQuerySubmitted(System.String)">
            <summary>
            Method for <see cref="E:Wpf.Ui.Controls.AutoSuggestBox.QuerySubmitted"/>.
            </summary>
            <param name="queryText">Currently submitted query text.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.AutoSuggestBox.OnSuggestionChosen(System.Object)">
            <summary>
            Method for <see cref="E:Wpf.Ui.Controls.AutoSuggestBox.SuggestionChosen"/>.
            </summary>
            <param name="selectedItem">Currently selected item.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.AutoSuggestBox.OnTextChanged(Wpf.Ui.Controls.AutoSuggestionBoxTextChangeReason,System.String)">
            <summary>
            Method for <see cref="E:Wpf.Ui.Controls.AutoSuggestBox.TextChanged"/>.
            </summary>
            <param name="reason">Data for the text changed event.</param>
            <param name="text">Changed text.</param>
        </member>
        <member name="T:Wpf.Ui.Controls.AutoSuggestBoxQuerySubmittedEventArgs">
            <summary>
            Provides event data for the <see cref="E:Wpf.Ui.Controls.AutoSuggestBox.QuerySubmitted"/> event.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.AutoSuggestBoxSuggestionChosenEventArgs">
            <summary>
            Provides data for the <see cref="E:Wpf.Ui.Controls.AutoSuggestBox.SuggestionChosen"/> event.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.AutoSuggestBoxTextChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Wpf.Ui.Controls.AutoSuggestBox.TextChanged"/> event.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.AutoSuggestionBoxTextChangeReason">
            <summary>
            Provides data for the <see cref="E:Wpf.Ui.Controls.AutoSuggestBox.TextChanged"/> event.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestionBoxTextChangeReason.UserInput">
            <summary>
            The user edited the text.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestionBoxTextChangeReason.ProgrammaticChange">
            <summary>
            The text was changed via code.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestionBoxTextChangeReason.SuggestionChosen">
            <summary>
            The user selected one of the items in the auto-suggestion box.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Badge">
            <summary>
            Used to highlight an item, attract attention or flag status.
            </summary>
            <example>
            <code lang="xml">
            &lt;ui:Badge Appearance="Secondary"&gt;
                &lt;TextBox Text="Hello" /&gt;
            &lt;/ui:Badge&gt;
            </code>
            </example>
        </member>
        <member name="F:Wpf.Ui.Controls.Badge.AppearanceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Badge.Appearance"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Badge.Appearance">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.Controls.BreadcrumbBar">
            <summary>
            The <see cref="T:Wpf.Ui.Controls.BreadcrumbBar"/> control provides the direct path of pages or folders to the current location.
            </summary>
            <example>
            <code lang="xml">
            &lt;ui:BreadcrumbBar x:Name="BreadcrumbBar" /&gt;
            </code>
            </example>
        </member>
        <member name="F:Wpf.Ui.Controls.BreadcrumbBar.CommandProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.BreadcrumbBar.Command"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.BreadcrumbBar.TemplateButtonCommandProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.BreadcrumbBar.TemplateButtonCommand"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.BreadcrumbBar.TemplateButtonCommand">
            <summary>
            Gets the <see cref="T:Wpf.Ui.Input.RelayCommand`1"/> triggered after clicking
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.BreadcrumbBar.ItemClickedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.BreadcrumbBar.ItemClicked"/> routed event.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.BreadcrumbBar.Command">
            <summary>
            Gets or sets custom command executed after selecting the item.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.BreadcrumbBar.ItemClicked">
            <summary>
            Occurs when an item is clicked in the <see cref="T:Wpf.Ui.Controls.BreadcrumbBar"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.BreadcrumbBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Controls.BreadcrumbBar"/> class.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.BreadcrumbBarItem">
            <summary>
            Represents an item in a <see cref="T:Wpf.Ui.Controls.BreadcrumbBar"/> control.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.BreadcrumbBarItem.IconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.BreadcrumbBarItem.Icon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.BreadcrumbBarItem.IconMarginProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.BreadcrumbBarItem.IconMargin"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.BreadcrumbBarItem.IsLastProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.BreadcrumbBarItem.IsLast"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.BreadcrumbBarItem.Icon">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Controls.IconElement"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.BreadcrumbBarItem.IconMargin">
            <summary>
            Gets or sets get or sets margin for the <see cref="P:Wpf.Ui.Controls.BreadcrumbBarItem.Icon"/>
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.BreadcrumbBarItem.IsLast">
            <summary>
            Gets or sets a value indicating whether the current item is the last one.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.BreadcrumbBarItemClickedEventArgs.Item">
            <summary>
            Gets the Content property value of the BreadcrumbBarItem that is clicked.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.BreadcrumbBarItemClickedEventArgs.Index">
            <summary>
            Gets the index of the item that was clicked.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Button">
            <summary>
            Inherited from the <see cref="T:System.Windows.Controls.Button"/>, adding <see cref="T:Wpf.Ui.Controls.SymbolRegular"/>.
            </summary>
            <example>
            <code lang="xml">
            &lt;ui:Button
                Appearance="Primary"
                Content="WPF UI button with font icon"
                Icon="{ui:SymbolIcon Symbol=Fluent24}" /&gt;
            </code>
            <code lang="xml">
            &lt;ui:Button
                Appearance="Primary"
                Content="WPF UI button with font icon"
                Icon="{ui:FontIcon '&#x1F308;'}" /&gt;
            </code>
            </example>
            <remarks>
            The <see cref="T:Wpf.Ui.Controls.Button"/> class inherits from the base <see cref="T:System.Windows.Controls.Button"/> class.
            </remarks>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.IconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Button.Icon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.AppearanceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Button.Appearance"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.MouseOverBackgroundProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Button.MouseOverBackground"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.MouseOverBorderBrushProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Button.MouseOverBorderBrush"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.PressedForegroundProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Button.PressedForeground"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.PressedBackgroundProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Button.PressedBackground"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.PressedBorderBrushProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Button.PressedBorderBrush"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.CornerRadiusProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Button.CornerRadius"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Button.Icon">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Controls.IconElement"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Button.Appearance">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.Button.MouseOverBackground">
            <summary>
            Gets or sets background <see cref="T:System.Windows.Media.Brush"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Button.MouseOverBorderBrush">
            <summary>
            Gets or sets border <see cref="T:System.Windows.Media.Brush"/> when the user mouses over the button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Button.PressedForeground">
            <summary>
            Gets or sets the foreground <see cref="T:System.Windows.Media.Brush"/> when the user clicks the button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Button.PressedBackground">
            <summary>
            Gets or sets background <see cref="T:System.Windows.Media.Brush"/> when the user clicks the button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Button.PressedBorderBrush">
            <summary>
            Gets or sets border <see cref="T:System.Windows.Media.Brush"/> when the user clicks the button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Button.CornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of a <see cref="T:System.Windows.Controls.Border" /> are rounded.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.CalendarDatePicker">
            <summary>
            Represents a control that allows a user to pick a date from a calendar display.
            </summary>
            <example>
            <code lang="xml">
            &lt;ui:CalendarDatePicker /&gt;
            </code>
            </example>
        </member>
        <member name="F:Wpf.Ui.Controls.CalendarDatePicker.IsCalendarOpenProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CalendarDatePicker.IsCalendarOpen"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CalendarDatePicker.IsTodayHighlightedProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CalendarDatePicker.IsTodayHighlighted"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CalendarDatePicker.DateProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CalendarDatePicker.Date"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CalendarDatePicker.FirstDayOfWeekProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CalendarDatePicker.FirstDayOfWeek"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CalendarDatePicker.IsTodayHighlighted">
            <summary>
            Gets or sets a value indicating whether the current date is highlighted.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CalendarDatePicker.IsCalendarOpen">
            <summary>
            Gets or sets a value indicating whether the calendar view of the <see cref="T:Wpf.Ui.Controls.CalendarDatePicker"/> is currently shown.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CalendarDatePicker.FirstDayOfWeek">
            <summary>
            Gets or sets the day that is considered the beginning of the week.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CalendarDatePicker.Date">
            <summary>
            Gets or sets the date currently set in the calendar picker.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.CalendarDatePicker.OnClick">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.Controls.CardAction">
            <summary>
            Inherited from the <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/> interactive card styled according to Fluent Design.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardAction.IsChevronVisibleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CardAction.IsChevronVisible"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardAction.IconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CardAction.Icon"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardAction.IsChevronVisible">
            <summary>
            Gets or sets a value indicating whether to display the chevron icon on the right side of the card.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardAction.Icon">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Controls.IconElement"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.CardColor">
            <summary>
            Ala Pa**one color card.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardColor.TitleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CardColor.Title"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardColor.SubtitleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CardColor.Subtitle"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardColor.SubtitleFontSizeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CardColor.SubtitleFontSize"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardColor.ColorProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CardColor.Color"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardColor.BrushProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CardColor.Brush"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardColor.CardBrushProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CardColor.CardBrush"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardColor.Title">
            <summary>
            Gets or sets the main text displayed below the color.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardColor.Subtitle">
            <summary>
            Gets or sets text displayed under main <see cref="P:Wpf.Ui.Controls.CardColor.Title"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardColor.SubtitleFontSize">
            <summary>
            Gets or sets the font size of <see cref="P:Wpf.Ui.Controls.CardColor.Subtitle"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardColor.Color">
            <summary>
            Gets or sets the displayed <see cref="P:Wpf.Ui.Controls.CardColor.CardBrush"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardColor.Brush">
            <summary>
            Gets or sets the displayed <see cref="P:Wpf.Ui.Controls.CardColor.CardBrush"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardColor.CardBrush">
            <summary>
            Gets the <see cref="T:System.Windows.Media.Brush"/> displayed in <see cref="T:Wpf.Ui.Controls.CardColor"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.CardColor.OnSubtitlePropertyChanged">
            <summary>
            Virtual method triggered when <see cref="P:Wpf.Ui.Controls.CardColor.Subtitle"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.CardColor.OnColorPropertyChanged">
            <summary>
            Virtual method triggered when <see cref="P:Wpf.Ui.Controls.CardColor.Color"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.CardColor.OnBrushPropertyChanged">
            <summary>
            Virtual method triggered when <see cref="P:Wpf.Ui.Controls.CardColor.Brush"/> is changed.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.CardControl">
            <summary>
            Inherited from the <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/> control which displays an additional control on the right side of the card.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardControl.HeaderProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CardControl.Header"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardControl.IconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CardControl.Icon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardControl.CornerRadiusProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CardControl.CornerRadius"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardControl.Header">
            <summary>
            Gets or sets header which is used for each item in the control.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardControl.Icon">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Controls.IconElement"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardControl.CornerRadius">
            <summary>
            Gets or sets the corner radius of the control.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.CardExpander">
            <summary>
            Inherited from the <see cref="T:System.Windows.Controls.Expander"/> control which can hide the collapsible content.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardExpander.IconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CardExpander.Icon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardExpander.CornerRadiusProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CardExpander.CornerRadius"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardExpander.ContentPaddingProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.CardExpander.ContentPadding"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardExpander.Icon">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Controls.IconElement"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardExpander.CornerRadius">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Controls.IconElement"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardExpander.ContentPadding">
            <summary>
            Gets or sets content padding Property
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Card">
            <summary>
            Simple Card with content and <see cref="P:Wpf.Ui.Controls.Card.Footer"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Card.FooterProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Card.Footer"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Card.HasFooterProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Card.HasFooter"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Card.Footer">
            <summary>
            Gets or sets additional content displayed at the bottom.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Card.HasFooter">
            <summary>
            Gets a value indicating whether the <see cref="T:Wpf.Ui.Controls.Card"/> has a <see cref="P:Wpf.Ui.Controls.Card.Footer"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ClientAreaBorder">
            <summary>
            If you use <see cref="T:System.Windows.Shell.WindowChrome"/> to extend the UI elements to the non-client area, you can include this container
            in the template of <see cref="T:System.Windows.Window"/> so that the content inside automatically fills the client area.
            Using this container can let you get rid of various margin adaptations done in
            Setter/Trigger of the style of <see cref="T:System.Windows.Window"/> when the window state changes.
            </summary>
            <example>
            <code lang="xml">
            &lt;Style
                x:Key="MyWindowCustomStyle"
                BasedOn="{StaticResource {x:Type Window}}"
                TargetType="{x:Type controls:FluentWindow}"&gt;
                &lt;Setter Property="Template" &gt;
                    &lt;Setter.Value&gt;
                        &lt;ControlTemplate TargetType="{x:Type Window}"&gt;
                            &lt;AdornerDecorator&gt;
                                &lt;controls:ClientAreaBorder
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"&gt;
                                    &lt;ContentPresenter x:Name="ContentPresenter" /&gt;
                                &lt;/controls:ClientAreaBorder&gt;
                            &lt;/AdornerDecorator&gt;
                        &lt;/ControlTemplate&gt;
                    &lt;/Setter.Value&gt;
                &lt;/Setter&gt;
            &lt;/Style&gt;
            </code>
            </example>
        </member>
        <member name="P:Wpf.Ui.Controls.ClientAreaBorder.PaddedBorderThickness">
            <summary>
            Gets the system value for the padded border thickness (<see cref="F:Wpf.Ui.Interop.User32.SM.CXPADDEDBORDER"/>) in WPF units.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ClientAreaBorder.ResizeFrameBorderThickness">
            <summary>
            Gets the system <see cref="F:Wpf.Ui.Interop.User32.SM.CXFRAME"/> and <see cref="F:Wpf.Ui.Interop.User32.SM.CYFRAME"/> values in WPF units.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ClientAreaBorder.WindowChromeNonClientFrameThickness">
            <summary>
            Gets the thickness of the window's non-client frame used for maximizing the window with a custom chrome.
            </summary>
            <remarks>
            If you use a <see cref="T:System.Windows.Shell.WindowChrome"/> to extend the client area of a window to the non-client area, you need to handle the edge margin issue when the window is maximized.
            Use this property to get the correct margin value when the window is maximized, so that when the window is maximized, the client area can completely cover the screen client area by no less than a single pixel at any DPI.
            The<see cref="M:Wpf.Ui.Interop.User32.GetSystemMetrics(Wpf.Ui.Interop.User32.SM)"/> method cannot obtain this value directly.
            </remarks>
        </member>
        <member name="M:Wpf.Ui.Controls.ClientAreaBorder.OnVisualParentChanged(System.Windows.DependencyObject)">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.Controls.ColorPicker">
            <summary>
            Represents a control that lets a user pick a color using a color spectrum, sliders, and text input.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ContentDialog">
             <summary>
             Dialogue displayed inside the application covering its internals, displaying some content.
             </summary>
             <example>
             <code lang="xml">
             &lt;ContentPresenter x:Name="RootContentDialogPresenter" Grid.Row="0" /&gt;
             </code>
             <code lang="csharp">
             var contentDialog = new ContentDialog(RootContentDialogPresenter);
            
             contentDialog.SetCurrentValue(ContentDialog.TitleProperty, "Hello World");
             contentDialog.SetCurrentValue(ContentControl.ContentProperty, "This is a message");
             contentDialog.SetCurrentValue(ContentDialog.CloseButtonTextProperty, "Close this dialog");
            
             await contentDialog.ShowAsync(cancellationToken);
             </code>
             <code lang="csharp">
             var contentDialogService = new ContentDialogService();
             contentDialogService.SetContentPresenter(RootContentDialogPresenter);
            
             await _contentDialogService.ShowSimpleDialogAsync(
                 new SimpleContentDialogCreateOptions()
                     {
                         Title = "The cake?",
                         Content = "IS A LIE!",
                         PrimaryButtonText = "Save",
                         SecondaryButtonText = "Don't Save",
                         CloseButtonText = "Cancel"
                     }
                 );
             </code>
             </example>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.TitleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.Title"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.TitleTemplateProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.TitleTemplate"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.DialogWidthProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.DialogWidth"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.DialogHeightProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.DialogHeight"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.DialogMaxWidthProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.DialogMaxWidth"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.DialogMaxHeightProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.DialogMaxHeight"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.DialogMarginProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.DialogMargin"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.PrimaryButtonTextProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.PrimaryButtonText"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.SecondaryButtonTextProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.SecondaryButtonText"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.CloseButtonTextProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.CloseButtonText"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.PrimaryButtonIconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.PrimaryButtonIcon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.SecondaryButtonIconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.SecondaryButtonIcon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.CloseButtonIconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.CloseButtonIcon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.IsPrimaryButtonEnabledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.IsPrimaryButtonEnabled"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.IsSecondaryButtonEnabledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.IsSecondaryButtonEnabled"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.PrimaryButtonAppearanceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.PrimaryButtonAppearance"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.SecondaryButtonAppearanceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.SecondaryButtonAppearance"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.CloseButtonAppearanceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.CloseButtonAppearance"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.DefaultButtonProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.DefaultButton"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.IsFooterVisibleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.IsFooterVisible"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.TemplateButtonCommandProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ContentDialog.TemplateButtonCommand"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.OpenedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.ContentDialog.Opened"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.ClosingEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.ContentDialog.Closing"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.ClosedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.ContentDialog.Closed"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialog.ButtonClickedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.ContentDialog.ButtonClicked"/> routed event.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.Title">
            <summary>
            Gets or sets the title of the <see cref="T:Wpf.Ui.Controls.ContentDialog"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.TitleTemplate">
            <summary>
            Gets or sets the title template of the <see cref="T:Wpf.Ui.Controls.ContentDialog"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.DialogWidth">
            <summary>
            Gets or sets the width of the <see cref="T:Wpf.Ui.Controls.ContentDialog"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.DialogHeight">
            <summary>
            Gets or sets the height of the <see cref="T:Wpf.Ui.Controls.ContentDialog"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.DialogMaxWidth">
            <summary>
            Gets or sets the max width of the <see cref="T:Wpf.Ui.Controls.ContentDialog"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.DialogMaxHeight">
            <summary>
            Gets or sets the max height of the <see cref="T:Wpf.Ui.Controls.ContentDialog"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.DialogMargin">
            <summary>
            Gets or sets the margin of the <see cref="T:Wpf.Ui.Controls.ContentDialog"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.PrimaryButtonText">
            <summary>
            Gets or sets the text to display on the primary button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.SecondaryButtonText">
            <summary>
            Gets or sets the text to be displayed on the secondary button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.CloseButtonText">
            <summary>
            Gets or sets the text to display on the close button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.PrimaryButtonIcon">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Controls.SymbolRegular"/> on the secondary button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.SecondaryButtonIcon">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Controls.SymbolRegular"/> on the primary button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.CloseButtonIcon">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Controls.SymbolRegular"/> on the close button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.IsPrimaryButtonEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Wpf.Ui.Controls.ContentDialog"/> primary button is enabled.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.IsSecondaryButtonEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Wpf.Ui.Controls.ContentDialog"/> secondary button is enabled.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.PrimaryButtonAppearance">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Controls.ControlAppearance"/> to apply to the primary button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.SecondaryButtonAppearance">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Controls.ControlAppearance"/> to apply to the secondary button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.CloseButtonAppearance">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Controls.ControlAppearance"/> to apply to the close button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.DefaultButton">
            <summary>
            Gets or sets a value that indicates which button on the dialog is the default action.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.IsFooterVisible">
            <summary>
            Gets or sets a value indicating whether the footer buttons are visible.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.TemplateButtonCommand">
            <summary>
            Gets command triggered after clicking the button in the template.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.ContentDialog.Opened">
            <summary>
            Occurs after the dialog is opened.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.ContentDialog.Closing">
            <summary>
            Occurs after the dialog starts to close, but before it is closed and before the <see cref="E:Wpf.Ui.Controls.ContentDialog.Closed"/> event occurs.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.ContentDialog.Closed">
            <summary>
            Occurs after the dialog is closed.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.ContentDialog.ButtonClicked">
            <summary>
            Occurs after the <see cref="T:Wpf.Ui.Controls.ContentDialogButton"/> has been tapped.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ContentDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Controls.ContentDialog"/> class.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ContentDialog.#ctor(System.Windows.Controls.ContentPresenter)">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Controls.ContentDialog"/> class.
            </summary>
            <param name="dialogHost"><see cref="P:Wpf.Ui.Controls.ContentDialog.DialogHost"/> inside of which the dialogue will be placed. The new <see cref="T:Wpf.Ui.Controls.ContentDialog"/> will replace the current <see cref="P:System.Windows.Controls.ContentPresenter.Content"/>.</param>
        </member>
        <member name="P:Wpf.Ui.Controls.ContentDialog.DialogHost">
            <summary>
             Gets or sets <see cref="P:Wpf.Ui.Controls.ContentDialog.DialogHost"/> inside of which the dialogue will be placed. The new <see cref="T:Wpf.Ui.Controls.ContentDialog"/> will replace the current <see cref="P:System.Windows.Controls.ContentPresenter.Content"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ContentDialog.ShowAsync(System.Threading.CancellationToken)">
            <summary>
            Shows the dialog
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ContentDialog.Hide(Wpf.Ui.Controls.ContentDialogResult)">
            <summary>
            Hides the dialog with result
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ContentDialog.OnClosed(Wpf.Ui.Controls.ContentDialogResult)">
            <summary>
            Occurs after ContentPresenter.Content = null
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ContentDialog.OnButtonClick(Wpf.Ui.Controls.ContentDialogButton)">
            <summary>
            Invoked when a <see cref="T:Wpf.Ui.Controls.ContentDialogButton"/> is clicked.
            </summary>
            <param name="button">The button that was clicked.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.ContentDialog.OnLoaded">
            <summary>
            Occurs after Loaded event
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ContentDialogButton">
            <summary>
            Defines constants that specify the default button on a <see cref="T:Wpf.Ui.Controls.ContentDialog"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialogButton.Primary">
            <summary>
            The primary button is the default.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialogButton.Secondary">
            <summary>
            The secondary button is the default.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialogButton.Close">
            <summary>
            The close button is the default.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ContentDialogResult">
            <summary>
            Specifies identifiers to indicate the return value of a <see cref="T:Wpf.Ui.Controls.ContentDialog"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialogResult.None">
            <summary>
            No button was tapped.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialogResult.Primary">
            <summary>
            The primary button was tapped by the user.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ContentDialogResult.Secondary">
            <summary>
            The secondary button was tapped by the user.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ContextMenuLoader">
            <summary>
            Overwrites ContextMenu-Style for some UIElements (like RichTextBox) that don't take the default ContextMenu-Style by default.
            <para>The code inside this CodeBehind-Class forces this ContextMenu-Style on these UIElements through Reflection (because it is only accessible through Reflection it is also only possible through CodeBehind and not XAML)</para>
            </summary>
            <summary>
            ContextMenuLoader
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ContextMenuLoader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Controls.ContextMenuLoader"/> class and registers editing styles
            defined in "ContextMenu.xaml" with the <see cref="T:System.Windows.Threading.Dispatcher"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ContextMenuLoader.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ControlAppearance">
            <summary>
            Types of the available color accents of the controls.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ControlAppearance.Primary">
            <summary>
            Control color according to the current theme accent.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ControlAppearance.Secondary">
            <summary>
            Control color according to the current theme element.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ControlAppearance.Info">
            <summary>
            Blue color theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ControlAppearance.Dark">
            <summary>
            Dark color theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ControlAppearance.Light">
            <summary>
            Light color theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ControlAppearance.Danger">
            <summary>
            Red color theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ControlAppearance.Success">
            <summary>
            Green color theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ControlAppearance.Caution">
            <summary>
            Orange color theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ControlAppearance.Transparent">
            <summary>
            Transparent color theme.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ControlsServices">
            <summary>
            Used to initialize the library controls with static values.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.DataGrid">
            <summary>
            A DataGrid control that displays data in rows and columns and allows
            for the entering and editing of data.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DataGrid.CheckBoxColumnElementStyleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.DataGrid.CheckBoxColumnElementStyle"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DataGrid.CheckBoxColumnEditingElementStyleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.DataGrid.CheckBoxColumnEditingElementStyle"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DataGrid.CheckBoxColumnElementStyle">
            <summary>
            Gets or sets the style which is applied to all checkbox column in the DataGrid
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DataGrid.CheckBoxColumnEditingElementStyle">
            <summary>
            Gets or sets the style for all the column checkboxes in the DataGrid
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.DropDownButton">
            <summary>
            A control that drop downs a flyout of choices from which one can be chosen.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DropDownButton.FlyoutProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.DropDownButton.Flyout"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DropDownButton.IsDropDownOpenProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.DropDownButton.IsDropDownOpen"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DropDownButton.Flyout">
            <summary>
            Gets or sets the flyout associated with this button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DropDownButton.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the drop-down for a button is currently open.
            </summary>
            <returns>
            <see langword="true" /> if the drop-down is open; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.DropDownButton.OnFlyoutChanged(System.Object)">
            <summary>This method is invoked when the <see cref="F:Wpf.Ui.Controls.DropDownButton.FlyoutProperty"/> changes.</summary>
            <param name="value">The new value of <see cref="F:Wpf.Ui.Controls.DropDownButton.FlyoutProperty"/>.</param>
        </member>
        <member name="T:Wpf.Ui.Controls.DynamicScrollBar">
            <summary>
            Custom <see cref="T:System.Windows.Controls.Primitives.ScrollBar"/> with events depending on actions taken by the user.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DynamicScrollBar.IsScrollingProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.DynamicScrollBar.IsScrolling"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DynamicScrollBar.IsInteractedProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.DynamicScrollBar.IsInteracted"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DynamicScrollBar.TimeoutProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.DynamicScrollBar.Timeout"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DynamicScrollBar.IsScrolling">
            <summary>
            Gets or sets a value indicating whether the user was recently scrolling in the last few seconds.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DynamicScrollBar.IsInteracted">
            <summary>
            Gets or sets a value indicating whether the user has taken an action related to scrolling.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DynamicScrollBar.Timeout">
            <summary>
            Gets or sets additional delay after which the <see cref="T:Wpf.Ui.Controls.DynamicScrollBar"/> should be hidden.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.DynamicScrollBar.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method reporting the mouse entered this element.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.DynamicScrollBar.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method reporting the mouse leaved this element.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.DynamicScrollViewer">
            <summary>
            Custom <see cref="T:System.Windows.Controls.ScrollViewer"/> with events depending on actions taken by the user.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DynamicScrollViewer.IsScrollingVerticallyProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.DynamicScrollViewer.IsScrollingVertically"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DynamicScrollViewer.IsScrollingHorizontallyProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.DynamicScrollViewer.IsScrollingHorizontally"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DynamicScrollViewer.MinimalChangeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.DynamicScrollViewer.MinimalChange"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DynamicScrollViewer.TimeoutProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.DynamicScrollViewer.Timeout"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DynamicScrollViewer.IsScrollingVertically">
            <summary>
            Gets or sets a value indicating whether the user was scrolling vertically for the last few seconds.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DynamicScrollViewer.IsScrollingHorizontally">
            <summary>
            Gets or sets a value indicating whether the user was scrolling horizontally for the last few seconds.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DynamicScrollViewer.MinimalChange">
            <summary>
            Gets or sets the value required for the scroll to show automatically.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DynamicScrollViewer.Timeout">
            <summary>
            Gets or sets time after which the scroll is to be hidden.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.DynamicScrollViewer.OnScrollChanged(System.Windows.Controls.ScrollChangedEventArgs)">
            <summary>
            OnScrollChanged is an override called whenever scrolling state changes on this <see cref="T:Wpf.Ui.Controls.DynamicScrollViewer"/>.
            </summary>
            <remarks>
            OnScrollChanged fires the ScrollChangedEvent. Overriders of this method should call
            base.OnScrollChanged(args) if they want the event to be fired.
            </remarks>
            <param name="e">ScrollChangedEventArgs containing information about the change in scrolling state.</param>
        </member>
        <member name="T:Wpf.Ui.Controls.ElementPlacement">
            <summary>
            Decides where to put the element.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ElementPlacement.Left">
            <summary>
            Puts the control element on the left.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ElementPlacement.Right">
            <summary>
            Puts the control element on the right.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.EventIdentifier">
            <summary>
            Class used to create identifiers of threads or tasks that can be performed multiple times within one instance.
            <see cref="P:Wpf.Ui.Controls.EventIdentifier.Current"/> represents roughly the time in microseconds at which it was taken.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.EventIdentifier.Current">
            <summary>
            Gets or sets the current identifier.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.EventIdentifier.GetNext">
            <summary>
            Creates and gets the next identifier.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.EventIdentifier.IsEqual(System.Int64)">
            <summary>
            Checks if the identifiers are the same.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.EventIdentifier.UpdateIdentifier">
            <summary>
            Creates and assigns a random value with an extra time code if possible.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.FluentWindow">
            <summary>
            A custom WinUI Window with more convenience methods.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.FluentWindow.InteropHelper">
            <summary>
            Gets contains helper for accessing this window handle.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.FluentWindow.WindowCornerPreferenceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.FluentWindow.WindowCornerPreference"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.FluentWindow.WindowBackdropTypeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.FluentWindow.WindowBackdropType"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.FluentWindow.ExtendsContentIntoTitleBarProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.FluentWindow.ExtendsContentIntoTitleBar"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.FluentWindow.WindowCornerPreference">
            <summary>
            Gets or sets a value determining corner preference for current <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.FluentWindow.WindowBackdropType">
            <summary>
            Gets or sets a value determining preferred backdrop type for current <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.FluentWindow.ExtendsContentIntoTitleBar">
            <summary>
            Gets or sets a value indicating whether the default title bar of the window should be hidden to create space for app content.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.FluentWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Controls.FluentWindow"/> class.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.FluentWindow.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Wpf.Ui.Controls.FluentWindow"/> class.
            Overrides default properties.
            </summary>
            <remarks>
            Overrides default properties.
            </remarks>
        </member>
        <member name="M:Wpf.Ui.Controls.FluentWindow.OnSourceInitialized(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.FluentWindow.OnWindowCornerPreferenceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Private <see cref="P:Wpf.Ui.Controls.FluentWindow.WindowCornerPreference"/> property callback.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.FluentWindow.OnCornerPreferenceChanged(Wpf.Ui.Controls.WindowCornerPreference,Wpf.Ui.Controls.WindowCornerPreference)">
            <summary>
            This virtual method is called when <see cref="P:Wpf.Ui.Controls.FluentWindow.WindowCornerPreference"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.FluentWindow.OnWindowBackdropTypeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Private <see cref="P:Wpf.Ui.Controls.FluentWindow.WindowBackdropType"/> property callback.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.FluentWindow.OnBackdropTypeChanged(Wpf.Ui.Controls.WindowBackdropType,Wpf.Ui.Controls.WindowBackdropType)">
            <summary>
            This virtual method is called when <see cref="P:Wpf.Ui.Controls.FluentWindow.WindowBackdropType"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.FluentWindow.OnExtendsContentIntoTitleBarChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Private <see cref="P:Wpf.Ui.Controls.FluentWindow.ExtendsContentIntoTitleBar"/> property callback.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.FluentWindow.OnExtendsContentIntoTitleBarChanged(System.Boolean,System.Boolean)">
            <summary>
            This virtual method is called when <see cref="P:Wpf.Ui.Controls.FluentWindow.ExtendsContentIntoTitleBar"/> is changed.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Flyout">
            <summary>
            Represents a control that creates a pop-up window that displays information for an element in the interface.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Flyout.IsOpenProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Flyout.IsOpen"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Flyout.PlacementProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Flyout.Placement"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Flyout.OpenedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.Flyout.Opened"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Flyout.ClosedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.Flyout.Closed"/> routed event.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Flyout.IsOpen">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:Wpf.Ui.Controls.Flyout" /> is visible.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Flyout.Opened">
            <summary>
            Event triggered when <see cref="T:Wpf.Ui.Controls.Flyout" /> is opened.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Flyout.Closed">
            <summary>
            Event triggered when <see cref="T:Wpf.Ui.Controls.Flyout" /> is opened.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Flyout.Placement">
            <summary>
            Gets or sets the orientation of the <see cref="T:Wpf.Ui.Controls.Flyout" /> control when the control opens,
            and specifies the behavior of the <see cref="T:System.Windows.Controls.Primitives.Popup" />
            control when it overlaps screen boundaries.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Flyout.OnApplyTemplate">
            <summary>
            Invoked whenever application code or an internal process,
            such as a rebuilding layout pass, calls the ApplyTemplate method.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.FontTypography">
            <summary>
            Defines several predefined text styles that you can apply to some elements responsible for displaying it.
            <para><see href="https://learn.microsoft.com/en-us/windows/apps/design/style/typography"/></para>
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.GridView">
            <summary>
            Extends <see cref="T:System.Windows.Controls.GridView"/> to use Wpf.Ui custom styles
            </summary>
            <example>
            To use this enhanced GridView in a ListView:
            <code lang="xml">
            &lt;ListView&gt;
                &lt;ListView.View&gt;
                    &lt;local:GridView&gt;
                        &lt;GridViewColumn Header="First Name" DisplayMemberBinding="{Binding FirstName}"/&gt;
                        &lt;GridViewColumn Header="Last Name" DisplayMemberBinding="{Binding LastName}"/&gt;
                    &lt;/local:GridView&gt;
                &lt;/ListView.View&gt;
            &lt;/ListView&gt;
            </code>
            </example>
        </member>
        <member name="T:Wpf.Ui.Controls.GridViewColumn">
            <summary>
            Extends <see cref="T:System.Windows.Controls.GridViewColumn"/> with MinWidth and MaxWidth properties.
            It can be used with <see cref="T:Wpf.Ui.Controls.ListView"/> when in GridView mode.
            </summary>
            <example>
            <code lang="xml">
            &lt;ui:ListView&gt;
                &lt;ui:ListView.View&gt;
                    &lt;ui:GridView&gt;
                        &lt;ui:GridViewColumn
                            MinWidth="100"
                            MaxWidth="200"
                            DisplayMemberBinding="{Binding FirstName}"
                            Header="First Name" /&gt;
                    &lt;/ui:GridView&gt;
                &lt;/ui:ListView.View&gt;
            &lt;/ui:ListView&gt;
            </code>
            </example>
        </member>
        <member name="M:Wpf.Ui.Controls.GridViewColumn.UpdateDesiredWidth">
            <summary>
            Updates the desired width of the column to be clamped between MinWidth and MaxWidth).
            </summary>
            <remarks>
            Uses reflection to directly set the private `_desiredWidth` field on the `System.Windows.Controls.GridViewColumn`.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if reflection fails to access the `_desiredWidth` field
            </exception>
        </member>
        <member name="P:Wpf.Ui.Controls.GridViewColumn.MinWidth">
            <summary>
            Gets or sets the minimum width of the column.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.GridViewColumn.MinWidthProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.GridViewColumn.MinWidth"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.GridViewColumn.MaxWidth">
            <summary>
            gets or sets the maximum width of the column.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.GridViewColumn.MaxWidthProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.GridViewColumn.MaxWidth"/> dependency property.</summary>
        </member>
        <member name="T:Wpf.Ui.Controls.GridViewHeaderRowPresenter">
            <summary>
            Extends <see cref="T:System.Windows.Controls.GridViewHeaderRowPresenter"/>, and adds layout support for <see cref="T:Wpf.Ui.Controls.GridViewColumn"/>, which can have <see cref="P:Wpf.Ui.Controls.GridViewColumn.MinWidth"/> and <see cref="P:Wpf.Ui.Controls.GridViewColumn.MaxWidth"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.GridViewRowPresenter">
            <summary>
            Extends <see cref="T:System.Windows.Controls.GridViewRowPresenter"/>, and adds header row layout support for <see cref="T:Wpf.Ui.Controls.GridViewColumn"/>, which can have <see cref="P:Wpf.Ui.Controls.GridViewColumn.MinWidth"/> and <see cref="P:Wpf.Ui.Controls.GridViewColumn.MaxWidth"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.HyperlinkButton">
            <summary>
            Button that opens a URL in a web browser.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.HyperlinkButton.NavigateUriProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.HyperlinkButton.NavigateUri"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.HyperlinkButton.NavigateUri">
            <summary>
            Gets or sets the URL (or application shortcut) to open.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.IAppearanceControl">
            <summary>
            UI <see cref="T:System.Windows.Controls.Control"/> with <see cref="T:Wpf.Ui.Controls.ControlAppearance"/> attributes.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.IAppearanceControl.Appearance">
            <summary>
            Gets or sets the <see cref="P:Wpf.Ui.Controls.IAppearanceControl.Appearance"/> of the control, if available.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.FontIcon">
            <summary>
            Represents an icon that uses a glyph from the specified font.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.FontIcon.FontFamilyProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.FontIcon.FontFamily"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.FontIcon.FontSizeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.FontIcon.FontSize"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.FontIcon.FontStyleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.FontIcon.FontStyle"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.FontIcon.FontWeightProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.FontIcon.FontWeight"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.FontIcon.GlyphProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.FontIcon.Glyph"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.FontIcon.FontFamily">
            <inheritdoc cref="P:System.Windows.Controls.Control.FontFamily"/>
        </member>
        <member name="P:Wpf.Ui.Controls.FontIcon.FontSize">
            <inheritdoc cref="P:System.Windows.Controls.Control.FontSize"/>
        </member>
        <member name="P:Wpf.Ui.Controls.FontIcon.FontStyle">
            <inheritdoc cref="P:System.Windows.Controls.Control.FontStyle"/>
        </member>
        <member name="P:Wpf.Ui.Controls.FontIcon.FontWeight">
            <inheritdoc cref="P:System.Windows.Controls.Control.FontWeight"/>
        </member>
        <member name="P:Wpf.Ui.Controls.FontIcon.Glyph">
            <summary>
            Gets or sets the character code that identifies the icon glyph.
            </summary>
            <returns>The hexadecimal character code for the icon glyph.</returns>
        </member>
        <member name="T:Wpf.Ui.Controls.IconElement">
            <summary>
            Represents the base class for an icon UI element.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.IconElement.ForegroundProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.IconElement.Foreground"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.IconElement.Foreground">
            <inheritdoc cref="P:System.Windows.Controls.Control.Foreground"/>
        </member>
        <member name="M:Wpf.Ui.Controls.IconElement.Coerce(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the value of an Icon dependency property, allowing the use of either IconElement or IconSourceElement.
            </summary>
            <param name="_">The dependency object (unused).</param>
            <param name="baseValue">The value to be coerced.</param>
            <returns>An IconElement, either directly or derived from an IconSourceElement.</returns>
        </member>
        <member name="T:Wpf.Ui.Controls.IconElementConverter">
            <summary>
            Tries to convert <see cref="T:Wpf.Ui.Controls.SymbolRegular"/> and <seealso cref="T:Wpf.Ui.Controls.SymbolFilled"/>  to <see cref="T:Wpf.Ui.Controls.SymbolIcon"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.IconSourceElement">
            <summary>
            Represents an icon that uses an IconSource as its content.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.IconSourceElement.IconSourceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.IconSourceElement.IconSource"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.IconSourceElement.IconSource">
            <summary>
            Gets or sets <see cref="P:Wpf.Ui.Controls.IconSourceElement.IconSource"/>
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ImageIcon">
            <summary>
            Represents an icon that uses an <see cref="T:System.Windows.Controls.Image"/> as its content.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ImageIcon.SourceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ImageIcon.Source"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ImageIcon.Source">
            <summary>
            Gets or sets the Source on this Image.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.SymbolIcon">
            <summary>
            Represents a text element containing an icon glyph.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SymbolIcon.SymbolProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.SymbolIcon.Symbol"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SymbolIcon.FilledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.SymbolIcon.Filled"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.SymbolIcon.Symbol">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Controls.SymbolRegular"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.SymbolIcon.Filled">
            <summary>
            Gets or sets a value indicating whether or not we should use the <see cref="T:Wpf.Ui.Controls.SymbolFilled"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.FontIconSource">
            <summary>
            Represents an icon source that uses a glyph from the specified font.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.FontIconSource.FontFamilyProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.FontIconSource.FontFamily"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.FontIconSource.FontSizeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.FontIconSource.FontSize"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.FontIconSource.FontStyleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.FontIconSource.FontStyle"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.FontIconSource.FontWeightProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.FontIconSource.FontWeight"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.FontIconSource.GlyphProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.FontIconSource.Glyph"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.FontIconSource.FontFamily">
            <inheritdoc cref="P:System.Windows.Controls.Control.FontFamily"/>
        </member>
        <member name="P:Wpf.Ui.Controls.FontIconSource.FontSize">
            <inheritdoc cref="P:System.Windows.Controls.Control.FontSize"/>
        </member>
        <member name="P:Wpf.Ui.Controls.FontIconSource.FontWeight">
            <inheritdoc cref="P:System.Windows.Controls.Control.FontWeight"/>
        </member>
        <member name="P:Wpf.Ui.Controls.FontIconSource.FontStyle">
            <inheritdoc cref="P:System.Windows.Controls.Control.FontStyle"/>
        </member>
        <member name="P:Wpf.Ui.Controls.FontIconSource.Glyph">
            <summary>
            Gets or sets the character code that identifies the icon glyph.
            </summary>
            <returns>The hexadecimal character code for the icon glyph.</returns>
        </member>
        <member name="T:Wpf.Ui.Controls.IconSource">
            <summary>
            Represents the base class for an icon source.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.IconSource.ForegroundProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.IconSource.Foreground"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.IconSource.Foreground">
            <inheritdoc cref="P:System.Windows.Controls.Control.Foreground"/>
        </member>
        <member name="T:Wpf.Ui.Controls.SymbolIconSource">
            <summary>
            Represents an icon source that uses a glyph from the specified font.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SymbolIconSource.FontSizeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.SymbolIconSource.FontSize"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SymbolIconSource.FontStyleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.SymbolIconSource.FontStyle"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SymbolIconSource.FontWeightProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.SymbolIconSource.FontWeight"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SymbolIconSource.SymbolProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.SymbolIconSource.Symbol"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SymbolIconSource.FilledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.SymbolIconSource.Filled"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.SymbolIconSource.FontSize">
            <inheritdoc cref="P:System.Windows.Controls.Control.FontSize"/>
        </member>
        <member name="P:Wpf.Ui.Controls.SymbolIconSource.FontWeight">
            <inheritdoc cref="P:System.Windows.Controls.Control.FontWeight"/>
        </member>
        <member name="P:Wpf.Ui.Controls.SymbolIconSource.FontStyle">
            <inheritdoc cref="P:System.Windows.Controls.Control.FontStyle"/>
        </member>
        <member name="P:Wpf.Ui.Controls.SymbolIconSource.Symbol">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Controls.SymbolRegular"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.SymbolIconSource.Filled">
            <summary>
            Gets or sets a value indicating whether or not we should use the <see cref="T:Wpf.Ui.Controls.SymbolFilled"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.IDpiAwareControl">
            <summary>
            The control that should react to changes in the screen DPI.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.IIconControl">
            <summary>
            Control that allows you to set an icon in it with an <see cref="P:Wpf.Ui.Controls.IIconControl.Icon"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.IIconControl.Icon">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Controls.IconElement"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Image">
            <summary>
            Represents an image with additional properties for Borders and Rounded corners
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Image.SourceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Image.Source"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Image.CornerRadiusProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Image.CornerRadius"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Image.StretchProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Image.Stretch"/> dependency property.</summary>
            <seealso cref="P:System.Windows.Controls.Viewbox.Stretch" />
        </member>
        <member name="F:Wpf.Ui.Controls.Image.StretchDirectionProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Image.StretchDirection"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Image.InnerCornerRadiusPropertyKey">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Image.InnerCornerRadius"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Image.InnerCornerRadiusProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Image.InnerCornerRadius"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Image.Source">
            <summary>
            Gets or sets the Source on this Image.
            The Source property is the ImageSource that holds the actual image drawn.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Image.Stretch">
            <summary>
            Gets or sets the Stretch on this Image.
            The Stretch property determines how large the Image will be drawn.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Image.StretchDirection">
            <summary>
            Gets or sets the stretch direction of the Viewbox, which determines the restrictions on
            scaling that are applied to the content inside the Viewbox.  For instance, this property
            can be used to prevent the content from being smaller than its native size or larger than
            its native size.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Image.CornerRadius">
            <summary>
            Gets or sets the CornerRadius property allows users to control the roundness of the corners independently by
            setting a radius value for each corner.  Radius values that are too large are scaled so that they
            smoothly blend from corner to corner.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Image.InnerCornerRadius">
            <summary>
            Gets the CornerRadius for the inner image's Mask.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBadge.IconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.InfoBadge.Icon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBadge.SeverityProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.InfoBadge.Severity"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBadge.ValueProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.InfoBadge.Value"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBadge.CornerRadiusProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.InfoBadge.CornerRadius"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.InfoBadge.Severity">
            <summary>
            Gets or sets the title of the <see cref="P:Wpf.Ui.Controls.InfoBadge.Severity" />.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.InfoBadge.Value">
            <summary>
            Gets or sets the title of the <see cref="P:Wpf.Ui.Controls.InfoBadge.Value" />.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.InfoBadge.CornerRadius">
            <summary>
            Gets or sets the title of the <see cref="P:Wpf.Ui.Controls.InfoBadge.CornerRadius" />.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.InfoBadge.Icon">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Controls.IconElement"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBadgeSeverity.Attention">
            <summary>
            Communicates that the InfoBadge is displaying general information that requires the user's attention.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBadgeSeverity.Informational">
            <summary>
            Communicates that the InfoBadge is displaying general information that requires the user's attention.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBadgeSeverity.Success">
            <summary>
            Communicates that the InfoBadge is displaying general information that requires the user's attention.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBadgeSeverity.Caution">
            <summary>
            Communicates that the InfoBadge is displaying general information that requires the user's attention.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBadgeSeverity.Critical">
            <summary>
            Communicates that the InfoBadge is displaying general information that requires the user's attention.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.InfoBar">
            <summary>
            An <see cref="T:Wpf.Ui.Controls.InfoBar" /> is an inline notification for essential app-
            wide messages. The InfoBar will take up space in a layout and will not
            cover up other content or float on top of it. It supports rich content
            (including titles, messages, and icons) and can be configured to be
            user-dismissable or persistent.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBar.IsClosableProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.InfoBar.IsClosable"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBar.IsOpenProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.InfoBar.IsOpen"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBar.TitleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.InfoBar.Title"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBar.MessageProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.InfoBar.Message"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBar.SeverityProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.InfoBar.Severity"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBar.TemplateButtonCommandProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.InfoBar.TemplateButtonCommand"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.InfoBar.IsClosable">
            <summary>
            Gets or sets a value indicating whether the user can close the <see cref="T:Wpf.Ui.Controls.InfoBar" />. Defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.InfoBar.IsOpen">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Wpf.Ui.Controls.InfoBar" /> is open.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.InfoBar.Title">
            <summary>
            Gets or sets the title of the <see cref="T:Wpf.Ui.Controls.InfoBar" />.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.InfoBar.Message">
            <summary>
            Gets or sets the message of the <see cref="T:Wpf.Ui.Controls.InfoBar" />.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.InfoBar.Severity">
            <summary>
            Gets or sets the type of the <see cref="T:Wpf.Ui.Controls.InfoBar" /> to apply
            consistent status color, icon, and assistive technology settings
            dependent on the criticality of the notification.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.InfoBar.TemplateButtonCommand">
            <summary>
            Gets the <see cref="T:Wpf.Ui.Input.RelayCommand`1"/> triggered after clicking
            the close button.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.InfoBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Controls.InfoBar"/> class.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBarSeverity.Informational">
            <summary>
            Communicates that the InfoBar is displaying general information that requires the user's attention.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBarSeverity.Success">
            <summary>
            Communicates that the InfoBar is displaying information regarding a long-running and/or background task
            that has completed successfully.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBarSeverity.Warning">
            <summary>
            Communicates that the InfoBar is displaying information regarding a condition that might cause a problem in
            the future.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.InfoBarSeverity.Error">
            <summary>
            Communicates that the InfoBar is displaying information regarding an error or problem that has occurred.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ItemRange">
            <summary>
            Items range.
            <para>Based on <see href="https://github.com/sbaeumlisberger/VirtualizingWrapPanel"/>.</para>
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.IThemeControl">
            <summary>
            Control changing its properties or appearance depending on the theme.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.IThemeControl.ApplicationTheme">
            <summary>
            Gets the theme that is currently set.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ListView">
            <summary>
            Extends <see cref="T:System.Windows.Controls.ListView"/>, and adds customized support <see cref="F:Wpf.Ui.Controls.ListViewViewState.GridView"/> or <see cref="F:Wpf.Ui.Controls.ListViewViewState.Default"/>.
            </summary>
            <example>
            <code lang="xml">
            &lt;ui:ListView ItemsSource="{Binding ...}" &gt;
                &lt;ui:ListView.View&gt;
                    &lt;ui:GridView&gt;
                        &lt;GridViewColumn
                            DisplayMemberBinding="{Binding FirstName}"
                            Header="First Name" /&gt;
                        &lt;GridViewColumn
                            DisplayMemberBinding="{Binding LastName}"
                            Header="Last Name" /&gt;
                    &lt;/ui:GridView&gt;
                &lt;/ui:ListView.View&gt;
            &lt;/ui:ListView&gt;
            </code>
            </example>
        </member>
        <member name="F:Wpf.Ui.Controls.ListView.ViewStateProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ListView.ViewState"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ListView.ViewState">
            <summary>
            Gets or sets the view state of the <see cref="T:Wpf.Ui.Controls.ListView"/>, enabling custom logic based on the current view.
            </summary>
            <value>The current view state of the <see cref="T:Wpf.Ui.Controls.ListView"/>.</value>
        </member>
        <member name="T:Wpf.Ui.Controls.LoadingScreen">
            <summary>
            Prestyled loading screen with <see cref="T:Wpf.Ui.Controls.ProgressRing"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.MenuItem">
            <summary>
            Extended <see cref="T:System.Windows.Controls.MenuItem"/> with <see cref="T:Wpf.Ui.Controls.SymbolRegular"/> properties.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MenuItem.Icon">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Controls.IconElement"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.MenuLoader">
            <summary>
            Changes readonly field value of <see cref="P:System.Windows.SystemParameters.MenuDropAlignment"/> to false.
            </summary>
            <summary>
            MenuLoader
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.MenuLoader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Controls.MenuLoader"/> class.
            </summary>
            <remarks>
            Sets menu alignment on initialization.
            </remarks>
        </member>
        <member name="M:Wpf.Ui.Controls.MenuLoader.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.MessageBox">
            <summary>
            Customized window for notifications.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.ShowTitleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.MessageBox.ShowTitle"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.PrimaryButtonTextProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.MessageBox.PrimaryButtonText"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.SecondaryButtonTextProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.MessageBox.SecondaryButtonText"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.CloseButtonTextProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.MessageBox.CloseButtonText"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.PrimaryButtonIconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.MessageBox.PrimaryButtonIcon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.SecondaryButtonIconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.MessageBox.SecondaryButtonIcon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.CloseButtonIconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.MessageBox.CloseButtonIcon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.PrimaryButtonAppearanceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.MessageBox.PrimaryButtonAppearance"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.SecondaryButtonAppearanceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.MessageBox.SecondaryButtonAppearance"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.CloseButtonAppearanceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.MessageBox.CloseButtonAppearance"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.IsPrimaryButtonEnabledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.MessageBox.IsPrimaryButtonEnabled"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.IsSecondaryButtonEnabledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.MessageBox.IsSecondaryButtonEnabled"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.TemplateButtonCommandProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.MessageBox.TemplateButtonCommand"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.ShowTitle">
            <summary>
            Gets or sets a value indicating whether to show the <see cref="P:System.Windows.Window.Title"/> in <see cref="T:Wpf.Ui.Controls.TitleBar"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.PrimaryButtonText">
            <summary>
            Gets or sets the text to display on the primary button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.SecondaryButtonText">
            <summary>
            Gets or sets the text to be displayed on the secondary button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.CloseButtonText">
            <summary>
            Gets or sets the text to display on the close button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.PrimaryButtonIcon">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Controls.SymbolRegular"/> on the primary button
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.SecondaryButtonIcon">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Controls.SymbolRegular"/> on the secondary button
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.CloseButtonIcon">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Controls.SymbolRegular"/> on the close button
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.PrimaryButtonAppearance">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Controls.ControlAppearance"/> on the primary button
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.SecondaryButtonAppearance">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Controls.ControlAppearance"/> on the secondary button
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.CloseButtonAppearance">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Controls.ControlAppearance"/> on the close button
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.IsSecondaryButtonEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Wpf.Ui.Controls.MessageBox"/> primary button is enabled.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.IsPrimaryButtonEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Wpf.Ui.Controls.MessageBox"/> secondary button is enabled.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.TemplateButtonCommand">
            <summary>
            Gets the command triggered after clicking the button on the Footer.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.MessageBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Controls.MessageBox"/> class.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.MessageBox.ShowDialogAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Displays a message box
            </summary>
            <returns><see cref="T:Wpf.Ui.Controls.MessageBoxResult"/></returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown if the operation is canceled.</exception>
        </member>
        <member name="M:Wpf.Ui.Controls.MessageBox.OnLoaded">
            <summary>
            Occurs after Loading event
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.MessageBox.ResizeToContentSize(System.Windows.UIElement)">
            <summary>
            Resizes the MessageBox to fit the content's size, including margins.
            </summary>
            <param name="rootElement">The root element of the MessageBox</param>
        </member>
        <member name="M:Wpf.Ui.Controls.MessageBox.OnButtonClick(Wpf.Ui.Controls.MessageBoxButton)">
            <summary>
            Occurs after the <see cref="T:Wpf.Ui.Controls.MessageBoxButton"/> is clicked
            </summary>
            <param name="button">The MessageBox button</param>
        </member>
        <member name="T:Wpf.Ui.Controls.MessageBoxButton">
            <summary>
            Defines constants that specify the default button on a <see cref="T:Wpf.Ui.Controls.MessageBox"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBoxButton.Primary">
            <summary>
            The primary button
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBoxButton.Secondary">
            <summary>
            The secondary button
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBoxButton.Close">
            <summary>
            The close button
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.MessageBoxResult">
            <summary>
            Specifies identifiers to indicate the return value of a <see cref="T:Wpf.Ui.Controls.MessageBox"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBoxResult.None">
            <summary>
            No button was tapped.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBoxResult.Primary">
            <summary>
            The primary button was tapped by the user.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBoxResult.Secondary">
            <summary>
            The secondary button was tapped by the user.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.INavigationView">
            <summary>
            Represents a container that enables navigation of app content. It has a header, a view for the main content, and a menu pane for navigation commands.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.Header">
            <summary>
            Gets or sets the header content.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.HeaderVisibility">
            <summary>
            Gets or sets the <see cref="P:Wpf.Ui.Controls.INavigationView.Header"/> visibility.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.AlwaysShowHeader">
            <summary>
            Gets or sets a value indicating whether the header is always visible.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.MenuItems">
            <summary>
            Gets the collection of menu items displayed in the NavigationView.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.MenuItemsSource">
            <summary>
            Gets or sets an object source used to generate the content of the NavigationView menu.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.FooterMenuItems">
            <summary>
            Gets the list of objects to be used as navigation items in the footer menu.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.FooterMenuItemsSource">
            <summary>
            Gets or sets the object that represents the navigation items to be used in the footer menu.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.SelectedItem">
            <summary>
            Gets the selected item.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.ContentOverlay">
            <summary>
            Gets or sets a UI element that is shown at the top of the control, below the pane if PaneDisplayMode is Top.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.IsBackEnabled">
            <summary>
            Gets a value indicating whether the back button is enabled or disabled.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.IsBackButtonVisible">
            <summary>
            Gets or sets a value that indicates whether the back button is visible or not.
            Default value is "Auto", which indicates that button visibility depends on the DisplayMode setting of the NavigationView.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.IsPaneToggleVisible">
            <summary>
            Gets or sets a value indicating whether the toggle button is visible.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.IsPaneOpen">
            <summary>
            Gets or sets a value indicating whether the NavigationView pane is expanded to its full width.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.IsPaneVisible">
            <summary>
            Gets or sets a value indicating whether the pane is shown.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.OpenPaneLength">
            <summary>
            Gets or sets the width of the NavigationView pane when it's fully expanded.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.CompactPaneLength">
            <summary>
            Gets or sets the width of the NavigationView pane in its compact display mode.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.PaneHeader">
            <summary>
            Gets or sets the content for the pane header.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.PaneTitle">
            <summary>
            Gets or sets the label adjacent to the menu icon when the NavigationView pane is open.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.PaneFooter">
            <summary>
            Gets or sets the content for the pane footer.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.PaneDisplayMode">
            <summary>
            Gets or sets a value that specifies how the pane and content areas of a NavigationView are being shown.
            <para>It is not the same PaneDisplayMode as in WinUi.</para>
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.TitleBar">
            <summary>
            Gets or sets an TitleBar to be displayed in the NavigationView.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.AutoSuggestBox">
            <summary>
            Gets or sets an AutoSuggestBox to be displayed in the NavigationView.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.BreadcrumbBar">
            <summary>
            Gets or sets an BreadcrumbBar that is in <see cref="P:Wpf.Ui.Controls.INavigationView.Header"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.ItemTemplate">
            <summary>
            Gets or sets the template property for <see cref="P:Wpf.Ui.Controls.INavigationView.MenuItems"/> and <see cref="P:Wpf.Ui.Controls.INavigationView.FooterMenuItems"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.TransitionDuration">
            <summary>
            Gets or sets a value deciding how long the effect of the transition between the pages should take.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.Transition">
            <summary>
            Gets or sets type of <see cref="T:Wpf.Ui.Controls.INavigationView"/> transitions during navigation.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.FrameMargin">
            <summary>
            Gets or sets margin for a Frame of <see cref="T:Wpf.Ui.Controls.INavigationView"/>
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.INavigationView.PaneOpened">
            <summary>
            Occurs when the NavigationView pane is opened.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.INavigationView.PaneClosed">
            <summary>
            Occurs when the NavigationView pane is closed.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.INavigationView.SelectionChanged">
            <summary>
            Occurs when the currently selected item changes.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.INavigationView.ItemInvoked">
            <summary>
            Occurs when an item in the menu receives an interaction such as a click or tap.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.INavigationView.BackRequested">
            <summary>
            Occurs when the back button receives an interaction such as a click or tap.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.INavigationView.Navigating">
            <summary>
            Occurs when a new navigation is requested
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.INavigationView.Navigated">
            <summary>
            Occurs when navigated to page
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationView.CanGoBack">
            <summary>
            Gets a value indicating whether there is at least one entry in back navigation history.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.INavigationView.Navigate(System.Type,System.Object)">
            <summary>
            Synchronously navigates current navigation Frame to the
            given Element.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.INavigationView.Navigate(System.String,System.Object)">
            <summary>
            Synchronously navigates current navigation Frame to the
            given Element.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.INavigationView.NavigateWithHierarchy(System.Type,System.Object)">
            <summary>
            Synchronously adds an element to the navigation stack and navigates current navigation Frame to the
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.INavigationView.ReplaceContent(System.Type)">
            <summary>
            Replaces the contents of the navigation frame, without changing the currently selected item or triggering an <see cref="E:Wpf.Ui.Controls.INavigationView.SelectionChanged"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.INavigationView.ReplaceContent(System.Windows.UIElement,System.Object)">
            <summary>
            Replaces the contents of the navigation frame, without changing the currently selected item or triggering an <see cref="E:Wpf.Ui.Controls.INavigationView.SelectionChanged"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.INavigationView.GoForward">
            <summary>
            Navigates the NavigationView to the next journal entry.
            </summary>
            <returns><see langword="true"/> if successfully navigated forward, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.INavigationView.GoBack">
            <summary>
            Navigates the NavigationView to the previous journal entry.
            </summary>
            <returns><see langword="true"/> if successfully navigated backward, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.INavigationView.ClearJournal">
            <summary>
            Clears the NavigationView history.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.INavigationView.SetPageProviderService(Wpf.Ui.Abstractions.INavigationViewPageProvider)">
            <summary>
            Allows you to assign to the NavigationView a special service responsible for retrieving the page instances.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.INavigationView.SetServiceProvider(System.IServiceProvider)">
            <summary>
            Allows you to assign a general <see cref="T:System.IServiceProvider"/> to the NavigationView that will be used to retrieve page instances and view models.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.INavigationViewItem">
            <summary>
            Represents the container for an item in a NavigationView control.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationViewItem.Id">
            <summary>
            Gets the unique identifier that allows the item to be located in the navigation.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationViewItem.Content">
            <summary>
            Gets or sets the content
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationViewItem.Icon">
            <summary>
            Gets or sets the icon displayed in the MenuItem object.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationViewItem.MenuItems">
            <summary>
            Gets the collection of menu items displayed in the NavigationView.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationViewItem.MenuItemsSource">
            <summary>
            Gets or sets an object source used to generate the content of the NavigationView menu.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationViewItem.IsActive">
            <summary>
            Gets a value indicating whether the current element is active.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationViewItem.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the sub-<see cref="P:Wpf.Ui.Controls.INavigationViewItem.MenuItems"/> are expanded.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationViewItem.TargetPageTag">
            <summary>
            Gets or sets the unique tag used by the parent navigation system for the purpose of searching and navigating.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationViewItem.TargetPageType">
            <summary>
            Gets or sets the type of the page to be navigated. (Should be derived from <see cref="T:System.Windows.FrameworkElement"/>).
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationViewItem.NavigationCacheMode">
            <summary>
            Gets or sets the caching characteristics for a page involved in a navigation.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationViewItem.Template">
            <summary>
            Gets or sets the template property
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.INavigationViewItem.NavigationViewItemParent">
            <summary>
            Gets or sets the parent if it's in <see cref="P:Wpf.Ui.Controls.INavigationViewItem.MenuItems"/> collection
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.INavigationViewItem.Click">
            <summary>
            Add / Remove ClickEvent handler.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.INavigationViewItem.Activate(Wpf.Ui.Controls.INavigationView)">
            <summary>
            Correctly activates
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.INavigationViewItem.Deactivate(Wpf.Ui.Controls.INavigationView)">
            <summary>
            Correctly deactivates
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.NavigationCacheMode">
            <summary>
            Specifies caching characteristics for a page involved in a navigation.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationCacheMode.Disabled">
            <summary>
            The page is never cached and a new instance of the page is created on each visit.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationCacheMode.Enabled">
            <summary>
            The page is cached, but the cached instance is discarded when the size of the cache for the frame is exceeded.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationCacheMode.Required">
            <summary>
            The page is cached and the cached instance is reused for every visit regardless of the cache size for the frame.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.NavigationView">
            <content>
            Defines attached properties for <see cref="T:Wpf.Ui.Controls.NavigationView"/>.
            </content>
            <summary>
            Represents a container that enables navigation of app content. It has a header, a view for the main content, and a menu pane for navigation commands.
            </summary>
            <content>
            Defines events for <see cref="T:Wpf.Ui.Controls.NavigationView"/>.
            </content>
            <content>
            Defines navigation logic and state management for <see cref="T:Wpf.Ui.Controls.NavigationView"/>.
            </content>
            <content>
            Defines the dependency properties and dp callbacks for <see cref="T:Wpf.Ui.Controls.NavigationView"/> control
            </content>
            <content>
            Defines the template parts for the <see cref="T:Wpf.Ui.Controls.NavigationView"/> control
            </content>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.HeaderContentProperty">
            <summary>Registers attached property NavigationView.HeaderContent</summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.GetHeaderContent(System.Windows.FrameworkElement)">
            <summary>Helper for getting <see cref="F:Wpf.Ui.Controls.NavigationView.HeaderContentProperty"/> from <paramref name="target"/>.</summary>
            <param name="target"><see cref="T:System.Windows.FrameworkElement"/> to read <see cref="F:Wpf.Ui.Controls.NavigationView.HeaderContentProperty"/> from.</param>
            <returns>HeaderContent property value.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.SetHeaderContent(System.Windows.FrameworkElement,System.Object)">
            <summary>Helper for setting <see cref="F:Wpf.Ui.Controls.NavigationView.HeaderContentProperty"/> on <paramref name="target"/>.</summary>
            <param name="target"><see cref="T:System.Windows.FrameworkElement"/> to set <see cref="F:Wpf.Ui.Controls.NavigationView.HeaderContentProperty"/> on.</param>
            <param name="headerContent">HeaderContent property value.</param>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.NavigationParentProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.NavigationParent"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.NavigationParent">
            <summary>
            Gets the parent <see cref="T:Wpf.Ui.Controls.NavigationView"/> for its <see cref="T:Wpf.Ui.Controls.INavigationViewItem"/> children.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.GetNavigationParent(System.Windows.DependencyObject)">
            <summary>Helper for getting <see cref="F:Wpf.Ui.Controls.NavigationView.NavigationParentProperty"/> from <paramref name="navigationItem"/>.</summary>
            <param name="navigationItem"><see cref="T:System.Windows.DependencyObject"/> to read <see cref="F:Wpf.Ui.Controls.NavigationView.NavigationParentProperty"/> from.</param>
            <returns>NavigationParent property value.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Wpf.Ui.Controls.NavigationView"/> class and overrides default property metadata.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Controls.NavigationView"/> class.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.SelectedItem">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.OnInitialized(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This virtual method is called when this element is detached form a loaded tree.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.OnSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            This virtual method is called when ActualWidth or ActualHeight (or both) changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.OnBackButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This virtual method is called when <see cref="P:Wpf.Ui.Controls.NavigationView.BackButton"/> is clicked.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.OnToggleButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This virtual method is called when <see cref="P:Wpf.Ui.Controls.NavigationView.ToggleButton"/> is clicked.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.AutoSuggestBoxSymbolButtonOnClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This virtual method is called when <see cref="P:Wpf.Ui.Controls.NavigationView.AutoSuggestBoxSymbolButton"/> is clicked.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.OnPaneDisplayModeChanged">
            <summary>
            This virtual method is called when <see cref="P:Wpf.Ui.Controls.NavigationView.PaneDisplayMode"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.OnItemTemplateChanged">
            <summary>
            This virtual method is called when <see cref="P:Wpf.Ui.Controls.NavigationView.ItemTemplate"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.AutoSuggestBoxOnSuggestionChosen(Wpf.Ui.Controls.AutoSuggestBox,Wpf.Ui.Controls.AutoSuggestBoxSuggestionChosenEventArgs)">
            <summary>
            Navigate to the page after its name is selected in <see cref="P:Wpf.Ui.Controls.NavigationView.AutoSuggestBox"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.PaneOpenedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.NavigationView.PaneOpened"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.PaneClosedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.NavigationView.PaneClosed"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.SelectionChangedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.NavigationView.SelectionChanged"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.ItemInvokedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.NavigationView.ItemInvoked"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.BackRequestedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.NavigationView.BackRequested"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.NavigatingEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.NavigationView.Navigating"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.NavigatedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.NavigationView.Navigated"/> routed event.</summary>
        </member>
        <member name="E:Wpf.Ui.Controls.NavigationView.PaneOpened">
            <inheritdoc/>
        </member>
        <member name="E:Wpf.Ui.Controls.NavigationView.PaneClosed">
            <inheritdoc/>
        </member>
        <member name="E:Wpf.Ui.Controls.NavigationView.SelectionChanged">
            <inheritdoc/>
        </member>
        <member name="E:Wpf.Ui.Controls.NavigationView.ItemInvoked">
            <inheritdoc/>
        </member>
        <member name="E:Wpf.Ui.Controls.NavigationView.BackRequested">
            <inheritdoc/>
        </member>
        <member name="E:Wpf.Ui.Controls.NavigationView.Navigating">
            <inheritdoc/>
        </member>
        <member name="E:Wpf.Ui.Controls.NavigationView.Navigated">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.OnPaneOpened">
            <summary>
            Raises the pane opened event.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.OnPaneClosed">
            <summary>
            Raises the pane closed event.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.OnSelectionChanged">
            <summary>
            Raises the selection changed event.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.OnItemInvoked">
            <summary>
            Raises the item invoked event.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.OnBackRequested">
            <summary>
            Raises the back requested event.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.OnNavigating(System.Object)">
            <summary>
            Raises the navigating requested event.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.OnNavigated(System.Object)">
            <summary>
            Raises the navigated requested event.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.CanGoBack">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.SetPageProviderService(Wpf.Ui.Abstractions.INavigationViewPageProvider)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.SetServiceProvider(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.Navigate(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.Navigate(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.NavigateWithHierarchy(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.ReplaceContent(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.ReplaceContent(System.Windows.UIElement,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.GoForward">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.GoBack">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.ClearJournal">
            <inheritdoc />
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.EnableDebugMessagesProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.EnableDebugMessages"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.HeaderProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.Header"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.HeaderVisibilityProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.HeaderVisibility"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.AlwaysShowHeaderProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.AlwaysShowHeader"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.MenuItemsProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.MenuItems"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.MenuItemsSourceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.MenuItemsSource"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.FooterMenuItemsProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.FooterMenuItems"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.FooterMenuItemsSourceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.FooterMenuItemsSource"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.ContentOverlayProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.ContentOverlay"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.IsBackEnabledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.IsBackEnabled"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.IsBackButtonVisibleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.IsBackButtonVisible"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.IsPaneToggleVisibleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.IsPaneToggleVisible"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.IsPaneOpenProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.IsPaneOpen"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.IsPaneVisibleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.IsPaneVisible"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.OpenPaneLengthProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.OpenPaneLength"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.CompactPaneLengthProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.CompactPaneLength"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.PaneHeaderProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.PaneHeader"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.PaneTitleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.PaneTitle"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.PaneFooterProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.PaneFooter"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.PaneDisplayModeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.PaneDisplayMode"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.AutoSuggestBoxProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.AutoSuggestBox"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.TitleBarProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.TitleBar"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.BreadcrumbBarProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.BreadcrumbBar"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.ItemTemplateProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.ItemTemplate"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.TransitionDurationProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.TransitionDuration"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.TransitionProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.Transition"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.FrameMarginProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationView.FrameMargin"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.EnableDebugMessages">
            <summary>
            Gets or sets a value indicating whether debugging messages for this control are enabled
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.Header">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.HeaderVisibility">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.AlwaysShowHeader">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.MenuItems">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.MenuItemsSource">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.FooterMenuItems">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.FooterMenuItemsSource">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.ContentOverlay">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.IsBackEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.IsBackButtonVisible">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.IsPaneToggleVisible">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.IsPaneOpen">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.IsPaneVisible">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.OpenPaneLength">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.CompactPaneLength">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.PaneHeader">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.PaneTitle">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.PaneFooter">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.PaneDisplayMode">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.AutoSuggestBox">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.TitleBar">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.BreadcrumbBar">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.ItemTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.TransitionDuration">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.Transition">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.FrameMargin">
            <inheritdoc/>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.TemplateElementNavigationViewContentPresenter">
            <summary>
            Template element represented by the <c>PART_MenuItemsItemsControl</c> name.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.TemplateElementMenuItemsItemsControl">
            <summary>
            Template element represented by the <c>PART_MenuItemsItemsControl</c> name.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.TemplateElementFooterMenuItemsItemsControl">
            <summary>
            Template element represented by the <c>PART_FooterMenuItemsItemsControl</c> name.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.TemplateElementBackButton">
            <summary>
            Template element represented by the <c>PART_BackButton</c> name.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.TemplateElementToggleButton">
            <summary>
            Template element represented by the <c>PART_ToggleButton</c> name.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationView.TemplateElementAutoSuggestBoxSymbolButton">
            <summary>
            Template element represented by the <c>PART_AutoSuggestBoxSymbolButton</c> name.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.NavigationViewContentPresenter">
            <summary>
            Gets or sets the control responsible for rendering the content.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.MenuItemsItemsControl">
            <summary>
            Gets or sets the control located at the top of the pane with left arrow icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.FooterMenuItemsItemsControl">
            <summary>
            Gets or sets the control located at the top of the pane with hamburger icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.BackButton">
            <summary>
            Gets or sets the control located at the top of the pane with left arrow icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.ToggleButton">
            <summary>
            Gets or sets the control located at the top of the pane with hamburger icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationView.AutoSuggestBoxSymbolButton">
            <summary>
            Gets or sets the control that is visitable if PaneDisplayMode="Left" and in compact state
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationView.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.Controls.NavigationViewActivator">
            <summary>
            Internal activator for creating content instances of the navigation view items.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationViewActivator.CreateInstance(System.Type,System.Object)">
            <summary>
            Creates new instance of type derived from <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
            <param name="pageType"><see cref="T:System.Windows.FrameworkElement"/> to instantiate.</param>
            <param name="dataContext">Additional context to set.</param>
            <returns>Instance of the <see cref="T:System.Windows.FrameworkElement"/> object or <see langword="null"/>.</returns>
        </member>
        <member name="T:Wpf.Ui.Controls.NavigationViewBackButtonVisible">
            <summary>
            Defines constants that specify whether the back button is visible in NavigationView.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewBackButtonVisible.Collapsed">
            <summary>
            Do not display the back button in NavigationView, and do not reserve space for it in layout.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewBackButtonVisible.Visible">
            <summary>
            Display the back button in NavigationView.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewBackButtonVisible.Auto">
            <summary>
            The system chooses whether or not to display the back button, depending on the device/form factor. On phones, tablets, desktops, and hubs, the back button is visible. On Xbox/TV, the back button is collapsed.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewContentPresenter.TransitionDurationProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewContentPresenter.TransitionDuration"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewContentPresenter.TransitionProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewContentPresenter.Transition"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewContentPresenter.IsDynamicScrollViewerEnabledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewContentPresenter.IsDynamicScrollViewerEnabled"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationViewContentPresenter.Transition">
            <summary>
            Gets or sets type of <see cref="T:Wpf.Ui.Controls.NavigationViewContentPresenter"/> transitions during navigation.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationViewContentPresenter.IsDynamicScrollViewerEnabled">
            <summary>
            Gets or sets a value indicating whether the dynamic scroll viewer is enabled.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.NavigationViewItem">
            <summary>
            Represents the container for an item in a NavigationView control.
            When needed, it can be used as a normal button with a <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click"/> action.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewItem.MenuItemsProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewItem.MenuItems"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewItem.MenuItemsSourceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewItem.MenuItemsSource"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewItem.HasMenuItemsPropertyKey">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewItem.HasMenuItems"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewItem.HasMenuItemsProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewItem.HasMenuItems"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewItem.IsActiveProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewItem.IsActive"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewItem.IsPaneOpenProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewItem.IsPaneOpen"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewItem.IsExpandedProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewItem.IsExpanded"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewItem.IconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewItem.Icon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewItem.TargetPageTagProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewItem.TargetPageTag"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewItem.TargetPageTypeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewItem.TargetPageType"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewItem.InfoBadgeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewItem.InfoBadge"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewItem.NavigationCacheModeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewItem.NavigationCacheMode"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationViewItem.MenuItems">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationViewItem.MenuItemsSource">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationViewItem.HasMenuItems">
            <summary>
            Gets a value indicating whether MenuItems.Count > 0
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationViewItem.IsActive">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationViewItem.IsExpanded">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationViewItem.Icon">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationViewItem.TargetPageTag">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationViewItem.TargetPageType">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationViewItem.NavigationCacheMode">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationViewItem.NavigationViewItemParent">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationViewItem.IsMenuElement">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationViewItem.Id">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationViewItem.Activate(Wpf.Ui.Controls.INavigationView)">
            <summary>
            Correctly activates
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationViewItem.Deactivate(Wpf.Ui.Controls.INavigationView)">
            <summary>
            Correctly deactivates
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationViewItem.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationViewItem.OnInitialized(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationViewItem.OnClick">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationViewItem.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Is called when mouse is clicked down.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.NavigationViewItemHeader">
            <summary>
            Represents a header for a group of menu items in a NavigationMenu.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewItemHeader.TextProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewItemHeader.Text"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewItemHeader.IconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NavigationViewItemHeader.Icon"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationViewItemHeader.Text">
            <summary>
            Gets or sets the text presented in the header element.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationViewItemHeader.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.NavigationViewItemSeparator">
            <summary>
            Represents a line that separates menu items in a NavigationMenu.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.NavigationViewPaneDisplayMode">
            <summary>
            Defines constants that specify how and where the NavigationView pane is shown.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewPaneDisplayMode.Left">
            <summary>
            The pane is shown on the left side of the control.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewPaneDisplayMode.LeftMinimal">
            <summary>
            The pane is shown on the left side of the control. Only the pane icons are shown.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewPaneDisplayMode.LeftFluent">
            <summary>
            The pane is shown on the left side of the control. Large icons with titles underneath are the only display option. Does not support <see cref="P:Wpf.Ui.Controls.NavigationViewItem.MenuItems"/>.
            <para>Similar to the Windows Store (2022) app.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewPaneDisplayMode.Top">
            <summary>
            The pane is shown at the top of the control.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationViewPaneDisplayMode.Bottom">
            <summary>
            The pane is shown at the bottom of the control.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.INumberFormatter">
            <summary>
            An interface that returns a string representation of a provided value, using distinct format methods to format several data types.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.INumberFormatter.FormatDouble(System.Nullable{System.Double})">
            <summary>
            Returns a string representation of a <see cref="T:System.Double"/> value.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.INumberFormatter.FormatInt(System.Nullable{System.Int32})">
            <summary>
            Returns a string representation of an <see cref="T:System.Int32"/> value.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.INumberFormatter.FormatUInt(System.Nullable{System.UInt32})">
            <summary>
            Returns a string representation of a <see cref="T:System.UInt32"/> value.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.INumberParser">
            <summary>
            An interface that parses a string representation of a numeric value.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.INumberParser.ParseDouble(System.String)">
            <summary>
            Attempts to parse a string representation of a <see cref="T:System.Double"/> numeric value.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.INumberParser.ParseInt(System.String)">
            <summary>
            Attempts to parse a string representation of an <see cref="T:System.Int32"/> numeric value.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.INumberParser.ParseUInt(System.String)">
            <summary>
            Attempts to parse a string representation of an <see cref="T:System.UInt32"/> numeric value.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.NumberBox">
            <summary>
            Represents a control that can be used to display and edit numbers.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.ValueProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NumberBox.Value"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.MaxDecimalPlacesProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NumberBox.MaxDecimalPlaces"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.SmallChangeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NumberBox.SmallChange"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.LargeChangeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NumberBox.LargeChange"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.MaximumProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NumberBox.Maximum"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.MinimumProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NumberBox.Minimum"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.AcceptsExpressionProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NumberBox.AcceptsExpression"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.SpinButtonPlacementModeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NumberBox.SpinButtonPlacementMode"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.ValidationModeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NumberBox.ValidationMode"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.NumberFormatterProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.NumberBox.NumberFormatter"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.ValueChangedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.NumberBox.ValueChanged"/> routed event.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.Value">
            <summary>
            Gets or sets the numeric value of a <see cref="T:Wpf.Ui.Controls.NumberBox"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.MaxDecimalPlaces">
            <summary>
            Gets or sets the number of decimal places to be rounded when converting from Text to Value.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.SmallChange">
            <summary>
            Gets or sets the value that is added to or subtracted from <see cref="P:Wpf.Ui.Controls.NumberBox.Value"/> when a small change is made, such as with an arrow key or scrolling.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.LargeChange">
            <summary>
            Gets or sets the value that is added to or subtracted from <see cref="P:Wpf.Ui.Controls.NumberBox.Value"/> when a large change is made, such as with the PageUP and PageDown keys.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.Maximum">
            <summary>
            Gets or sets the numerical maximum for <see cref="P:Wpf.Ui.Controls.NumberBox.Value"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.Minimum">
            <summary>
            Gets or sets the numerical minimum for <see cref="P:Wpf.Ui.Controls.NumberBox.Value"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.AcceptsExpression">
            <summary>
            Gets or sets a value indicating whether the control will accept and evaluate a basic formulaic expression entered as input.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.NumberFormatter">
            <summary>
            Gets or sets the number formatter.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.SpinButtonPlacementMode">
            <summary>
            Gets or sets a value that indicates the placement of buttons used to increment or decrement the <see cref="P:Wpf.Ui.Controls.NumberBox.Value"/> property.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.ValidationMode">
            <summary>
            Gets or sets the input validation behavior to invoke when invalid input is entered.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.NumberBox.ValueChanged">
            <summary>
            Occurs after the user triggers evaluation of new input by pressing the Enter key, clicking a spin button, or by changing focus.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.OnTemplateButtonClick(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.OnLostFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.OnValueChanged(System.Windows.DependencyObject,System.Nullable{System.Double})">
            <summary>
            Is called when <see cref="P:Wpf.Ui.Controls.NumberBox.Value"/> in this <see cref="T:Wpf.Ui.Controls.NumberBox"/> changes.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.OnClipboardPaste(System.Object,System.Windows.DataObjectPastingEventArgs)">
            <summary>
            Is called when something is pasted in this <see cref="T:Wpf.Ui.Controls.NumberBox"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.NumberBoxSpinButtonPlacementMode">
            <summary>
            Defines values that specify how the spin buttons used to increment or decrement the <see cref="P:Wpf.Ui.Controls.NumberBox.Value"/> are displayed.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBoxSpinButtonPlacementMode.Hidden">
            <summary>
            The spin buttons are not displayed.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBoxSpinButtonPlacementMode.Compact">
            <summary>
            The spin buttons have two visual states, depending on focus. By default, the spin buttons are displayed in a compact, vertical orientation. When the Numberbox gets focus, the spin buttons expand.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBoxSpinButtonPlacementMode.Inline">
            <summary>
            The spin buttons are displayed in an expanded, horizontal orientation.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.NumberBoxValidationMode">
            <summary>
            Defines values that specify the input validation behavior of a <see cref="T:Wpf.Ui.Controls.NumberBox"/> when invalid input is entered.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBoxValidationMode.InvalidInputOverwritten">
            <summary>
            Input validation is disabled.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBoxValidationMode.Disabled">
            <summary>
            Invalid input is replaced by <see cref="T:Wpf.Ui.Controls.NumberBox"/> PlaceholderText text.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ValidateNumberFormatter">
            <summary>
            Base nubmer formatter that uses default format specifier and <see cref="T:System.Globalization.CultureInfo"/> that represents the culture used by the current thread.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ValidateNumberFormatter.FormatDouble(System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.ValidateNumberFormatter.FormatInt(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.ValidateNumberFormatter.FormatUInt(System.Nullable{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.ValidateNumberFormatter.ParseDouble(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.ValidateNumberFormatter.ParseInt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.ValidateNumberFormatter.ParseUInt(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.Controls.PassiveScrollViewer">
            <summary>
            A custom ScrollViewer that allows certain mouse events to bubble through when it's inactive.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.PassiveScrollViewer.IsScrollSpillEnabledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.PassiveScrollViewer.IsScrollSpillEnabled"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.PassiveScrollViewer.IsScrollSpillEnabled">
            <summary>
            Gets or sets a value indicating whether blocked inner scrolling should be propagated forward.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.PasswordBox">
            <summary>
            The modified password control.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.PasswordBox.PasswordProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.PasswordBox.Password"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.PasswordBox.PasswordCharProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.PasswordBox.PasswordChar"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.PasswordBox.IsPasswordRevealedProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.PasswordBox.IsPasswordRevealed"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.PasswordBox.RevealButtonEnabledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.PasswordBox.RevealButtonEnabled"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.PasswordBox.PasswordChangedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.PasswordBox.PasswordChanged"/> routed event.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.PasswordBox.Password">
            <summary>
            Gets or sets currently typed text represented by asterisks.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.PasswordBox.PasswordChar">
            <summary>
            Gets or sets character used to mask the password.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.PasswordBox.IsPasswordRevealed">
            <summary>
            Gets a value indicating whether the password is revealed.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.PasswordBox.RevealButtonEnabled">
            <summary>
            Gets or sets a value indicating whether to display the password reveal button.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.PasswordBox.PasswordChanged">
            <summary>
            Event fired from this text box when its inner content
            has been changed.
            </summary>
            <remarks>
            It is redirected from inner TextContainer.Changed event.
            </remarks>
        </member>
        <member name="M:Wpf.Ui.Controls.PasswordBox.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.PasswordBox.OnPasswordChanged">
            <summary>
            Is called when <see cref="P:Wpf.Ui.Controls.PasswordBox.Password"/> property is changing.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.PasswordBox.OnPasswordCharChanged">
            <summary>
            Is called when <see cref="P:Wpf.Ui.Controls.PasswordBox.PasswordChar"/> property is changing.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.PasswordBox.OnTemplateButtonClick(System.String)">
            <summary>
            Triggered by clicking a button in the control template.
            </summary>
            <param name="parameter">Additional parameters.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.PasswordBox.OnPasswordChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:Wpf.Ui.Controls.PasswordBox.Password"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.PasswordBox.OnPasswordCharChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called if the character is changed in the during the run.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.PasswordBox.OnIsPasswordRevealedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called if the reveal mode is changed in the during the run.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ProgressRing">
            <summary>
            Rotating loading ring.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ProgressRing.ProgressProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ProgressRing.Progress"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ProgressRing.IsIndeterminateProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ProgressRing.IsIndeterminate"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ProgressRing.EngAngleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ProgressRing.EngAngle"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ProgressRing.IndeterminateAngleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ProgressRing.IndeterminateAngle"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ProgressRing.CoverRingStrokeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ProgressRing.CoverRingStroke"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ProgressRing.CoverRingVisibilityProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ProgressRing.CoverRingVisibility"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ProgressRing.Progress">
            <summary>
            Gets or sets the progress.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ProgressRing.IsIndeterminate">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Wpf.Ui.Controls.ProgressRing"/> shows actual values (<see langword="false"/>)
            or generic, continuous progress feedback.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ProgressRing.EngAngle">
            <summary>
            Gets or sets the <see cref="P:Wpf.Ui.Controls.Arc.EndAngle"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ProgressRing.IndeterminateAngle">
            <summary>
            Gets the <see cref="P:Wpf.Ui.Controls.Arc.EndAngle"/> when <see cref="P:Wpf.Ui.Controls.ProgressRing.IsIndeterminate"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ProgressRing.CoverRingStroke">
            <summary>
            Gets background ring fill.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ProgressRing.CoverRingVisibility">
            <summary>
            Gets background ring visibility.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ProgressRing.UpdateProgressAngle">
            <summary>
            Re-draws <see cref="P:Wpf.Ui.Controls.Arc.EndAngle"/> depending on <see cref="P:Wpf.Ui.Controls.ProgressRing.Progress"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ProgressRing.OnProgressChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Validates the entered <see cref="P:Wpf.Ui.Controls.ProgressRing.Progress"/> and redraws the <see cref="T:Wpf.Ui.Controls.Arc"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.RatingControl">
            <summary>
            Displays the rating scale with interactions.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.RatingControl.ValueProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.RatingControl.Value"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.RatingControl.MaxRatingProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.RatingControl.MaxRating"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.RatingControl.HalfStarEnabledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.RatingControl.HalfStarEnabled"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.RatingControl.ValueChangedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.RatingControl.ValueChanged"/> routed event.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.RatingControl.Value">
            <summary>
            Gets or sets the rating value.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.RatingControl.MaxRating">
            <summary>
            Gets or sets the maximum allowed rating value.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.RatingControl.HalfStarEnabled">
            <summary>
            Gets or sets a value indicating whether half of the star can be selected.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.RatingControl.ValueChanged">
            <summary>
            Occurs after the user selects the rating.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.RatingControl.OnValueChanged(System.Double)">
            <summary>
            Is called when <see cref="P:Wpf.Ui.Controls.RatingControl.Value"/> changes.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.RatingControl.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Is called when mouse is moved away from the control.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.RatingControl.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Is called when mouse is moved around the control.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.RatingControl.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Is called when mouse is cliked down.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.RatingControl.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Adjusts the control's <see cref="P:Wpf.Ui.Controls.RatingControl.Value" /> in response to keyboard input, incrementing or decrementing based on the key pressed.
            </summary>
            <param name="e">Key event arguments containing details about the key press.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.RatingControl.OnApplyTemplate">
            <summary>
            Is called when Template is changed.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.RichTextBox">
            <summary>
            Extends the <see cref="T:System.Windows.Controls.RichTextBox"/> control with additional properties.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.RichTextBox.IsTextSelectionEnabledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.RichTextBox.IsTextSelectionEnabled"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.RichTextBox.IsTextSelectionEnabled">
            <summary>
            Gets or sets a value indicating whether the user can select text in the control.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ScrollDirection">
            <summary>
            Direction of <see cref="T:System.Windows.Controls.ScrollViewer"/>.
            <para>Based on <see href="https://github.com/sbaeumlisberger/VirtualizingWrapPanel"/>.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ScrollDirection.Vertical">
            <summary>
            Vertical scroll direction.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ScrollDirection.Horizontal">
            <summary>
            Horizontal scroll direction.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Snackbar">
            <summary>
            Snackbar inform user of a process that an app has performed or will perform. It appears temporarily, towards the bottom of the window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.IsCloseButtonEnabledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Snackbar.IsCloseButtonEnabled"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.SlideTransformProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Snackbar.SlideTransform"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.IsShownProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Snackbar.IsShown"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.TimeoutProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Snackbar.Timeout"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.TitleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Snackbar.Title"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.TitleTemplateProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Snackbar.TitleTemplate"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.IconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Snackbar.Icon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.AppearanceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Snackbar.Appearance"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.TemplateButtonCommandProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Snackbar.TemplateButtonCommand"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.ContentForegroundProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.Snackbar.ContentForeground"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.OpenedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.Snackbar.Opened"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.ClosedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.Snackbar.Closed"/> routed event.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.IsCloseButtonEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Wpf.Ui.Controls.Snackbar"/> close button should be visible.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.SlideTransform">
            <summary>
            Gets or sets the transform.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.IsShown">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Wpf.Ui.Controls.Snackbar"/> is visible.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.Timeout">
            <summary>
            Gets or sets a time for which the <see cref="T:Wpf.Ui.Controls.Snackbar"/> should be visible.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.Title">
            <summary>
            Gets or sets the title of the <see cref="T:Wpf.Ui.Controls.Snackbar"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.TitleTemplate">
            <summary>
            Gets or sets the title template of the <see cref="T:Wpf.Ui.Controls.Snackbar"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.Icon">
            <summary>
            Gets or sets the icon
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.Appearance">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.ContentForeground">
            <summary>
            Gets or sets the foreground of the <see cref="P:System.Windows.Controls.ContentControl.Content"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.TemplateButtonCommand">
            <summary>
            Gets the command triggered after clicking the button in the template.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Snackbar.Opened">
            <summary>
            Occurs when the snackbar is about to open.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Snackbar.Closed">
            <summary>
            Occurs when the snackbar is about to close.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.#ctor(Wpf.Ui.Controls.SnackbarPresenter)">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Controls.Snackbar"/> class with a specified presenter.
            </summary>
            <param name="presenter">The <see cref="T:Wpf.Ui.Controls.SnackbarPresenter"/> to manage the snackbar's display and interactions.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.Show">
            <summary>
            Shows the <see cref="T:Wpf.Ui.Controls.Snackbar"/>
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.Show(System.Boolean)">
            <summary>
            Shows the <see cref="T:Wpf.Ui.Controls.Snackbar"/>
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.ShowAsync">
            <summary>
            Shows the <see cref="T:Wpf.Ui.Controls.Snackbar"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.ShowAsync(System.Boolean)">
            <summary>
            Shows the <see cref="T:Wpf.Ui.Controls.Snackbar"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.Hide">
            <summary>
            Hides the <see cref="T:Wpf.Ui.Controls.Snackbar"/>
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.OnOpened">
            <summary>
            This virtual method is called when <see cref="T:Wpf.Ui.Controls.Snackbar"/> is opening and it raises the <see cref="E:Wpf.Ui.Controls.Snackbar.Opened"/> <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.OnClosed">
            <summary>
            This virtual method is called when <see cref="T:Wpf.Ui.Controls.Snackbar"/> is closing and it raises the <see cref="E:Wpf.Ui.Controls.Snackbar.Closed"/> <see langword="event"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.SpacingMode">
            <summary>
            Specifies how remaining space is distributed.
            <para>Based on <see href="https://github.com/sbaeumlisberger/VirtualizingWrapPanel"/>.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SpacingMode.None">
            <summary>
            Spacing is disabled and all items will be arranged as closely as possible.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SpacingMode.Uniform">
            <summary>
            The remaining space is evenly distributed between the items on a layout row, as well as the start and end of each row.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SpacingMode.BetweenItemsOnly">
            <summary>
            The remaining space is evenly distributed between the items on a layout row, excluding the start and end of each row.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SpacingMode.StartAndEndOnly">
            <summary>
            The remaining space is evenly distributed between start and end of each row.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.SplitButton">
            <summary>
            Represents a button with two parts that can be invoked separately. One part behaves like a standard button and the other part invokes a flyout.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SplitButton.TemplateElementToggleButton">
            <summary>
            Template element represented by the <c>ToggleButton</c> name.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.SplitButton.SplitButtonToggleButton">
            <summary>
            Gets or sets control responsible for toggling the drop-down button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SplitButton.FlyoutProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.SplitButton.Flyout"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SplitButton.IsDropDownOpenProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.SplitButton.IsDropDownOpen"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.SplitButton.Flyout">
            <summary>
            Gets or sets the flyout associated with this button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.SplitButton.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the drop-down for a button is currently open.
            </summary>
            <returns>
            <see langword="true" /> if the drop-down is open; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.SplitButton.OnFlyoutChanged(System.Object)">
            <summary>This method is invoked when the <see cref="F:Wpf.Ui.Controls.SplitButton.FlyoutProperty"/> changes.</summary>
            <param name="value">The new value of <see cref="F:Wpf.Ui.Controls.SplitButton.FlyoutProperty"/>.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.SplitButton.OnIsDropDownOpenChanged(System.Boolean)">
            <summary>This method is invoked when the <see cref="F:Wpf.Ui.Controls.SplitButton.IsDropDownOpenProperty"/> changes.</summary>
            <param name="currentValue">The new value of <see cref="F:Wpf.Ui.Controls.SplitButton.IsDropDownOpenProperty"/>.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.SplitButton.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.SplitButton.ReleaseTemplateResources">
            <summary>
            Triggered when the control is unloaded. Releases resource bindings.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.SymbolFilled">
            <summary>
            Represents a list of filled Fluent System Icons <c>v.1.1.233</c>.
            <para>May be converted to <see langword="char"/> using <c>GetGlyph()</c> or to <see langword="string"/> using <c>GetString()</c></para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SymbolFilled.Empty">
            <summary>
            Actually, this icon is not empty, but makes it easier to navigate.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.SymbolGlyph">
            <summary>
            Set of static methods to operate on <see cref="T:Wpf.Ui.Controls.SymbolRegular"/> and <see cref="T:Wpf.Ui.Controls.SymbolFilled"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SymbolGlyph.DefaultIcon">
            <summary>
            If the icon is not found in some places, this one will be displayed.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SymbolGlyph.DefaultFilledIcon">
            <summary>
            If the filled icon is not found in some places, this one will be displayed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.SymbolGlyph.Parse(System.String)">
            <summary>
            Finds icon based on name.
            </summary>
            <param name="name">Name of the icon.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.SymbolGlyph.ParseFilled(System.String)">
            <summary>
            Finds icon based on name.
            </summary>
            <param name="name">Name of the icon.</param>
        </member>
        <member name="T:Wpf.Ui.Controls.SymbolRegular">
            <summary>
            Represents a list of regular Fluent System Icons <c>v.1.1.233</c>.
            <para>May be converted to <see langword="char"/> using <c>GetGlyph()</c> or to <see langword="string"/> using <c>GetString()</c></para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SymbolRegular.Empty">
            <summary>
            Actually, this icon is not empty, but makes it easier to navigate.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TabView">
            <summary>
            The TabView control is a way to display a set of tabs and their respective content.
            Tab controls are useful for displaying several pages (or documents) of content while
            giving a user the capability to rearrange, open, or close new tabs.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TabViewItem">
            <summary>
            Represents a single tab within a <see cref="T:Wpf.Ui.Controls.TabView"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TextBlock">
            <summary>
            Extended <see cref="T:System.Windows.Controls.TextBlock"/> with additional parameters like <see cref="P:Wpf.Ui.Controls.TextBlock.FontTypography"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBlock.FontTypographyProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TextBlock.FontTypography"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBlock.AppearanceProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TextBlock.Appearance"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBlock.FontTypography">
            <summary>
            Gets or sets the <see cref="P:Wpf.Ui.Controls.TextBlock.FontTypography"/> of the text.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBlock.Appearance">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TextBox">
            <summary>
            Extended <see cref="T:System.Windows.Controls.TextBox"/> with additional parameters like <see cref="P:Wpf.Ui.Controls.TextBox.PlaceholderText"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.IconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TextBox.Icon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.IconPlacementProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TextBox.IconPlacement"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.PlaceholderTextProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TextBox.PlaceholderText"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.PlaceholderEnabledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TextBox.PlaceholderEnabled"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.CurrentPlaceholderEnabledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TextBox.CurrentPlaceholderEnabled"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.ClearButtonEnabledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TextBox.ClearButtonEnabled"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.ShowClearButtonProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TextBox.ShowClearButton"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.IsTextSelectionEnabledProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TextBox.IsTextSelectionEnabled"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.TemplateButtonCommandProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TextBox.TemplateButtonCommand"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.Icon">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Controls.IconElement"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.IconPlacement">
            <summary>
            Gets or sets which side the icon should be placed on.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.PlaceholderText">
            <summary>
            Gets or sets placeholder text.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.PlaceholderEnabled">
            <summary>
            Gets or sets a value indicating whether to enable the placeholder text.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.CurrentPlaceholderEnabled">
            <summary>
            Gets or sets a value indicating whether to display the placeholder text.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.ClearButtonEnabled">
            <summary>
            Gets or sets a value indicating whether to enable the clear button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.ShowClearButton">
            <summary>
            Gets or sets a value indicating whether to show the clear button when <see cref="T:Wpf.Ui.Controls.TextBox"/> is focused.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.IsTextSelectionEnabled">
            <summary>
            Gets or sets a value indicating whether text selection is enabled.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.TemplateButtonCommand">
            <summary>
            Gets the command triggered when clicking the button.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Controls.TextBox"/> class.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TextBox.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.TextBox.OnGotFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.TextBox.OnLostFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.TextBox.RevealClearButton">
            <summary>
            Reveals the clear button by <see cref="P:Wpf.Ui.Controls.TextBox.ShowClearButton"/> property.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TextBox.HideClearButton">
            <summary>
            Hides the clear button by <see cref="P:Wpf.Ui.Controls.TextBox.ShowClearButton"/> property.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TextBox.OnClearButtonClick">
            <summary>
            Triggered when the user clicks the clear text button.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TextBox.OnTemplateButtonClick(System.String)">
            <summary>
            Triggered by clicking a button in the control template.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TextColor">
            <summary>
            Colors for UI labels and static text
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextColor.Primary">
            <summary>
            Rest or Hover
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextColor.Secondary">
            <summary>
            Rest or Hover
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextColor.Tertiary">
            <summary>
            Pressed only (not accessible)
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextColor.Disabled">
            <summary>
            Disabled only (not accessible)
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ThumbRate">
            <summary>
            Allows to rate positively or negatively by clicking on one of the thumbs.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ThumbRate.StateProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ThumbRate.State"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ThumbRate.StateChangedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.ThumbRate.StateChanged"/> routed event.</summary>
        </member>
        <member name="E:Wpf.Ui.Controls.ThumbRate.StateChanged">
            <summary>
            Occurs when <see cref="P:Wpf.Ui.Controls.ThumbRate.State"/> is changed.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ThumbRate.TemplateButtonCommandProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ThumbRate.TemplateButtonCommand"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ThumbRate.State">
            <summary>
            Gets or sets the value determining the current state of the control.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ThumbRate.TemplateButtonCommand">
            <summary>
            Gets the command triggered when clicking the button.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ThumbRate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Controls.ThumbRate"/> class and attaches <see cref="P:Wpf.Ui.Controls.ThumbRate.TemplateButtonCommand"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ThumbRate.OnTemplateButtonClick(Wpf.Ui.Controls.ThumbRateState)">
            <summary>
            Triggered by clicking a button in the control template.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ThumbRate.OnStateChanged(Wpf.Ui.Controls.ThumbRateState,Wpf.Ui.Controls.ThumbRateState)">
            <summary>
            This virtual method is called when <see cref="P:Wpf.Ui.Controls.ThumbRate.State"/> is changed.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ThumbRateState">
            <summary>
            States of the <see cref="T:Wpf.Ui.Controls.ThumbRate"/> control.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ThumbRateState.None">
            <summary>
            No thumb has been clicked.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ThumbRateState.Liked">
            <summary>
            The thumb up has been clicked.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ThumbRateState.Disliked">
            <summary>
            The thumb down has been clicked.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ClockIdentifier">
            <summary>
            Clock system.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TimePicker">
            <summary>
            Represents a control that allows a user to pick a time value.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TimePicker.HeaderProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TimePicker.Header"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TimePicker.TimeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TimePicker.Time"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TimePicker.SelectedTimeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TimePicker.SelectedTime"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TimePicker.MinuteIncrementProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TimePicker.MinuteIncrement"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TimePicker.ClockIdentifierProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TimePicker.ClockIdentifier"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TimePicker.Header">
            <summary>
            Gets or sets the content for the control's header.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TimePicker.Time">
            <summary>
            Gets or sets the time currently set in the time picker.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TimePicker.SelectedTime">
            <summary>
            Gets or sets the time currently selected in the time picker
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TimePicker.MinuteIncrement">
            <summary>
            Gets or sets a value that indicates the time increments shown in the minute picker.
            For example, 15 specifies that the TimePicker minute control displays only the choices 00, 15, 30, 45.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TimePicker.ClockIdentifier">
            <summary>
            Gets or sets the clock system to use.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TitleBar">
            <summary>
            Custom navigation buttons for the window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.ApplicationThemeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBar.ApplicationTheme"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.TitleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBar.Title"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.HeaderProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBar.Header"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.ButtonsForegroundProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBar.ButtonsForeground"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.ButtonsBackgroundProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBar.ButtonsBackground"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.IsMaximizedProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBar.IsMaximized"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.ForceShutdownProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBar.ForceShutdown"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.ShowMaximizeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBar.ShowMaximize"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.ShowMinimizeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBar.ShowMinimize"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.ShowHelpProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBar.ShowHelp"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.ShowCloseProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBar.ShowClose"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.CanMaximizeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBar.CanMaximize"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.IconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBar.Icon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.CloseWindowByDoubleClickOnIconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBar.CloseWindowByDoubleClickOnIcon"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.CloseClickedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.TitleBar.CloseClicked"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.MaximizeClickedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.TitleBar.MaximizeClicked"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.MinimizeClickedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.TitleBar.MinimizeClicked"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.HelpClickedEvent">
            <summary>Identifies the <see cref="E:Wpf.Ui.Controls.TitleBar.HelpClicked"/> routed event.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.TemplateButtonCommandProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBar.TemplateButtonCommand"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.ApplicationTheme">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.Title">
            <summary>
            Gets or sets title displayed on the left.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.Header">
            <summary>
            Gets or sets the content displayed in the <see cref="T:Wpf.Ui.Controls.TitleBar"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.ButtonsForeground">
            <summary>
            Gets or sets the foreground of the navigation buttons.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.ButtonsBackground">
            <summary>
            Gets or sets the background of the navigation buttons when hovered.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.IsMaximized">
            <summary>
            Gets a value indicating whether the current window is maximized.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.ForceShutdown">
            <summary>
            Gets or sets a value indicating whether the controls affect main application window.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.ShowMaximize">
            <summary>
            Gets or sets a value indicating whether to show the maximize button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.ShowMinimize">
            <summary>
            Gets or sets a value indicating whether to show the minimize button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.ShowHelp">
            <summary>
            Gets or sets a value indicating whether to show the help button
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.ShowClose">
            <summary>
            Gets or sets a value indicating whether to show the close button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.CanMaximize">
            <summary>
            Gets or sets a value indicating whether the maximize functionality is enabled. If disabled the MaximizeActionOverride action won't be called
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.Icon">
            <summary>
            Gets or sets the titlebar icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.CloseWindowByDoubleClickOnIcon">
            <summary>
            Gets or sets a value indicating whether the window can be closed by double clicking on the icon
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.TitleBar.CloseClicked">
            <summary>
            Event triggered after clicking close button.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.TitleBar.MaximizeClicked">
            <summary>
            Event triggered after clicking maximize or restore button.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.TitleBar.MinimizeClicked">
            <summary>
            Event triggered after clicking minimize button.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.TitleBar.HelpClicked">
            <summary>
            Event triggered after clicking help button
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.TemplateButtonCommand">
            <summary>
            Gets the command triggered when clicking the titlebar button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.MaximizeActionOverride">
            <summary>
            Gets or sets the <see cref="T:System.Action"/> that should be executed when the Maximize button is clicked."/>
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.MinimizeActionOverride">
            <summary>
            Gets or sets what <see cref="T:System.Action"/> should be executed when the Minimize button is clicked.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TitleBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Controls.TitleBar"/> class and sets the default <see cref="E:System.Windows.FrameworkElement.Loaded"/> event.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TitleBar.OnInitialized(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.TitleBar.OnApplyTemplate">
            <summary>
            Invoked whenever application code or an internal process,
            such as a rebuilding layout pass, calls the ApplyTemplate method.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TitleBar.OnThemeChanged(Wpf.Ui.Appearance.ApplicationTheme,System.Windows.Media.Color)">
            <summary>
            This virtual method is triggered when the app's theme changes.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TitleBar.OnWindowContentRendered(System.Object,System.EventArgs)">
            <summary>
                Listening window hooks after rendering window content to SizeToContent support
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TitleBar.TitleBar_MouseRightButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Show 'SystemMenu' on mouse right button up.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBarButton.ButtonTypeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBarButton.ButtonType"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBarButton.ButtonsForegroundProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBarButton.ButtonsForeground"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBarButton.MouseOverButtonsForegroundProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBarButton.MouseOverButtonsForeground"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBarButton.RenderButtonsForegroundProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TitleBarButton.RenderButtonsForeground"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBarButton.ButtonType">
            <summary>
            Gets or sets the type of the button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBarButton.ButtonsForeground">
            <summary>
            Gets or sets the foreground of the navigation buttons.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBarButton.MouseOverButtonsForeground">
            <summary>
            Gets or sets the foreground of the navigation buttons when moused over.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TitleBarButton.Hover">
            <summary>
            Forces button background to change.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TitleBarButton.RemoveHover">
            <summary>
            Forces button background to change.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TitleBarButton.InvokeClick">
            <summary>
            Invokes click on the button.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TitleBarButtonType">
            <summary>
            Type of the Title Bar button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBarButtonType.Unknown">
            <summary>
            Unknown button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBarButtonType.Minimize">
            <summary>
            Maximize button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBarButtonType.Close">
            <summary>
            Close button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBarButtonType.Maximize">
            <summary>
            Maximize button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBarButtonType.Restore">
            <summary>
            Restore button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBarButtonType.Help">
            <summary>
            Help button.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ToggleSwitch">
            <summary>
            Use <see cref="T:Wpf.Ui.Controls.ToggleSwitch"/> to present users with two mutally exclusive options (like on/off).
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ToggleSwitch.OffContentProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ToggleSwitch.OffContent"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ToggleSwitch.OnContentProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.ToggleSwitch.OnContent"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ToggleSwitch.OffContent">
            <summary>
            Gets or sets the content that should be displayed when the <see cref="T:Wpf.Ui.Controls.ToggleSwitch"/> is in the "Off" state.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ToggleSwitch.OnContent">
            <summary>
            Gets or sets the content that should be displayed when the <see cref="T:Wpf.Ui.Controls.ToggleSwitch"/> is in the "On" state.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TreeGrid">
            <summary>
            TODO: Work in progress.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TreeGrid.HeadersProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TreeGrid.Headers"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TreeGrid.Headers">
            <summary>
            Gets or sets the data used to generate the child elements of this control.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TreeGridHeader">
            <summary>
            Work in progress.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TreeGridHeader.TitleProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TreeGridHeader.Title"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TreeGridHeader.GroupProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TreeGridHeader.Group"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TreeGridHeader.Title">
            <summary>
            Gets or sets the title that will be displayed.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TreeGridHeader.Group">
            <summary>
            Gets or sets the column group name.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TreeGridHeader.OnTitleChanged">
            <summary>
            This virtual method is called when <see cref="P:Wpf.Ui.Controls.TreeGridHeader.Title"/> is changed.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TreeGridItem">
            <summary>
            Work in progress.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TreeViewItem">
            <summary>
            Extended <see cref="T:System.Windows.Controls.TreeViewItem"/> with <see cref="T:Wpf.Ui.Controls.SymbolRegular"/> properties.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TreeViewItem.IconProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.TreeViewItem.Icon"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TreeViewItem.Icon">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Controls.IconElement"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TypedEventHandler`2">
            <summary>
            Represents a method that handles general events.
            </summary>
            <typeparam name="TSender">The type of the sender.</typeparam>
            <typeparam name="TArgs">The type of the event data.</typeparam>
            <param name="sender">The source of the event.</param>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="T:Wpf.Ui.Controls.VirtualizingGridView">
            <summary>
            Simple control that displays a gird of items. Depending on the orientation, the items are either stacked horizontally or vertically
            until the items are wrapped to the next row or column. The control is using virtualization to support large amount of items.
            <para>In order to work properly all items must have the same size.</para>
            <para>Based on <see href="https://github.com/sbaeumlisberger/VirtualizingWrapPanel"/>.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingGridView.OrientationProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.VirtualizingGridView.Orientation"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingGridView.SpacingModeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.VirtualizingGridView.SpacingMode"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingGridView.StretchItemsProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.VirtualizingGridView.StretchItems"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingGridView.Orientation">
            <summary>
            Gets or sets a value that specifies the orientation in which items are arranged. The default value is <see cref="F:System.Windows.Controls.Orientation.Vertical"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingGridView.SpacingMode">
            <summary>
            Gets or sets the spacing mode used when arranging the items. The default value is <see cref="F:Wpf.Ui.Controls.SpacingMode.Uniform"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingGridView.StretchItems">
            <summary>
            Gets or sets a value indicating whether the items get stretched to fill up remaining space. The default value is false.
            </summary>
            <remarks>
            The MaxWidth and MaxHeight properties of the ItemContainerStyle can be used to limit the stretching.
            In this case the use of the remaining space will be determined by the SpacingMode property.
            </remarks>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingGridView.InitializeItemsPanel">
            <summary>
            Initializes the <see cref="P:System.Windows.Controls.ItemsControl.ItemsPanel"/> with <see cref="T:Wpf.Ui.Controls.VirtualizingWrapPanel"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.VirtualizingItemsControl">
            <summary>
            Virtualized <see cref="T:System.Windows.Controls.ItemsControl"/>.
            <para>Based on <see href="https://github.com/sbaeumlisberger/VirtualizingWrapPanel"/>.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingItemsControl.CacheLengthUnitProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.VirtualizingItemsControl.CacheLengthUnit"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingItemsControl.CacheLengthUnit">
            <summary>
            Gets or sets the cache length unit.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Controls.VirtualizingItemsControl"/> class.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.VirtualizingUniformGrid">
            <summary>
            <para><c>Work in progress.</c></para>
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.VirtualizingPanelBase">
            <summary>
            Base abstract class for creating virtualized panels.
            <para>Based on <see href="https://github.com/sbaeumlisberger/VirtualizingWrapPanel"/>.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingPanelBase._itemsOwner">
            <summary>
            Owner of the displayed items.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingPanelBase._itemContainerGenerator">
            <summary>
            Items generator.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingPanelBase._previousVerticalScrollBarVisibility">
            <summary>
            Previously set visibility of the vertical scroll bar.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingPanelBase._previousHorizontalScrollBarVisibility">
            <summary>
            Previously set visibility of the horizontal scroll bar.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.CanHierarchicallyScrollAndVirtualizeCore">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollUnit">
            <summary>
            Gets the scroll unit.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelScrollDirection">
            <summary>
            Gets or sets the direction in which the panel scrolls when user turns the mouse wheel.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.IsVirtualizing">
            <summary>
            Gets a value indicating whether the virtualizing is enabled.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.VirtualizationMode">
            <summary>
            Gets the virtualization mode.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.IsRecycling">
            <summary>
            Gets a value indicating whether the panel is in VirtualizationMode.Recycling.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.CacheLength">
            <summary>
            Gets the cache length before and after the viewport.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.CacheLengthUnit">
            <summary>
            Gets the Unit of the cache length. Can be Pixel, Item or Page.
            When the ItemsOwner is a group item it can only be pixel or item.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ItemsControl">
            <summary>
            Gets the ItemsControl (e.g. ListView).
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ItemsOwner">
            <summary>
            Gets the ItemsControl (e.g. ListView) or if the ItemsControl is grouping a GroupItem.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.Items">
            <summary>
            Gets items collection.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.Offset">
            <summary>
            Gets the offset.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ItemContainerGenerator">
            <summary>
            Gets items container.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ItemRange">
            <summary>
            Gets or sets the range of items that a realized in <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.Viewport"/> or cache.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.Extent">
            <summary>
            Gets the <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.Extent"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.Viewport">
            <summary>
            Gets the viewport.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollLineDeltaProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollLineDelta"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelDeltaProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelDelta"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollLineDeltaItemProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollLineDeltaItem"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelDeltaItemProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelDeltaItem"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollOwner">
            <summary>
            Gets or sets the scroll owner.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.CanVerticallyScroll">
            <summary>
            Gets or sets a value indicating whether the content can be vertically scrolled.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.CanHorizontallyScroll">
            <summary>
            Gets or sets a value indicating whether the content can be horizontally scrolled.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollLineDelta">
            <summary>
            Gets or sets the scroll line delta for pixel based scrolling. The default value is 16 dp.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelDelta">
            <summary>
            Gets or sets the mouse wheel delta for pixel based scrolling. The default value is 48 dp.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollLineDeltaItem">
            <summary>
            Gets or sets the scroll line delta for item based scrolling. The default value is 1 item.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelDeltaItem">
            <summary>
            Gets or sets the mouse wheel delta for item based scrolling. The default value is 3 items.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ExtentWidth">
            <summary>
            Gets width of the <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.Extent"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ExtentHeight">
            <summary>
            Gets height of the <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.Extent"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.HorizontalOffset">
            <summary>
            Gets the horizontal offset.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.VerticalOffset">
            <summary>
            Gets the vertical offset.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ViewportWidth">
            <summary>
            Gets the <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.Viewport"/> width.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ViewportHeight">
            <summary>
            Gets the <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.Viewport"/> height.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.SetVerticalOffset(System.Double)">
            <summary>
            Sets the vertical offset.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.SetHorizontalOffset(System.Double)">
            <summary>
            Sets the horizontal offset.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.LineUp">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.LineDown">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.LineLeft">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.LineRight">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelUp">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelDown">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelLeft">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelRight">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.PageUp">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.PageDown">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.PageLeft">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.PageRight">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.UpdateScrollInfo(System.Windows.Size,System.Windows.Size)">
            <summary>
            Updates scroll offset, extent and viewport.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetItemIndexFromChildIndex(System.Int32)">
            <summary>
            Gets item index from the generator.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetGeneratorPositionFromChildIndex(System.Int32)">
            <summary>
            Gets the position of children from the generator.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.RealizeItems">
            <summary>
            Realizes visible and cached items.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.VirtualizeItems">
            <summary>
            Virtualizes (cleanups) no longer visible or cached items.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollVertical(System.Double)">
            <summary>
            Sets vertical scroll offset by given amount.
            </summary>
            <param name="amount">The value by which the offset is to be increased.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollHorizontal(System.Double)">
            <summary>
            Sets horizontal scroll offset by given amount.
            </summary>
            <param name="amount">The value by which the offset is to be increased.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.CalculateExtent(System.Windows.Size)">
            <summary>
            Calculates the extent that would be needed to show all items.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.UpdateItemRange">
            <summary>
            Calculates the item range that is visible in the viewport or cached.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetLineUpScrollAmount">
            <summary>
            Gets line up scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetLineDownScrollAmount">
            <summary>
            Gets line down scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetLineLeftScrollAmount">
            <summary>
            Gets line left scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetLineRightScrollAmount">
            <summary>
            Gets line right scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetMouseWheelUpScrollAmount">
            <summary>
            Gets mouse wheel up scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetMouseWheelDownScrollAmount">
            <summary>
            Gets mouse wheel down scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetMouseWheelLeftScrollAmount">
            <summary>
            Gets mouse wheel left scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetMouseWheelRightScrollAmount">
            <summary>
            Gets mouse wheel right scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetPageUpScrollAmount">
            <summary>
            Gets page up scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetPageDownScrollAmount">
            <summary>
            Gets page down scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetPageLeftScrollAmount">
            <summary>
            Gets page left scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetPageRightScrollAmount">
            <summary>
            Gets page right scroll amount.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.VirtualizingWrapPanel">
            <summary>
            Extended base class for <see cref="T:System.Windows.Controls.VirtualizingPanel"/>.
            <para>Based on <see href="https://github.com/sbaeumlisberger/VirtualizingWrapPanel"/>.</para>
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingWrapPanel.ChildSize">
            <summary>
            Gets or sets the size of the single child element.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingWrapPanel.RowCount">
            <summary>
            Gets or sets the amount of the displayed rows.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingWrapPanel.ItemsPerRowCount">
            <summary>
            Gets or sets the amount of displayed items per row.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingWrapPanel.SpacingModeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.VirtualizingWrapPanel.SpacingMode"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingWrapPanel.OrientationProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.VirtualizingWrapPanel.Orientation"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingWrapPanel.ItemSizeProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.VirtualizingWrapPanel.ItemSize"/> dependency property.</summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingWrapPanel.StretchItemsProperty">
            <summary>Identifies the <see cref="P:Wpf.Ui.Controls.VirtualizingWrapPanel.StretchItems"/> dependency property.</summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingWrapPanel.SpacingMode">
            <summary>
            Gets or sets the spacing mode used when arranging the items. The default value is <see cref="F:Wpf.Ui.Controls.SpacingMode.Uniform"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingWrapPanel.Orientation">
            <summary>
            Gets or sets a value that specifies the orientation in which items are arranged. The default value is <see cref="F:System.Windows.Controls.Orientation.Vertical"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingWrapPanel.ItemSize">
            <summary>
            Gets or sets a value that specifies the size of the items. The default value is <see cref="P:System.Windows.Size.Empty"/>.
            If the value is <see cref="P:System.Windows.Size.Empty"/> the size of the items gots measured by the first realized item.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingWrapPanel.StretchItems">
            <summary>
            Gets or sets a value indicating whether the items get stretched to fill up remaining space. The default value is false.
            </summary>
            <remarks>
            The MaxWidth and MaxHeight properties of the ItemContainerStyle can be used to limit the stretching.
            In this case the use of the remaining space will be determined by the SpacingMode property.
            </remarks>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.OnOrientationChanged">
            <summary>
            This virtual method is called when <see cref="P:Wpf.Ui.Controls.VirtualizingWrapPanel.Orientation"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.OnOrientationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Private callback for <see cref="F:Wpf.Ui.Controls.VirtualizingWrapPanel.OrientationProperty"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.UpdateChildSize(System.Windows.Size)">
            <summary>
            Updates child size of <see cref="P:Wpf.Ui.Controls.VirtualizingWrapPanel.ItemSize"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.CalculateChildSize(System.Windows.Size)">
            <summary>
            Calculates child size.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.CalculateExtent(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.CalculateSpacing(System.Windows.Size,System.Double@,System.Double@)">
            <summary>
            Calculates desired spacing between items.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.CalculateChildArrangeSize(System.Windows.Size)">
            <summary>
            Calculates desired child arrange size.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.ReadItemContainerStyle``1(System.Windows.DependencyProperty,``0)">
            <summary>
            Gets the style property value for item containers within the <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </summary>
            <typeparam name="T">The expected type of the property value.</typeparam>
            <param name="property">The <see cref="T:System.Windows.DependencyProperty"/> to retrieve the value for.</param>
            <param name="fallbackValue">The value to return if the property is not set.</param>
            <returns>The value of the specified property if found; otherwise, the <paramref name="fallbackValue"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.UpdateItemRange">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetRowIndex(System.Double)">
            <summary>
            Gets item row index.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.BringIndexIntoView(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetLineUpScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetLineDownScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetLineLeftScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetLineRightScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetMouseWheelUpScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetMouseWheelDownScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetMouseWheelLeftScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetMouseWheelRightScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetPageUpScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetPageDownScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetPageLeftScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetPageRightScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetX(System.Windows.Point)">
            <summary>
            Gets X panel orientation.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetY(System.Windows.Point)">
            <summary>
            Gets Y panel orientation.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetWidth(System.Windows.Size)">
            <summary>
            Gets panel width.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetHeight(System.Windows.Size)">
            <summary>
            Gets panel height.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.CreateSize(System.Double,System.Double)">
            <summary>
            Defines panel size.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.CreateRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Defines panel coordinates and size.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.WindowBackdrop">
            <summary>
            Applies the chosen backdrop effect to the selected window.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.WindowBackdrop.IsSupported(Wpf.Ui.Controls.WindowBackdropType)">
            <summary>
            Checks whether the selected backdrop type is supported on current platform.
            </summary>
            <returns><see langword="true"/> if the selected backdrop type is supported on current platform.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.WindowBackdrop.ApplyBackdrop(System.Windows.Window,Wpf.Ui.Controls.WindowBackdropType)">
            <summary>
            Applies a backdrop effect to the selected <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window to which the backdrop effect will be applied.</param>
            <param name="backdropType">The type of backdrop effect to apply. Determines the visual appearance of the window's backdrop.</param>
            <returns><see langword="true"/> if the operation was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.WindowBackdrop.ApplyBackdrop(System.IntPtr,Wpf.Ui.Controls.WindowBackdropType)">
            <summary>
            Applies backdrop effect to the selected window handle based on the specified backdrop type.
            </summary>
            <param name="hWnd">The window handle to which the backdrop effect will be applied.</param>
            <param name="backdropType">The type of backdrop effect to apply. This determines the visual appearance of the window's backdrop.</param>
            <returns><see langword="true"/> if the operation was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.WindowBackdrop.RemoveBackdrop(System.Windows.Window)">
            <summary>
            Tries to remove backdrop effects if they have been applied to the <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window from which the effect should be removed.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.WindowBackdrop.RemoveBackdrop(System.IntPtr)">
            <summary>
            Tries to remove all effects if they have been applied to the <c>hWnd</c>.
            </summary>
            <param name="hWnd">Pointer to the window handle.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.WindowBackdrop.RemoveBackground(System.Windows.Window)">
            <summary>
            Tries to remove background from <see cref="T:System.Windows.Window"/> and it's composition area.
            </summary>
            <param name="window">Window to manipulate.</param>
            <returns><see langword="true"/> if operation was successful.</returns>
        </member>
        <member name="F:Wpf.Ui.Controls.WindowBackdropType.None">
            <summary>
            No backdrop effect.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.WindowBackdropType.Auto">
            <summary>
            Sets <c>DWMWA_SYSTEMBACKDROP_TYPE</c> to <see langword="0"></see>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.WindowBackdropType.Mica">
            <summary>
            Windows 11 Mica effect.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.WindowBackdropType.Acrylic">
            <summary>
            Windows Acrylic effect.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.WindowBackdropType.Tabbed">
            <summary>
            Windows 11 wallpaper blur effect.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.WindowCornerPreference">
            <summary>
            Ways you can round windows.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.WindowCornerPreference.Default">
            <summary>
            Determined by system or application preference.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.WindowCornerPreference.DoNotRound">
            <summary>
            Do not round the corners.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.WindowCornerPreference.Round">
            <summary>
            Round the corners.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.WindowCornerPreference.RoundSmall">
            <summary>
            Round the corners slightly.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Converters.IconSourceElementConverter">
            <summary>
            Converts an <see cref="T:Wpf.Ui.Controls.IconSourceElement"/> to an <see cref="T:Wpf.Ui.Controls.IconElement"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Converters.IconSourceElementConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to an <see cref="T:Wpf.Ui.Controls.IconElement"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>The converted <see cref="T:Wpf.Ui.Controls.IconElement"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Converters.IconSourceElementConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts an <see cref="T:Wpf.Ui.Controls.IconElement"/> back to an IconSourceElement.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>The converted IconSourceElement.</returns>
        </member>
        <member name="T:Wpf.Ui.Designer.DesignerHelper">
            <summary>
            Helper class for Visual Studio designer.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Designer.DesignerHelper.IsInDesignMode">
            <summary>
            Gets a value indicating whether the project is currently in design mode.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Designer.DesignerHelper.IsDebugging">
            <summary>
            Gets a value indicating whether the project is currently debugged.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Extensions.ColorExtensions">
            <summary>
            Adds an extension for <see cref="T:System.Windows.Media.Color"/> that allows manipulation with HSL and HSV color spaces.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Extensions.ColorExtensions._byteMax">
            <summary>
            Maximum <see cref="T:System.Byte"/> size with the current <see cref="T:System.Single"/> precision.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.ToBrush(System.Windows.Media.Color)">
            <summary>
            Creates a <see cref="T:System.Windows.Media.SolidColorBrush"/> from a <see cref="T:System.Windows.Media.Color"/>.
            </summary>
            <param name="color">Input color.</param>
            <returns>Brush converted to color.</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.ToBrush(System.Windows.Media.Color,System.Double)">
            <summary>
            Creates a <see cref="T:System.Windows.Media.SolidColorBrush"/> from a <see cref="T:System.Windows.Media.Color"/> with defined brush opacity.
            </summary>
            <param name="color">Input color.</param>
            <param name="opacity">Degree of opacity.</param>
            <returns>Brush converted to color with modified opacity.</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.GetLuminance(System.Windows.Media.Color)">
            <summary>
            Gets <see cref="T:System.Windows.Media.Color"/> luminance based on HSL space.
            </summary>
            <param name="color">Input color.</param>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.GetBrightness(System.Windows.Media.Color)">
            <summary>
            Gets <see cref="T:System.Windows.Media.Color"/> brightness based on HSV space.
            </summary>
            <param name="color">Input color.</param>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.GetHue(System.Windows.Media.Color)">
            <summary>
            Gets <see cref="T:System.Windows.Media.Color"/> hue based on HSV space.
            </summary>
            <param name="color">Input color.</param>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.GetSaturation(System.Windows.Media.Color)">
            <summary>
            Gets <see cref="T:System.Windows.Media.Color"/> saturation based on HSV space.
            </summary>
            <param name="color">Input color.</param>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.UpdateLuminance(System.Windows.Media.Color,System.Single)">
            <summary>
            Allows to change the luminance by a factor based on the HSL color space.
            </summary>
            <param name="color">Input color.</param>
            <param name="factor">The value of the luminance change factor from <see langword="100"/> to <see langword="-100"/>.</param>
            <returns>Updated <see cref="T:System.Windows.Media.Color"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.UpdateSaturation(System.Windows.Media.Color,System.Single)">
            <summary>
            Allows to change the saturation by a factor based on the HSL color space.
            </summary>
            <param name="color">Input color.</param>
            <param name="factor">The value of the saturation change factor from <see langword="100"/> to <see langword="-100"/>.</param>
            <returns>Updated <see cref="T:System.Windows.Media.Color"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.UpdateBrightness(System.Windows.Media.Color,System.Single)">
            <summary>
            Allows to change the brightness by a factor based on the HSV color space.
            </summary>
            <param name="color">Input color.</param>
            <param name="factor">The value of the brightness change factor from <see langword="100"/> to <see langword="-100"/>.</param>
            <returns>Updated <see cref="T:System.Windows.Media.Color"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.Update(System.Windows.Media.Color,System.Single,System.Single,System.Single)">
            <summary>
            Allows to change the brightness, saturation and luminance by a factors based on the HSL and HSV color space.
            </summary>
            <param name="color">Color to convert.</param>
            <param name="brightnessFactor">The value of the brightness change factor from <see langword="100"/> to <see langword="-100"/>.</param>
            <param name="saturationFactor">The value of the saturation change factor from <see langword="100"/> to <see langword="-100"/>.</param>
            <param name="luminanceFactor">The value of the luminance change factor from <see langword="100"/> to <see langword="-100"/>.</param>
            <returns>Updated <see cref="T:System.Windows.Media.Color"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.ToHsl(System.Windows.Media.Color)">
            <summary>
            HSL representation models the way different paints mix together to create colour in the real world,
            with the lightness dimension resembling the varying amounts of black or white paint in the mixture.
            </summary>
            <returns><see langword="float"/> hue, <see langword="float"/> saturation, <see langword="float"/> lightness</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.ToHsv(System.Windows.Media.Color)">
            <summary>
            HSV representation models how colors appear under light.
            </summary>
            <returns><see langword="float"/> hue, <see langword="float"/> saturation, <see langword="float"/> brightness</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.FromHslToRgb(System.Single,System.Single,System.Single)">
            <summary>
            Converts the color values stored as HSL to RGB.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.FromHsvToRgb(System.Single,System.Single,System.Single)">
            <summary>
            Converts the color values stored as HSV (HSB) to RGB.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.CalcHslChannel(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the color component for HSL.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.AlmostEquals(System.Single,System.Single,System.Single)">
            <summary>
            Whether the floating point number is about the same.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.ToPercentage(System.Single)">
            <summary>
            Absolute percentage.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.ToColorByte(System.Int32)">
            <summary>
            Absolute byte.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.ContentDialogServiceExtensions.ShowAlertAsync(Wpf.Ui.IContentDialogService,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Shows the simple alert-like dialog.
            </summary>
            <returns>Result of the life cycle of the <see cref="T:Wpf.Ui.Controls.ContentDialog"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ContentDialogServiceExtensions.ShowSimpleDialogAsync(Wpf.Ui.IContentDialogService,Wpf.Ui.SimpleContentDialogCreateOptions,System.Threading.CancellationToken)">
            <summary>
            Shows simple dialog
            </summary>
            <param name="dialogService">The <see cref="T:Wpf.Ui.IContentDialogService"/>.</param>
            <param name="options">Set of parameters of the basic dialog box.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Result of the life cycle of the <see cref="T:Wpf.Ui.Controls.ContentDialog"/>.</returns>
        </member>
        <member name="T:Wpf.Ui.Extensions.ContextMenuExtensions">
            <summary>
            Extensions for the <see cref="T:System.Windows.Controls.ContextMenu"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.ContextMenuExtensions.ApplyMica(System.Windows.Controls.ContextMenu)">
            <summary>
            Tries to apply Mica effect to the <see cref="T:System.Windows.Controls.ContextMenu"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Extensions.DateTimeExtensions">
            <summary>
            A collection of several extensions to the <see cref="T:System.DateTime"/> class.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.DateTimeExtensions.GetTimestamp(System.DateTime)">
            <summary>
            Gets the number of seconds that have elapsed since the Unix epoch, excluding leap seconds. The Unix epoch is 00:00:00 UTC on 1 January 1970.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.DateTimeExtensions.GetMillisTimestamp(System.DateTime)">
            <summary>
            Gets the number of milliseconds that have elapsed since the Unix epoch, excluding leap seconds. The Unix epoch is 00:00:00 UTC on 1 January 1970.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.DateTimeExtensions.GetMicroTimestamp(System.DateTime)">
            <summary>
            Gets the number of microseconds that have elapsed since the Unix epoch, excluding leap seconds. The Unix epoch is 00:00:00 UTC on 1 January 1970.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Extensions.FrameExtensions">
            <summary>
            Set of extensions for <see cref="T:System.Windows.Controls.Frame"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.FrameExtensions.GetDataContext(System.Windows.Controls.Frame)">
            <summary>
            Gets <see cref="P:System.Windows.FrameworkElement.DataContext"/> from <see cref="T:System.Windows.Controls.Frame"/>.
            </summary>
            <param name="frame">Selected frame.</param>
            <returns>DataContext of currently active element, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.FrameExtensions.CleanNavigation(System.Windows.Controls.Frame)">
            <summary>
            Cleans <see cref="T:System.Windows.Controls.Frame"/> journal.
            </summary>
            <param name="frame">Selected frame.</param>
        </member>
        <member name="T:Wpf.Ui.Extensions.NavigationServiceExtensions">
            <summary>
            Extensions for the <see cref="T:Wpf.Ui.INavigationService"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.NavigationServiceExtensions.SetPaneDisplayMode(Wpf.Ui.INavigationService,Wpf.Ui.Controls.NavigationViewPaneDisplayMode)">
            <summary>
            Sets the pane display mode of the navigation service.
            </summary>
            <param name="navigationService">The navigation service.</param>
            <param name="paneDisplayMode">The pane display mode.</param>
            <returns>Same <see cref="T:Wpf.Ui.INavigationService"/> so multiple calls can be chained.</returns>
        </member>
        <member name="T:Wpf.Ui.Extensions.SnackbarServiceExtensions">
            <summary>
            Extensions for the <see cref="T:Wpf.Ui.ISnackbarService"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.SnackbarServiceExtensions.Show(Wpf.Ui.ISnackbarService,System.String,System.String)">
            <summary>
            Shows the snackbar. If it is already visible, firstly hides it for a moment, changes its content, and then shows it again.
            </summary>
            <param name="snackbarService">The <see cref="T:Wpf.Ui.ISnackbarService"/>.</param>
            <param name="title">Name displayed on top of snackbar.</param>
            <param name="message">Message inside the snackbar.</param>
        </member>
        <member name="M:Wpf.Ui.Extensions.SnackbarServiceExtensions.Show(Wpf.Ui.ISnackbarService,System.String,System.String,Wpf.Ui.Controls.ControlAppearance)">
            <summary>
            Shows the snackbar. If it is already visible, firstly hides it for a moment, changes its content, and then shows it again.
            </summary>
            <param name="snackbarService">The <see cref="T:Wpf.Ui.ISnackbarService"/>.</param>
            <param name="title">Name displayed on top of snackbar.</param>
            <param name="message">Message inside the snackbar.</param>
            <param name="appearance">Display style.</param>
        </member>
        <member name="M:Wpf.Ui.Extensions.SnackbarServiceExtensions.Show(Wpf.Ui.ISnackbarService,System.String,System.String,Wpf.Ui.Controls.IconElement)">
            <summary>
            Shows the snackbar. If it is already visible, firstly hides it for a moment, changes its content, and then shows it again.
            </summary>
            <param name="snackbarService">The <see cref="T:Wpf.Ui.ISnackbarService"/>.</param>
            <param name="title">Name displayed on top of snackbar.</param>
            <param name="message">Message inside the snackbar.</param>
            <param name="icon">Additional icon on the left.</param>
        </member>
        <member name="M:Wpf.Ui.Extensions.SnackbarServiceExtensions.Show(Wpf.Ui.ISnackbarService,System.String,System.String,System.TimeSpan)">
            <summary>
            Shows the snackbar. If it is already visible, firstly hides it for a moment, changes its content, and then shows it again.
            </summary>
            <param name="snackbarService">The <see cref="T:Wpf.Ui.ISnackbarService"/>.</param>
            <param name="title">Name displayed on top of snackbar.</param>
            <param name="message">Message inside the snackbar.</param>
            <param name="timeout">The time after which the snackbar should disappear.</param>
        </member>
        <member name="M:Wpf.Ui.Extensions.SnackbarServiceExtensions.Show(Wpf.Ui.ISnackbarService,System.String,System.String,Wpf.Ui.Controls.ControlAppearance,System.TimeSpan)">
            <summary>
            Shows the snackbar. If it is already visible, firstly hides it for a moment, changes its content, and then shows it again.
            </summary>
            <param name="snackbarService">The <see cref="T:Wpf.Ui.ISnackbarService"/>.</param>
            <param name="title">Name displayed on top of snackbar.</param>
            <param name="message">Message inside the snackbar.</param>
            <param name="appearance">Display style.</param>
            <param name="timeout">The time after which the snackbar should disappear.</param>
        </member>
        <member name="M:Wpf.Ui.Extensions.SnackbarServiceExtensions.Show(Wpf.Ui.ISnackbarService,System.String,System.String,Wpf.Ui.Controls.IconElement,System.TimeSpan)">
            <summary>
            Shows the snackbar. If it is already visible, firstly hides it for a moment, changes its content, and then shows it again.
            </summary>
            <param name="snackbarService">The <see cref="T:Wpf.Ui.ISnackbarService"/>.</param>
            <param name="title">Name displayed on top of snackbar.</param>
            <param name="message">Message inside the snackbar.</param>
            <param name="icon">Additional icon on the left.</param>
            <param name="timeout">The time after which the snackbar should disappear.</param>
        </member>
        <member name="T:Wpf.Ui.Extensions.SymbolExtensions">
            <summary>
            Set of extensions for the enumeration of icons to facilitate their management and replacement.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.SymbolExtensions.Swap(Wpf.Ui.Controls.SymbolRegular)">
            <summary>
            Replaces <see cref="T:Wpf.Ui.Controls.SymbolRegular"/> with <see cref="T:Wpf.Ui.Controls.SymbolFilled"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.SymbolExtensions.Swap(Wpf.Ui.Controls.SymbolFilled)">
            <summary>
            Replaces <see cref="T:Wpf.Ui.Controls.SymbolFilled"/> with <see cref="T:Wpf.Ui.Controls.SymbolRegular"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.SymbolExtensions.GetString(Wpf.Ui.Controls.SymbolRegular)">
            <summary>
            Converts <see cref="T:Wpf.Ui.Controls.SymbolRegular"/> to <see langword="string"/> based on the ID.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.SymbolExtensions.GetString(Wpf.Ui.Controls.SymbolFilled)">
            <summary>
            Converts <see cref="T:Wpf.Ui.Controls.SymbolFilled"/> to <see langword="string"/> based on the ID.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Extensions.TextBlockFontTypographyExtensions">
            <summary>
            Extension that converts the typography type enumeration to the name of the resource that represents it.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.TextBlockFontTypographyExtensions.ToResourceValue(Wpf.Ui.Controls.FontTypography)">
            <summary>
             Converts the typography type enumeration to the name of the resource that represents it.
            </summary>
            <returns>Name of the resource matching the <see cref="T:Wpf.Ui.Controls.FontTypography"/>. <see cref="T:System.ArgumentOutOfRangeException"/> otherwise.</returns>
        </member>
        <member name="T:Wpf.Ui.Extensions.TextColorExtensions">
            <summary>
            Extension that converts the text color type enumeration to the name of the resource that represents it.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.TextColorExtensions.ToResourceValue(Wpf.Ui.Controls.TextColor)">
            <summary>
            Converts the text color type enumeration to the name of the resource that represents it.
            </summary>
            <returns>Name of the resource matching the <see cref="T:Wpf.Ui.Controls.TextColor"/>. <see cref="T:System.ArgumentOutOfRangeException"/> otherwise.</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.UiElementExtensions.IsMouseOverElement(System.Windows.UIElement,System.IntPtr)">
            <summary>
            Do not call it outside of NCHITTEST, NCLBUTTONUP, NCLBUTTONDOWN messages!
            </summary>
            <returns><see langword="true"/> if mouse is over the element. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Wpf.Ui.Extensions.UriExtensions">
            <summary>
            Extensions for <see cref="T:System.Uri"/> class.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.UriExtensions.TrimLastSegment(System.Uri)">
            <summary>
            Removes last segment of the <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.UriExtensions.EndsWith(System.Uri,System.String)">
            <summary>
            Determines whether the end of <see cref="T:System.Uri"/> is equal to provided value.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.UriExtensions.Append(System.Uri,System.String[])">
            <summary>
            Append provided segments to the <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.UriExtensions.Append(System.Uri,System.Uri)">
            <summary>
            Append new <see cref="T:System.Uri"/> to the <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Hardware.DisplayDpi">
            <summary>
            Stores DPI information from which a <see cref="T:System.Windows.Media.Visual"/> or <see cref="T:System.Windows.UIElement"/>
            is rendered.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Hardware.DisplayDpi.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Hardware.DisplayDpi"/> structure.
            </summary>
            <param name="dpiScaleX">The DPI scale on the X axis.</param>
            <param name="dpiScaleY">The DPI scale on the Y axis.</param>
        </member>
        <member name="M:Wpf.Ui.Hardware.DisplayDpi.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Hardware.DisplayDpi"/> structure.
            </summary>
            <param name="dpiX">The DPI on the X axis.</param>
            <param name="dpiY">The DPI on the Y axis.</param>
        </member>
        <member name="P:Wpf.Ui.Hardware.DisplayDpi.DpiX">
            <summary>
            Gets the DPI on the X axis.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Hardware.DisplayDpi.DpiY">
            <summary>
            Gets the DPI on the Y axis.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Hardware.DisplayDpi.DpiScaleX">
            <summary>
            Gets the DPI scale on the X axis.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Hardware.DisplayDpi.DpiScaleY">
            <summary>
            Gets the DPI scale on the Y axis.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Hardware.DpiHelper">
            <summary>
            Provides access to various DPI-related methods.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Hardware.DpiHelper.DefaultDpi">
            <summary>
            Default DPI value.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Hardware.DpiHelper.GetWindowDpi(System.Windows.Window)">
            <summary>
            Gets DPI of the selected <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window that you want to get information about.</param>
        </member>
        <member name="M:Wpf.Ui.Hardware.DpiHelper.GetWindowDpi(System.IntPtr)">
            <summary>
            Gets DPI of the selected <see cref="T:System.Windows.Window"/> based on it's handle.
            </summary>
            <param name="windowHandle">Handle of the window that you want to get information about.</param>
        </member>
        <member name="M:Wpf.Ui.Hardware.DpiHelper.GetSystemDpi">
            <summary>
            Gets the DPI values from <see cref="T:System.Windows.SystemParameters"/>.
            </summary>
            <returns>The DPI values from <see cref="T:System.Windows.SystemParameters"/>. If the property cannot be accessed, the default value <see langword="96"/> is returned.</returns>
        </member>
        <member name="M:Wpf.Ui.Hardware.DpiHelper.LogicalPixelsToDevice(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Convert a point in device independent pixels (1/96") to a point in the system coordinates.
            </summary>
            <param name="logicalPoint">A point in the logical coordinate system.</param>
            <param name="dpiScaleX">Horizontal DPI scale.</param>
            <param name="dpiScaleY">Vertical DPI scale.</param>
            <returns>Returns the parameter converted to the system's coordinates.</returns>
        </member>
        <member name="M:Wpf.Ui.Hardware.DpiHelper.DevicePixelsToLogical(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Convert a point in system coordinates to a point in device independent pixels (1/96").
            </summary>
            <returns>Returns the parameter converted to the device independent coordinate system.</returns>
        </member>
        <member name="T:Wpf.Ui.Hardware.HardwareAcceleration">
            <summary>
            Set of tools for hardware acceleration.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Hardware.HardwareAcceleration.IsSupported(Wpf.Ui.Hardware.RenderingTier)">
            <summary>
            Determines whether the provided rendering tier is supported.
            </summary>
            <param name="tier">Hardware acceleration rendering tier to check.</param>
            <returns><see langword="true"/> if tier is supported.</returns>
        </member>
        <member name="T:Wpf.Ui.Hardware.RenderingTier">
            <summary>
            An <see cref="T:System.Int32"/> value whose high-order word corresponds to the rendering tier for the current thread.
            <para>Starting in the .NET Framework 4, rendering tier 1 has been redefined to only include graphics hardware that supports DirectX 9.0 or greater. Graphics hardware that supports DirectX 7 or 8 is now defined as rendering tier 0.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Hardware.RenderingTier.NoAcceleration">
            <summary>
            No graphics hardware acceleration is available for the application on the device.
            All graphics features use software acceleration. The DirectX version level is less than version 9.0.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Hardware.RenderingTier.PartialAcceleration">
            <summary>
            Most of the graphics features of WPF will use hardware acceleration
            if the necessary system resources are available and have not been exhausted.
            This corresponds to a DirectX version that is greater than or equal to 9.0.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Hardware.RenderingTier.FullAcceleration">
            <summary>
            Most of the graphics features of WPF will use hardware acceleration provided the
            necessary system resources have not been exhausted.
            This corresponds to a DirectX version that is greater than or equal to 9.0.
            </summary>
        </member>
        <member name="T:Wpf.Ui.IContentDialogService">
             <summary>
             Represents a contract with the service that creates <see cref="T:Wpf.Ui.Controls.ContentDialog"/>.
             </summary>
             <example>
             <code lang="xml">
             &lt;ContentPresenter x:Name="RootContentDialogPresenter" Grid.Row="0" /&gt;
             </code>
             <code lang="csharp">
             IContentDialogService contentDialogService = new ContentDialogService();
             contentDialogService.SetContentPresenter(RootContentDialogPresenter);
            
             await _contentDialogService.ShowAsync(
                 new ContentDialog(){
                     Title = "The cake?",
                     Content = "IS A LIE!",
                     PrimaryButtonText = "Save",
                     SecondaryButtonText = "Don't Save",
                     CloseButtonText = "Cancel"
                 }
             );
             </code>
             </example>
        </member>
        <member name="M:Wpf.Ui.IContentDialogService.SetDialogHost(System.Windows.Controls.ContentPresenter)">
            <summary>
            Sets the <see cref="T:System.Windows.Controls.ContentPresenter"/>
            </summary>
            <param name="dialogHost"><see cref="T:System.Windows.Controls.ContentPresenter"/> inside of which the dialogue will be placed. The new <see cref="T:Wpf.Ui.Controls.ContentDialog"/> will replace the current <see cref="P:System.Windows.Controls.ContentPresenter.Content"/>.</param>
        </member>
        <member name="M:Wpf.Ui.IContentDialogService.GetDialogHost">
            <summary>
            Provides direct access to the <see cref="T:System.Windows.Controls.ContentPresenter"/>
            </summary>
            <returns>Reference to the currently selected <see cref="T:System.Windows.Controls.ContentPresenter"/> which displays the <see cref="T:Wpf.Ui.Controls.ContentDialog"/>'s.</returns>
        </member>
        <member name="M:Wpf.Ui.IContentDialogService.ShowAsync(Wpf.Ui.Controls.ContentDialog,System.Threading.CancellationToken)">
            <summary>
            Asynchronously shows the specified dialog.
            </summary>
            <param name="dialog">The dialog to be displayed.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the dialog result.</returns>
        </member>
        <member name="T:Wpf.Ui.INavigationService">
            <summary>
            Represents a contract with a <see cref="T:System.Windows.FrameworkElement"/> that contains <see cref="T:Wpf.Ui.Controls.INavigationView"/>.
            Through defined <see cref="T:Wpf.Ui.Abstractions.INavigationViewPageProvider"/> service allows you to use the Dependency Injection pattern in <c>WPF UI</c> navigation.
            </summary>
        </member>
        <member name="M:Wpf.Ui.INavigationService.Navigate(System.Type)">
            <summary>
            Lets you navigate to the selected page based on it's type. Should be used with <see cref="T:Wpf.Ui.Abstractions.INavigationViewPageProvider"/>.
            </summary>
            <param name="pageType"><see langword="Type"/> of the page.</param>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Wpf.Ui.INavigationService.Navigate(System.Type,System.Object)">
            <summary>
            Lets you navigate to the selected page based on it's type, Should be used with <see cref="T:Wpf.Ui.Abstractions.INavigationViewPageProvider"/>.
            </summary>
            <param name="pageType"><see langword="Type"/> of the page.</param>
            <param name="dataContext">DataContext <see cref="T:System.Object"/></param>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Wpf.Ui.INavigationService.Navigate(System.String)">
            <summary>
            Lets you navigate to the selected page based on it's tag. Should be used with <see cref="T:Wpf.Ui.Abstractions.INavigationViewPageProvider"/>.
            </summary>
            <param name="pageIdOrTargetTag">Id or tag of the page.</param>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Wpf.Ui.INavigationService.Navigate(System.String,System.Object)">
            <summary>
            Lets you navigate to the selected page based on it's tag. Should be used with <see cref="T:Wpf.Ui.Abstractions.INavigationViewPageProvider"/>.
            </summary>
            <param name="pageIdOrTargetTag">Id or tag of the page.</param>
            <param name="dataContext">DataContext <see cref="T:System.Object"/></param>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Wpf.Ui.INavigationService.NavigateWithHierarchy(System.Type)">
            <summary>
            Synchronously adds an element to the navigation stack and navigates current navigation Frame to the
            </summary>
            <param name="pageType">Type of control to be synchronously added to the navigation stack</param>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Wpf.Ui.INavigationService.NavigateWithHierarchy(System.Type,System.Object)">
            <summary>
            Synchronously adds an element to the navigation stack and navigates current navigation Frame to the
            </summary>
            <param name="pageType">Type of control to be synchronously added to the navigation stack</param>
            <param name="dataContext">DataContext <see cref="T:System.Object"/></param>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Wpf.Ui.INavigationService.GetNavigationControl">
            <summary>
            Provides direct access to the control responsible for navigation.
            </summary>
            <returns>Instance of the <see cref="T:Wpf.Ui.Controls.INavigationView"/> control.</returns>
        </member>
        <member name="M:Wpf.Ui.INavigationService.SetNavigationControl(Wpf.Ui.Controls.INavigationView)">
            <summary>
            Lets you attach the control that represents the <see cref="T:Wpf.Ui.Controls.INavigationView"/>.
            </summary>
            <param name="navigation">Instance of the <see cref="T:Wpf.Ui.Controls.INavigationView"/>.</param>
        </member>
        <member name="M:Wpf.Ui.INavigationService.GoBack">
            <summary>
            Navigates the NavigationView to the previous journal entry.
            </summary>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Wpf.Ui.INavigationWindow">
            <summary>
            Represents a contract with a <see cref="T:System.Windows.Window"/> that contains <see cref="T:Wpf.Ui.Controls.INavigationView"/>.
            Through defined <see cref="T:Wpf.Ui.Abstractions.INavigationViewPageProvider"/> service allows you to use the MVVM model in <c>WPF UI</c> navigation.
            </summary>
        </member>
        <member name="M:Wpf.Ui.INavigationWindow.GetNavigation">
            <summary>
            Provides direct access to the control responsible for navigation.
            </summary>
            <returns>Instance of the <see cref="T:Wpf.Ui.Controls.INavigationView"/> control.</returns>
        </member>
        <member name="M:Wpf.Ui.INavigationWindow.Navigate(System.Type)">
            <summary>
            Lets you navigate to the selected page based on it's type. Should be used with <see cref="T:Wpf.Ui.Abstractions.INavigationViewPageProvider"/>.
            </summary>
            <param name="pageType"><see langword="Type"/> of the page.</param>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Wpf.Ui.INavigationWindow.SetServiceProvider(System.IServiceProvider)">
            <summary>
            Lets you attach the service provider that delivers page instances to <see cref="T:Wpf.Ui.Controls.INavigationView"/>.
            </summary>
            <param name="serviceProvider">Instance of the <see cref="T:System.IServiceProvider"/>.</param>
        </member>
        <member name="M:Wpf.Ui.INavigationWindow.SetPageService(Wpf.Ui.Abstractions.INavigationViewPageProvider)">
            <summary>
            Lets you attach the service that delivers page instances to <see cref="T:Wpf.Ui.Controls.INavigationView"/>.
            </summary>
            <param name="navigationViewPageProvider">Instance of the <see cref="T:Wpf.Ui.Abstractions.INavigationViewPageProvider"/> with attached service provider.</param>
        </member>
        <member name="M:Wpf.Ui.INavigationWindow.ShowWindow">
            <summary>
            Triggers the command to open a window.
            </summary>
        </member>
        <member name="M:Wpf.Ui.INavigationWindow.CloseWindow">
            <summary>
            Triggers the command to close a window.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Input.IRelayCommand">
            <summary>
            An interface expanding <see cref="T:System.Windows.Input.ICommand"/> with the ability to raise
            the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event externally.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Input.IRelayCommand.NotifyCanExecuteChanged">
            <summary>
            Notifies that the <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> property has changed.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Input.IRelayCommand`1">
            <summary>
            A generic interface representing a more specific version of <see cref="T:Wpf.Ui.Input.IRelayCommand"/>.
            </summary>
            <typeparam name="T">The type used as argument for the interface methods.</typeparam>
        </member>
        <member name="M:Wpf.Ui.Input.IRelayCommand`1.CanExecute(`0)">
            <summary>
            Provides a strongly-typed variant of <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>.
            </summary>
            <param name="parameter">The input parameter.</param>
            <returns>Whether or not the current command can be executed.</returns>
            <remarks>Use this overload to avoid boxing, if <typeparamref name="T"/> is a value type.</remarks>
        </member>
        <member name="M:Wpf.Ui.Input.IRelayCommand`1.Execute(`0)">
            <summary>
            Provides a strongly-typed variant of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>.
            </summary>
            <param name="parameter">The input parameter.</param>
            <remarks>Use this overload to avoid boxing, if <typeparamref name="T"/> is a value type.</remarks>
        </member>
        <member name="T:Wpf.Ui.Input.RelayCommand`1">
            <summary>
            A generic command whose sole purpose is to relay its functionality to other
            objects by invoking delegates. The default return value for the CanExecute
            method is <see langword="true"/>. This class allows you to accept command parameters
            in the <see cref="M:Wpf.Ui.Input.RelayCommand`1.Execute(`0)"/> and <see cref="M:Wpf.Ui.Input.RelayCommand`1.CanExecute(`0)"/> callback methods.
            </summary>
            <typeparam name="T">The type of parameter being passed as input to the callbacks.</typeparam>
        </member>
        <member name="F:Wpf.Ui.Input.RelayCommand`1._execute">
            <summary>
            The <see cref="T:System.Action"/> to invoke when <see cref="M:Wpf.Ui.Input.RelayCommand`1.Execute(`0)"/> is used.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Input.RelayCommand`1._canExecute">
            <summary>
            The optional action to invoke when <see cref="M:Wpf.Ui.Input.RelayCommand`1.CanExecute(`0)"/> is used.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Input.RelayCommand`1.CanExecuteChanged">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Input.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Input.RelayCommand`1"/> class that can always execute.
            </summary>
            <param name="execute">The execution logic.</param>
            <remarks>
            Due to the fact that the <see cref="T:System.Windows.Input.ICommand"/> interface exposes methods that accept a
            nullable <see cref="T:System.Object"/> parameter, it is recommended that if <typeparamref name="T"/> is a reference type,
            you should always declare it as nullable, and to always perform checks within <paramref name="execute"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="execute"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Wpf.Ui.Input.RelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Input.RelayCommand`1"/> class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
            <remarks>
            Due to the fact that the <see cref="T:System.Windows.Input.ICommand"/> interface exposes methods that accept a
            nullable <see cref="T:System.Object"/> parameter, it is recommended that if <typeparamref name="T"/> is a reference type,
            you should always declare it as nullable, and to always perform checks within <paramref name="execute"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="execute"/> or <paramref name="canExecute"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:Wpf.Ui.Input.RelayCommand`1.NotifyCanExecuteChanged">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Input.RelayCommand`1.CanExecute(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Input.RelayCommand`1.CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Input.RelayCommand`1.Execute(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Input.RelayCommand`1.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Input.RelayCommand`1.TryGetCommandArgument(System.Object,`0@)">
            <summary>
            Tries to get a command argument of compatible type <typeparamref name="T"/> from an input <see cref="T:System.Object"/>.
            </summary>
            <param name="parameter">The input parameter.</param>
            <param name="result">The resulting <typeparamref name="T"/> value, if any.</param>
            <returns>Whether or not a compatible command argument could be retrieved.</returns>
        </member>
        <member name="M:Wpf.Ui.Input.RelayCommand`1.ThrowArgumentExceptionForInvalidCommandArgument(System.Object)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if an invalid command argument is used.
            </summary>
            <param name="parameter">The input parameter.</param>
            <exception cref="T:System.ArgumentException">Thrown with an error message to give info on the invalid parameter.</exception>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi">
            <summary>
            Desktop Window Manager (DWM).
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWM_CLOAKED">
            <summary>
            Cloaked flags describing why a window is cloaked.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.GESTURE_TYPE">
            <summary>
            GT_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS">
            <summary>
            DWMTWR_* Tab window requirements.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_NONE">
            <summary>
            This result means the window meets all requirements requested.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_IMPLEMENTED_BY_SYSTEM">
            <summary>
            In some configurations, admin/user setting or mode of the system means that windows won't be tabbed
            This requirement says that the system/mode must implement tabbing and if it does not
            nothing can be done to change this.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_WINDOW_RELATIONSHIP">
            <summary>
            The window has an owner or parent so is ineligible for tabbing.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_WINDOW_STYLES">
            <summary>
            The window has styles that make it ineligible for tabbing.
            <para>To be eligible windows must:</para>
            <para>Have the WS_OVERLAPPEDWINDOW (WS_CAPTION, WS_THICKFRAME, etc.) styles set.</para>
            <para>Not have WS_POPUP, WS_CHILD or WS_DLGFRAME set.</para>
            <para>Not have WS_EX_TOPMOST or WS_EX_TOOLWINDOW set.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_WINDOW_DWM_ATTRIBUTES">
            <summary>
            The window is ineligible due to its Dwm configuration.
            It must not extended its client area into the title bar using DwmExtendFrameIntoClientArea
            It must not have DWMWA_NCRENDERING_POLICY set to DWMNCRP_ENABLED
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_WINDOW_MARGINS">
            <summary>
            The window is ineligible due to it's margins, most likely due to custom handling in WM_NCCALCSIZE.
            The window must use the default window margins for the non-client area.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_TABBING_ENABLED">
            <summary>
            The window has been explicitly opted out by setting DWMWA_TABBING_ENABLED to FALSE.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_USER_POLICY">
            <summary>
            The user has configured this application to not participate in tabbing.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_GROUP_POLICY">
            <summary>
            The group policy has configured this application to not participate in tabbing.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_APP_COMPAT">
            <summary>
            This is set if app compat has blocked tabs for this window. Can be overridden per window by setting
            DWMWA_TABBING_ENABLED to TRUE. That does not override any other tabbing requirements.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWM_WINDOW_CORNER_PREFERENCE">
            <summary>
            Flags used by the DwmSetWindowAttribute function to specify the rounded corner preference for a window.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWMSBT">
            <summary>
            Backdrop types.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMSBT.DWMSBT_AUTO">
            <summary>
            Automatically selects backdrop effect.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMSBT.DWMSBT_DISABLE">
            <summary>
            Turns off the backdrop effect.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMSBT.DWMSBT_MAINWINDOW">
            <summary>
            Sets Mica effect with generated wallpaper tint.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMSBT.DWMSBT_TRANSIENTWINDOW">
            <summary>
            Sets acrlic effect.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMSBT.DWMSBT_TABBEDWINDOW">
            <summary>
            Sets blurred wallpaper effect, like Mica without tint.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWMNCRENDERINGPOLICY">
            <summary>
            Non-client rendering policy attribute values
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMNCRENDERINGPOLICY.DWMNCRP_USEWINDOWSTYLE">
            <summary>
            Enable/disable non-client rendering based on window style
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMNCRENDERINGPOLICY.DWMNCRP_DISABLED">
            <summary>
            Disabled non-client rendering; window style is ignored
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMNCRENDERINGPOLICY.DWMNCRP_ENABLED">
            <summary>
            Enabled non-client rendering; window style is ignored
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMNCRENDERINGPOLICY.DWMNCRP_LAST">
            <summary>
            Sentinel value.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWMFLIP3DWINDOWPOLICY">
            <summary>
            Values designating how Flip3D treats a given window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMFLIP3DWINDOWPOLICY.DWMFLIP3D_DEFAULT">
            <summary>
            Hide or include the window in Flip3D based on window style and visibility.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMFLIP3DWINDOWPOLICY.DWMFLIP3D_EXCLUDEBELOW">
            <summary>
            Display the window under Flip3D and disabled.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMFLIP3DWINDOWPOLICY.DWMFLIP3D_EXCLUDEABOVE">
            <summary>
            Display the window above Flip3D and enabled.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMFLIP3DWINDOWPOLICY.DWMFLIP3D_LAST">
            <summary>
            Sentinel value.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE">
            <summary>
            Options used by the DwmGetWindowAttribute and DwmSetWindowAttribute functions.
            <para><see href="https://github.com/electron/electron/issues/29937"/></para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_NCRENDERING_ENABLED">
            <summary>
            Is non-client rendering enabled/disabled
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_NCRENDERING_POLICY">
            <summary>
            DWMNCRENDERINGPOLICY - Non-client rendering policy
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_TRANSITIONS_FORCEDISABLED">
            <summary>
            Potentially enable/forcibly disable transitions
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_ALLOW_NCPAINT">
            <summary>
            Enables content rendered in the non-client area to be visible on the frame drawn by DWM.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_CAPTION_BUTTON_BOUNDS">
            <summary>
            Retrieves the bounds of the caption button area in the window-relative space.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_NONCLIENT_RTL_LAYOUT">
            <summary>
            Is non-client content RTL mirrored
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_FORCE_ICONIC_REPRESENTATION">
            <summary>
            Forces the window to display an iconic thumbnail or peek representation (a static bitmap), even if a live or snapshot representation of the window is available.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_FLIP3D_POLICY">
            <summary>
            Designates how Flip3D will treat the window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_EXTENDED_FRAME_BOUNDS">
            <summary>
            Gets the extended frame bounds rectangle in screen space
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_HAS_ICONIC_BITMAP">
            <summary>
            Indicates an available bitmap when there is no better thumbnail representation.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_DISALLOW_PEEK">
            <summary>
            Don't invoke Peek on the window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_EXCLUDED_FROM_PEEK">
            <summary>
            LivePreview exclusion information
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_CLOAK">
            <summary>
            Cloaks the window such that it is not visible to the user.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_CLOAKED">
            <summary>
            If the window is cloaked, provides one of the following values explaining why.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_FREEZE_REPRESENTATION">
            <summary>
            Freeze the window's thumbnail image with its current visuals. Do no further live updates on the thumbnail image to match the window's contents.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_PASSIVE_UPDATE_MODE">
            <summary>
            BOOL, Updates the window only when desktop composition runs for other reasons
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_USE_HOSTBACKDROPBRUSH">
            <summary>
            BOOL, Allows the use of host backdrop brushes for the window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DMWA_USE_IMMERSIVE_DARK_MODE_OLD">
            <summary>
            Allows a window to either use the accent color, or dark, according to the user Color Mode preferences.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_USE_IMMERSIVE_DARK_MODE">
            <summary>
            Allows a window to either use the accent color, or dark, according to the user Color Mode preferences.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_WINDOW_CORNER_PREFERENCE">
            <summary>
            Controls the policy that rounds top-level window corners.
            <para>Windows 11 and above.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_BORDER_COLOR">
            <summary>
            The color of the thin border around a top-level window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_CAPTION_COLOR">
            <summary>
            The color of the caption.
            <para>Windows 11 and above.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_TEXT_COLOR">
            <summary>
            The color of the caption text.
            <para>Windows 11 and above.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_VISIBLE_FRAME_BORDER_THICKNESS">
            <summary>
            Width of the visible border around a thick frame window.
            <para>Windows 11 and above.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_SYSTEMBACKDROP_TYPE">
            <summary>
            Allows to enter a value from 0 to 4 deciding on the imposed backdrop effect.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_MICA_EFFECT">
            <summary>
            Indicates whether the window should use the Mica effect.
            <para>Windows 11 and above.</para>
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS">
            <summary>
            Represents the current DWM color accent settings.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS.clrColor">
            <summary>
            ColorizationColor
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS.clrAfterGlow">
            <summary>
            ColorizationAfterglow.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS.nIntensity">
            <summary>
            ColorizationColorBalance.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS.clrAfterGlowBalance">
            <summary>
            ColorizationAfterglowBalance.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS.clrBlurBalance">
            <summary>
            ColorizationBlurBalance.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS.clrGlassReflectionIntensity">
            <summary>
            ColorizationGlassReflectionIntensity.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS.fOpaque">
            <summary>
            ColorizationOpaqueBlend.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.UNSIGNED_RATIO">
            <summary>
            Defines a data type used by the Desktop Window Manager (DWM) APIs. It represents a generic ratio and is used for different purposes and units even within a single API.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.UNSIGNED_RATIO.uiNumerator">
            <summary>
            The ratio numerator.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.UNSIGNED_RATIO.uiDenominator">
            <summary>
            The ratio denominator.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWM_SHOWCONTACT">
            <summary>
            Specifies the input operations for which visual feedback should be provided. This enumeration is used by the DwmShowContact function.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWM_SOURCE_FRAME_SAMPLING">
            <summary>
            Flags used by the DwmSetPresentParameters function to specify the frame sampling type.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_SOURCE_FRAME_SAMPLING.DWM_SOURCE_FRAME_SAMPLING_POINT">
            <summary>
            Use the first source frame that includes the first refresh of the output frame
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_SOURCE_FRAME_SAMPLING.DWM_SOURCE_FRAME_SAMPLING_COVERAGE">
            <summary>
            Use the source frame that includes the most refreshes of out the output frame
            in case of multiple source frames with the same coverage the last will be used
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_SOURCE_FRAME_SAMPLING.DWM_SOURCE_FRAME_SAMPLING_LAST">
            <summary>
            Sentinel value.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWM_TIMING_INFO">
            <summary>
            Specifies Desktop Window Manager (DWM) composition timing information. Used by the <see cref="M:Wpf.Ui.Interop.Dwmapi.DwmGetCompositionTimingInfo(System.IntPtr,Wpf.Ui.Interop.Dwmapi.DWM_TIMING_INFO@)"/> function.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWM_SIT">
            <summary>
            SIT flags.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_SIT.NONE">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_SIT.DISPLAYFRAME">
            <summary>
            Displays a frame around the provided bitmap.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmIsCompositionEnabled(System.Int32@)">
            <summary>
            Obtains a value that indicates whether Desktop Window Manager (DWM) composition is enabled.
            </summary>
            <param name="pfEnabled">A pointer to a value that, when this function returns successfully, receives TRUE if DWM composition is enabled; otherwise, FALSE.</param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmExtendFrameIntoClientArea(System.IntPtr,Wpf.Ui.Interop.UxTheme.MARGINS@)">
            <summary>
            Extends the window frame into the client area.
            </summary>
            <param name="hWnd">The handle to the window in which the frame will be extended into the client area.</param>
            <param name="pMarInset">A pointer to a MARGINS structure that describes the margins to use when extending the frame into the client area.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmGetCompositionTimingInfo(System.IntPtr,Wpf.Ui.Interop.Dwmapi.DWM_TIMING_INFO@)">
            <summary>
            Retrieves the current composition timing information for a specified window.
            </summary>
            <param name="hWnd">The handle to the window for which the composition timing information should be retrieved.</param>
            <param name="pTimingInfo">A pointer to a <see cref="T:Wpf.Ui.Interop.Dwmapi.DWM_TIMING_INFO"/> structure that, when this function returns successfully, receives the current composition timing information for the window.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmInvalidateIconicBitmaps(System.IntPtr)">
            <summary>
            Called by an application to indicate that all previously provided iconic bitmaps from a window, both thumbnails and peek representations, should be refreshed.
            </summary>
            <param name="hWnd">A handle to the window or tab whose bitmaps are being invalidated through this call. This window must belong to the calling process.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmSetIconicThumbnail(System.IntPtr,System.IntPtr,Wpf.Ui.Interop.Dwmapi.DWM_SIT)">
            <summary>
            Sets a static, iconic bitmap on a window or tab to use as a thumbnail representation. The taskbar can use this bitmap as a thumbnail switch target for the window or tab.
            </summary>
            <param name="hWnd">A handle to the window or tab. This window must belong to the calling process.</param>
            <param name="hbmp">A handle to the bitmap to represent the window that hwnd specifies.</param>
            <param name="dwSITFlags">The display options for the thumbnail.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmSetIconicLivePreviewBitmap(System.IntPtr,System.IntPtr,Wpf.Ui.Interop.WinDef.POINT,Wpf.Ui.Interop.Dwmapi.DWM_SIT)">
            <summary>
            Sets a static, iconic bitmap to display a live preview (also known as a Peek preview) of a window or tab. The taskbar can use this bitmap to show a full-sized preview of a window or tab.
            </summary>
            <param name="hWnd">A handle to the window. This window must belong to the calling process.</param>
            <param name="hbmp">A handle to the bitmap to represent the window that hwnd specifies.</param>
            <param name="pptClient">The offset of a tab window's client region (the content area inside the client window frame) from the host window's frame. This offset enables the tab window's contents to be drawn correctly in a live preview when it is drawn without its frame.</param>
            <param name="dwSITFlags">The display options for the live preview.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmSetWindowAttribute(System.IntPtr,System.Int32,System.Int32@,System.Int32)">
            <summary>
            Sets the value of Desktop Window Manager (DWM) non-client rendering attributes for a window.
            </summary>
            <param name="hWnd">The handle to the window for which the attribute value is to be set.</param>
            <param name="dwAttribute">A flag describing which value to set, specified as a value of the DWMWINDOWATTRIBUTE enumeration.</param>
            <param name="pvAttribute">A pointer to an object containing the attribute value to set.</param>
            <param name="cbAttribute">The size, in bytes, of the attribute value being set via the <c>pvAttribute</c> parameter.</param>
            <returns>If the function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE,System.Int32@,System.Int32)">
            <summary>
            Sets the value of Desktop Window Manager (DWM) non-client rendering attributes for a window.
            </summary>
            <param name="hWnd">The handle to the window for which the attribute value is to be set.</param>
            <param name="dwAttribute">A flag describing which value to set, specified as a value of the DWMWINDOWATTRIBUTE enumeration.</param>
            <param name="pvAttribute">A pointer to an object containing the attribute value to set.</param>
            <param name="cbAttribute">The size, in bytes, of the attribute value being set via the <c>pvAttribute</c> parameter.</param>
            <returns>If the function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE,System.UInt32@,System.Int32)">
            <summary>
            Sets the value of Desktop Window Manager (DWM) non-client rendering attributes for a window.
            </summary>
            <param name="hWnd">The handle to the window for which the attribute value is to be set.</param>
            <param name="dwAttribute">A flag describing which value to set, specified as a value of the DWMWINDOWATTRIBUTE enumeration.</param>
            <param name="pvAttribute">A pointer to an object containing the attribute value to set.</param>
            <param name="cbAttribute">The size, in bytes, of the attribute value being set via the <c>pvAttribute</c> parameter.</param>
            <returns>If the function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmGetWindowAttribute(System.IntPtr,Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE,System.Int32@,System.Int32)">
            <summary>
            Retrieves the current value of a specified Desktop Window Manager (DWM) attribute applied to a window. For programming guidance, and code examples, see Controlling non-client region rendering.
            </summary>
            <param name="hWnd">The handle to the window from which the attribute value is to be retrieved.</param>
            <param name="dwAttributeToGet">A flag describing which value to retrieve, specified as a value of the <see cref="T:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE"/> enumeration.</param>
            <param name="pvAttributeValue">A pointer to a value which, when this function returns successfully, receives the current value of the attribute. The type of the retrieved value depends on the value of the dwAttribute parameter.</param>
            <param name="cbAttribute">The size, in bytes, of the attribute value being received via the pvAttribute parameter.</param>
            <returns>If the function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmGetWindowAttribute(System.IntPtr,System.Int32,System.Int32@,System.Int32)">
            <summary>
            Retrieves the current value of a specified Desktop Window Manager (DWM) attribute applied to a window. For programming guidance, and code examples, see Controlling non-client region rendering.
            </summary>
            <param name="hWnd">The handle to the window from which the attribute value is to be retrieved.</param>
            <param name="dwAttributeToGet">A flag describing which value to retrieve, specified as a value of the <see cref="T:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE"/> enumeration.</param>
            <param name="pvAttributeValue">A pointer to a value which, when this function returns successfully, receives the current value of the attribute. The type of the retrieved value depends on the value of the dwAttribute parameter.</param>
            <param name="cbAttribute">The size, in bytes, of the attribute value being received via the pvAttribute parameter.</param>
            <returns>If the function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmGetColorizationParameters(Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS@)">
            <summary>
            The feature is not included in the Microsoft documentation. Reads Desktop Window Manager (DWM) color information.
            </summary>
            <param name="dwParameters">A pointer to a reference value that will hold the color information.</param>
        </member>
        <member name="T:Wpf.Ui.Interop.HRESULT">
            <summary>
            Common Windows API result;
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.HRESULT.S_OK">
            <summary>
            Operation successful.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.HRESULT.NO_ERROR">
            <summary>
            Operation successful.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.HRESULT.NOERROR">
            <summary>
            Operation successful.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.HRESULT.S_FALSE">
            <summary>
            Unspecified failure.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Kernel32">
            <summary>
            Used by multiple technologies.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.Kernel32.GetLastError">
            <summary>
            Retrieves the calling thread's last-error code value. The last-error code is maintained on a per-thread basis. Multiple threads do not overwrite each other's last-error code.
            </summary>
            <returns>The return value is the calling thread's last-error code.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.Kernel32.SetLastError(System.Int32)">
            <summary>
            Sets the last-error code for the calling thread.
            </summary>
            <param name="dwErrorCode">The last-error code for the thread.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.Kernel32.IsDebuggerPresent">
            <summary>
            Determines whether the calling process is being debugged by a user-mode debugger.
            </summary>
            <returns>If the current process is running in the context of a debugger, the return value is nonzero.</returns>
        </member>
        <member name="T:Wpf.Ui.Interop.Libraries">
            <summary>
            Windows kernel module.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Shell32">
            <summary>
            The Windows UI provides users with access to a wide variety of objects necessary to run applications and manage the operating system.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Shell32.DOGIF">
            <summary>
            DATAOBJ_GET_ITEM_FLAGS.  DOGIF_*.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Shell32.NIM">
            <summary>
            Shell_NotifyIcon messages.  NIM_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Shell32.NIF">
            <summary>
            Shell_NotifyIcon flags.  NIF_*
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NIF.REALTIME">
            <summary>
            Vista only.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NIF.SHOWTIP">
            <summary>
            Vista only.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.cbSize">
            <summary>
            The size of this structure, in bytes.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.hWnd">
            <summary>
            A handle to the window that receives notifications associated with an icon in the notification area.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.uID">
            <summary>
            The application-defined identifier of the taskbar icon. The Shell uses either (hWnd plus uID) or guidItem to identify which icon to operate on when Shell_NotifyIcon is invoked.
            You can have multiple icons associated with a single hWnd by assigning each a different uID. If guidItem is specified, uID is ignored.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.uFlags">
            <summary>
            Flags that either indicate which of the other members of the structure contain valid data or provide additional information to the tooltip as to how it should display.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.uCallbackMessage">
            <summary>
            0x00000001. The uCallbackMessage member is valid.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.hIcon">
            <summary>
            0x00000002. The hIcon member is valid.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.szTip">
            <summary>
            0x00000004. The szTip member is valid.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.dwState">
            <summary>
            The state of the icon.  There are two flags that can be set independently.
            NIS_HIDDEN = 1.  The icon is hidden.
            NIS_SHAREDICON = 2.  The icon is shared.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.uVersion">
            <summary>
            Prior to Vista this was a union of uTimeout and uVersion.  As of Vista, uTimeout has been deprecated.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.Shell32.SetCurrentProcessExplicitAppUserModelID(System.String)">
            <summary>
            Sets the User Model AppID for the current process, enabling Windows to retrieve this ID
            </summary>
            <param name="AppID">The string ID</param>
        </member>
        <member name="M:Wpf.Ui.Interop.Shell32.GetCurrentProcessExplicitAppUserModelID(System.String@)">
            <summary>
            Retrieves the User Model AppID that has been explicitly set for the current process via SetCurrentProcessExplicitAppUserModelID
            </summary>
            <param name="AppID">The returned string ID of the Application User Model.</param>
            <returns>An HRESULT indicating success or failure of the operation.</returns>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl">
            <summary>
            Exposes methods that enumerate the contents of a view and receive notification from callback upon enumeration completion.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.THUMBBUTTONFLAGS">
            <summary>
            THUMBBUTTON flags.  THBF_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.THUMBBUTTONMASK">
            <summary>
            THUMBBUTTON mask.  THB_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.TBPFLAG">
            <summary>
            TBPF_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.STPFLAG">
            <summary>
            STPF_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.EXPLORER_BROWSER_OPTIONS">
            <summary>
            EBO_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.EXPLORER_BROWSER_FILL_FLAGS">
            <summary>
            EBF_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.THUMBBUTTON">
            <summary>
            THUMBBUTTON
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.ShObjIdl.THUMBBUTTON.THBN_CLICKED">
            <summary>
            WPARAM value for a THUMBBUTTON being clicked.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.CTaskbarList">
            <summary>
            Class DECLSPEC_UUID("56FDF344-FD6D-11d0-958A-006097C9A090")
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.ShellItem">
            <summary>
            Class DECLSPEC_UUID("9ac9fbe1-e0a2-4ad6-b4ee-e212013ea917")
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.ITaskbarList4">
            <summary>
            MIDL_INTERFACE("c43dc798-95d1-4bea-9030-bb99e2983a1a")
            ITaskbarList4 : public ITaskbarList3
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.ShObjIdl.ITaskbarList4.ThumbBarAddButtons(System.IntPtr,System.UInt32,Wpf.Ui.Interop.ShObjIdl.THUMBBUTTON[])">
            <summary>
            Adds thumbnail toolbar buttons to the specified window.
            </summary>
            <param name="hwnd">Window handle.</param>
            <param name="cButtons">Number of buttons.</param>
            <param name="pButtons">Array of buttons.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.ShObjIdl.ITaskbarList4.ThumbBarUpdateButtons(System.IntPtr,System.UInt32,Wpf.Ui.Interop.ShObjIdl.THUMBBUTTON[])">
            <summary>
            Updates thumbnail toolbar buttons for the specified window.
            </summary>
            <param name="hwnd">Window handle.</param>
            <param name="cButtons">Number of buttons.</param>
            <param name="pButtons">Array of buttons to update.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="T:Wpf.Ui.Interop.UnsafeNativeMethods">
            <summary>
            A set of dangerous methods to modify the appearance.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference(System.Windows.Window,Wpf.Ui.Controls.WindowCornerPreference)">
            <summary>
            Tries to set the <see cref="T:System.Windows.Window"/> corner preference.
            </summary>
            <param name="window">Selected window.</param>
            <param name="cornerPreference">Window corner preference.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference(System.IntPtr,Wpf.Ui.Controls.WindowCornerPreference)">
            <summary>
            Tries to set the corner preference of the selected window.
            </summary>
            <param name="handle">Selected window handle.</param>
            <param name="cornerPreference">Window corner preference.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.RemoveWindowDarkMode(System.Windows.Window)">
            <summary>
            Tries to remove ImmersiveDarkMode effect from the <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window to which the effect is to be applied.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.RemoveWindowDarkMode(System.IntPtr)">
            <summary>
            Tries to remove ImmersiveDarkMode effect from the window handle.
            </summary>
            <param name="handle">Window handle.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowDarkMode(System.Windows.Window)">
            <summary>
            Tries to apply ImmersiveDarkMode effect for the <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window to which the effect is to be applied.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowDarkMode(System.IntPtr)">
            <summary>
            Tries to apply ImmersiveDarkMode effect for the window handle.
            </summary>
            <param name="handle">Window handle.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents(System.Windows.Window)">
            <summary>
            Tries to remove titlebar from selected <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window to which the effect is to be applied.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents(System.IntPtr)">
            <summary>
            Tries to remove titlebar from selected window handle.
            </summary>
            <param name="handle">Window handle.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowBackdrop(System.IntPtr,Wpf.Ui.Controls.WindowBackdropType)">
            <summary>
            Tries to apply selected backdrop type for window handle.
            </summary>
            <param name="handle">Selected window handle.</param>
            <param name="backgroundType">Backdrop type.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.IsWindowHasBackdrop(System.IntPtr,Wpf.Ui.Controls.WindowBackdropType)">
            <summary>
            Tries to determine whether the provided <see cref="T:System.Windows.Window"/> has applied legacy backdrop effect.
            </summary>
            <param name="handle">Window handle.</param>
            <param name="backdropType">Background backdrop type.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica(System.Windows.Window)">
            <summary>
            Tries to determine whether the provided <see cref="T:System.Windows.Window"/> has applied legacy Mica effect.
            </summary>
            <param name="window">Window to check.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica(System.IntPtr)">
            <summary>
            Tries to determine whether the provided handle has applied legacy Mica effect.
            </summary>
            <param name="handle">Window handle.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(System.Windows.Window)">
            <summary>
            Tries to apply legacy Mica effect for the selected <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window to which the effect is to be applied.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(System.IntPtr)">
            <summary>
            Tries to apply legacy Mica effect for the selected <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="handle">Window handle.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(System.Windows.Window)">
            <summary>
            Tries to apply legacy Acrylic effect for the selected <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window to which the effect is to be applied.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(System.IntPtr)">
            <summary>
            Tries to apply legacy Acrylic effect for the selected <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="handle">Window handle</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.GetDwmColor">
            <summary>
            Tries to get currently selected Window accent color.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.SetTaskbarState(System.IntPtr,Wpf.Ui.Interop.ShObjIdl.TBPFLAG)">
            <summary>
            Tries to set taskbar state for the selected window handle.
            </summary>
            <param name="hWnd">Window handle.</param>
            <param name="taskbarFlag">Taskbar flag.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.SetTaskbarValue(System.IntPtr,Wpf.Ui.Interop.ShObjIdl.TBPFLAG,System.Int32,System.Int32)">
            <summary>
            Updates the taskbar progress bar value for a window.
            </summary>
            <param name="hWnd">The handle to the window.</param>
            <param name="taskbarFlag">Progress state flag (paused, etc).</param>
            <param name="current">Current progress value.</param>
            <param name="total">Maximum progress value.</param>
            <returns>True if successful updated, otherwise false.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.IsCompositionEnabled">
            <summary>
            Checks whether the DWM composition is enabled.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.IsValidWindow(System.IntPtr)">
            <summary>
            Checks if provided pointer represents existing window.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.GetHandle(System.Windows.Window,System.IntPtr@)">
            <summary>
            Tries to get the pointer to the window handle.
            </summary>
            <returns><see langword="true"/> if the handle is not <see cref="F:System.IntPtr.Zero"/>.</returns>
        </member>
        <member name="T:Wpf.Ui.Interop.UnsafeReflection">
            <summary>
            A set of dangerous methods to modify the appearance.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeReflection.Cast(Wpf.Ui.Controls.WindowBackdropType)">
            <summary>
            Casts <see cref="T:Wpf.Ui.Controls.WindowBackdropType"/> to <see cref="T:Wpf.Ui.Interop.Dwmapi.DWMSBT"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeReflection.Cast(Wpf.Ui.Controls.WindowCornerPreference)">
            <summary>
            Casts <see cref="T:Wpf.Ui.Controls.WindowCornerPreference"/> to <see cref="T:Wpf.Ui.Interop.Dwmapi.DWM_WINDOW_CORNER_PREFERENCE"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeReflection.Cast(Wpf.Ui.TaskBar.TaskBarProgressState)">
            <summary>
            Casts <see cref="T:Wpf.Ui.TaskBar.TaskBarProgressState"/> to <see cref="T:Wpf.Ui.Interop.ShObjIdl.TBPFLAG"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeReflection.Cast(Wpf.Ui.Interop.ShObjIdl.TBPFLAG)">
            <summary>
            Casts <see cref="T:Wpf.Ui.Interop.ShObjIdl.TBPFLAG"/> to <see cref="T:Wpf.Ui.TaskBar.TaskBarProgressState"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32">
            <summary>
            USER procedure declarations, constant definitions and macros.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.SWP">
            <summary>
            SetWindowPos options
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.MF">
            <summary>
            EnableMenuItem uEnable values, MF_*
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.MF.DOES_NOT_EXIST">
            <summary>
            Possible return value for EnableMenuItem
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.SC">
            <summary>
            Menu item element.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.SC.F_ISSECURE">
            <summary>
            SCF_ISSECURE
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.WM_NCHITTEST">
            <summary>
            WM_NCHITTEST and MOUSEHOOKSTRUCT Mouse Position Codes
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTERROR">
            <summary>
            Hit test returned error.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTTRANSPARENT">
            <summary>
            Hit test returned transparent.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTNOWHERE">
            <summary>
            On the screen background or on a dividing line between windows.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTCLIENT">
            <summary>
            In a client area.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTCAPTION">
            <summary>
            In a title bar.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTSYSMENU">
            <summary>
            In a window menu or in a Close button in a child window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTGROWBOX">
            <summary>
            In a size box (same as HTSIZE).
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTMENU">
            <summary>
            In a menu.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTHSCROLL">
            <summary>
            In a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTVSCROLL">
            <summary>
            In the vertical scroll bar.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTMINBUTTON">
            <summary>
            In a Minimize button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTMAXBUTTON">
            <summary>
            In a Maximize button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTLEFT">
            <summary>
            In the left border of a resizable window (the user can click the mouse to resize the window horizontally).
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTRIGHT">
            <summary>
            In the right border of a resizable window (the user can click the mouse to resize the window horizontally).
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTTOP">
            <summary>
            In the upper-horizontal border of a window.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.GWL">
            <summary>
            Window long flags.
            <para><see href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowlonga"/></para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.GWL_EXSTYLE">
            <summary>
            Sets a new extended window style.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.GWLP_HINSTANCE">
            <summary>
            Sets a new application instance handle.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.GWLP_HWNDPARENT">
            <summary>
            Sets a new hWnd parent.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.GWL_ID">
            <summary>
            Sets a new identifier of the child window. The window cannot be a top-level window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.GWL_STYLE">
            <summary>
            Sets a new window style.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.GWL_USERDATA">
            <summary>
            Sets the user data associated with the window.
            This data is intended for use by the application that created the window. Its value is initially zero.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.GWL_WNDPROC">
            <summary>
            Sets a new address for the window procedure.
            You cannot change this attribute if the window does not belong to the same process as the calling thread.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.DWLP_USER">
            <summary>
            Sets new extra information that is private to the application, such as handles or pointers.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.DWLP_MSGRESULT">
            <summary>
            Sets the return value of a message processed in the dialog box procedure.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.DWLP_DLGPROC">
            <summary>
            Sets the new address of the dialog box procedure.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.WCA">
            <summary>
            Window composition attributes.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.ACCENT_STATE">
            <summary>
            DWM window accent state.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.ACCENT_POLICY">
            <summary>
            WCA window accent policy.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.CS">
            <summary>
            CS_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.MSGFLT">
            <summary>
            MSGFLT_*. New in Vista. Realiased in Windows 7.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.MSGFLT.RESET">
            <summary>
            Resets the window message filter for hWnd to the default. Any message allowed globally or process-wide will get through, but any message not included in those two categories, and which comes from a lower privileged process, will be blocked.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.MSGFLT.ALLOW">
            <summary>
            Allows the message through the filter. This enables the message to be received by hWnd, regardless of the source of the message, even it comes from a lower privileged process.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.MSGFLT.DISALLOW">
            <summary>
            Blocks the message to be delivered to hWnd if it comes from a lower privileged process, unless the message is allowed process-wide by using the ChangeWindowMessageFilter function or globally.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.MSGFLTINFO">
            <summary>
            MSGFLTINFO.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.CHANGEFILTERSTRUCT">
            <summary>
            Win7 only.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.WM">
            <summary>
            Window message values, WM_*
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM.TRAYMOUSEMESSAGE">
            <summary>
            This is the hard-coded message value used by WinForms for Shell_NotifyIcon.
            It's relatively safe to reuse.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.WS">
            <summary>
            WindowStyle values, WS_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.WS_EX">
            <summary>
            Window style extended values, WS_EX_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.SM">
            <summary>
            SystemMetrics.  SM_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.SW">
            <summary>
            ShowWindow options
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.WNDCLASSEX">
            <summary>
            Contains window class information. It is used with the <see cref="M:Wpf.Ui.Interop.User32.RegisterClassEx(Wpf.Ui.Interop.User32.WNDCLASSEX@)"/> and GetClassInfoEx functions.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.cbSize">
            <summary>
            The size, in bytes, of this structure. Set this member to sizeof(WNDCLASSEX). Be sure to set this member before calling the GetClassInfoEx function.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.style">
            <summary>
            The class style(s). This member can be any combination of the Class Styles.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.lpfnWndProc">
            <summary>
            A pointer to the window procedure. You must use the CallWindowProc function to call the window procedure. For more information, see WindowProc.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.cbClsExtra">
            <summary>
            The number of extra bytes to allocate following the window-class structure. The system initializes the bytes to zero.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.cbWndExtra">
            <summary>
            The number of extra bytes to allocate following the window instance. The system initializes the bytes to zero. If an application uses WNDCLASSEX to register a dialog box created by using the CLASS directive in the resource file, it must set this member to DLGWINDOWEXTRA.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.hInstance">
            <summary>
            A handle to the instance that contains the window procedure for the class.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.hIcon">
            <summary>
            A handle to the class icon. This member must be a handle to an icon resource. If this member is NULL, the system provides a default icon.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.hCursor">
            <summary>
            A handle to the class cursor. This member must be a handle to a cursor resource. If this member is NULL, an application must explicitly set the cursor shape whenever the mouse moves into the application's window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.hbrBackground">
            <summary>
            A handle to the class background brush. This member can be a handle to the brush to be used for painting the background, or it can be a color value.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.lpszMenuName">
            <summary>
            Pointer to a null-terminated character string that specifies the resource name of the class menu, as the name appears in the resource file. If you use an integer to identify the menu, use the MAKEINTRESOURCE macro. If this member is NULL, windows belonging to this class have no default menu.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.lpszClassName">
            <summary>
            A pointer to a null-terminated string or is an atom. If this parameter is an atom, it must be a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpszClassName; the high-order word must be zero.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.hIconSm">
            <summary>
            A handle to a small icon that is associated with the window class. If this member is NULL, the system searches the icon resource specified by the hIcon member for an icon of the appropriate size to use as the small icon.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.WndProc">
            <summary>
            Delegate declaration that matches native WndProc signatures.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.WndProcHook">
            <summary>
            Delegate declaration that matches native WndProc signatures.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.MessageHandler">
            <summary>
            Delegate declaration that matches managed WndProc signatures.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            The ReleaseDC function releases a device context (DC), freeing it for use by other applications.
            The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs.
            </summary>
            <param name="hWnd">A handle to the window whose DC is to be released.</param>
            <param name="hDC">A handle to the DC to be released.</param>
            <returns>The return value indicates whether the DC was released. If the DC was released, the return value is 1. If the DC was not released, the return value is zero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.AdjustWindowRectEx(System.Windows.Rect@,Wpf.Ui.Interop.User32.WS,System.Boolean,Wpf.Ui.Interop.User32.WS_EX)">
            <summary>
            Calculates the required size of the window rectangle, based on the desired size of the client rectangle.
            The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size.
            </summary>
            <param name="lpRect">A pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area.</param>
            <param name="dwStyle">The window style of the window whose required size is to be calculated. Note that you cannot specify the WS_OVERLAPPED style.</param>
            <param name="bMenu">Indicates whether the window has a menu.</param>
            <param name="dwExStyle">The extended window style of the window whose required size is to be calculated.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.ChangeWindowMessageFilter(Wpf.Ui.Interop.User32.WM,Wpf.Ui.Interop.User32.MSGFLT)">
            <summary>
            [Using the ChangeWindowMessageFilter function is not recommended, as it has process-wide scope. Instead, use the ChangeWindowMessageFilterEx function to control access to specific windows as needed. ChangeWindowMessageFilter may not be supported in future versions of Windows.
            <para>Adds or removes a message from the User Interface Privilege Isolation(UIPI) message filter.</para>
            </summary>
            <param name="message">The message to add to or remove from the filter.</param>
            <param name="dwFlag">The action to be performed. One of the following values.</param>
            <returns><see langword="true"/> if successful; otherwise, <see langword="false"/>. To get extended error information, call <see cref="M:Wpf.Ui.Interop.Kernel32.GetLastError"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.ChangeWindowMessageFilterEx(System.IntPtr,Wpf.Ui.Interop.User32.WM,Wpf.Ui.Interop.User32.MSGFLT,Wpf.Ui.Interop.User32.CHANGEFILTERSTRUCT@)">
            <summary>
            Modifies the User Interface Privilege Isolation (UIPI) message filter for a specified window.
            </summary>
            <param name="hWnd">A handle to the window whose UIPI message filter is to be modified.</param>
            <param name="message">The message that the message filter allows through or blocks.</param>
            <param name="action">The action to be performed.</param>
            <param name="pChangeFilterStruct">Optional pointer to a <see cref="T:Wpf.Ui.Interop.User32.CHANGEFILTERSTRUCT"/> structure.</param>
            <returns>If the function succeeds, it returns <see langword="true"/>; otherwise, it returns <see langword="false"/>. To get extended error information, call <see cref="M:Wpf.Ui.Interop.Kernel32.GetLastError"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.PostMessageW(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.
            <para>Unicode declaration for <see cref="M:Wpf.Ui.Interop.User32.PostMessage(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)"/></para>
            </summary>
            <param name="hWnd">A handle to the window whose window procedure is to receive the message.</param>
            <param name="Msg">The message to be posted.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.~</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.PostMessageA(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.PostMessage(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)"/></para>
            </summary>
            <param name="hWnd">A handle to the window whose window procedure is to receive the message.</param>
            <param name="Msg">The message to be posted.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.~</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.PostMessage(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.
            </summary>
            <param name="hWnd">A handle to the window whose window procedure is to receive the message.</param>
            <param name="Msg">The message to be posted.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.~</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SendMessage(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.
            </summary>
            <param name="hWnd">A handle to the window whose window procedure will receive the message.</param>
            <param name="wMsg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.~</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.CreateWindowExW(Wpf.Ui.Interop.User32.WS_EX,System.String,System.String,Wpf.Ui.Interop.User32.WS,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Creates an overlapped, pop-up, or child window with an extended window style; otherwise,
            this function is identical to the CreateWindow function. For more information about
            creating a window and for full descriptions of the other parameters of CreateWindowEx, see CreateWindow.
            </summary>
            <param name="dwExStyle">The extended window style of the window being created.</param>
            <param name="lpClassName">A null-terminated string or a class atom created by a previous call to the RegisterClass or RegisterClassEx function.</param>
            <param name="lpWindowName">The window name. If the window style specifies a title bar, the window title pointed to by lpWindowName is displayed in the title bar.</param>
            <param name="dwStyle">The style of the window being created. This parameter can be a combination of the window style values, plus the control styles indicated in the Remarks section.</param>
            <param name="x">The initial horizontal position of the window. For an overlapped or pop-up window, the x parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates.</param>
            <param name="y">The initial vertical position of the window. For an overlapped or pop-up window, the y parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates.</param>
            <param name="nWidth">The width, in device units, of the window. For overlapped windows, nWidth is the window's width, in screen coordinates, or CW_USEDEFAULT.</param>
            <param name="nHeight">The height, in device units, of the window. For overlapped windows, nHeight is the window's height, in screen coordinates. If the nWidth parameter is set to CW_USEDEFAULT, the system ignores nHeight.</param>
            <param name="hWndParent">A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</param>
            <param name="hMenu">A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, hMenu identifies the menu to be used with the window; it can be NULL if the class menu is to be used.</param>
            <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
            <param name="lpParam">Pointer to a value to be passed to the window through the CREATESTRUCT structure (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message. This message is sent to the created window by this function before it returns.</param>
            <returns>If the function succeeds, the return value is a handle to the new window.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.CreateWindowEx(Wpf.Ui.Interop.User32.WS_EX,System.String,System.String,Wpf.Ui.Interop.User32.WS,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Creates an overlapped, pop-up, or child window with an extended window style; otherwise,
            this function is identical to the CreateWindow function. For more information about
            creating a window and for full descriptions of the other parameters of CreateWindowEx, see CreateWindow.
            </summary>
            <param name="dwExStyle">The extended window style of the window being created.</param>
            <param name="lpClassName">A null-terminated string or a class atom created by a previous call to the RegisterClass or RegisterClassEx function.</param>
            <param name="lpWindowName">The window name. If the window style specifies a title bar, the window title pointed to by lpWindowName is displayed in the title bar.</param>
            <param name="dwStyle">The style of the window being created. This parameter can be a combination of the window style values, plus the control styles indicated in the Remarks section.</param>
            <param name="x">The initial horizontal position of the window. For an overlapped or pop-up window, the x parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates.</param>
            <param name="y">The initial vertical position of the window. For an overlapped or pop-up window, the y parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates.</param>
            <param name="nWidth">The width, in device units, of the window. For overlapped windows, nWidth is the window's width, in screen coordinates, or CW_USEDEFAULT.</param>
            <param name="nHeight">The height, in device units, of the window. For overlapped windows, nHeight is the window's height, in screen coordinates. If the nWidth parameter is set to CW_USEDEFAULT, the system ignores nHeight.</param>
            <param name="hWndParent">A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</param>
            <param name="hMenu">A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, hMenu identifies the menu to be used with the window; it can be NULL if the class menu is to be used.</param>
            <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
            <param name="lpParam">Pointer to a value to be passed to the window through the CREATESTRUCT structure (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message. This message is sent to the created window by this function before it returns.</param>
            <returns>If the function succeeds, the return value is a handle to the new window.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.RegisterClassExW(Wpf.Ui.Interop.User32.WNDCLASSEX@)">
            <summary>
            Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.
            <para>Unicode declaration for <see cref="M:Wpf.Ui.Interop.User32.RegisterClassEx(Wpf.Ui.Interop.User32.WNDCLASSEX@)"/></para>
            </summary>
            <param name="lpwcx">A pointer to a <see cref="T:Wpf.Ui.Interop.User32.WNDCLASSEX"/> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
            <returns>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.RegisterClassExA(Wpf.Ui.Interop.User32.WNDCLASSEX@)">
            <summary>
            Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.RegisterClassEx(Wpf.Ui.Interop.User32.WNDCLASSEX@)"/></para>
            </summary>
            <param name="lpwcx">A pointer to a <see cref="T:Wpf.Ui.Interop.User32.WNDCLASSEX"/> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
            <returns>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.RegisterClassEx(Wpf.Ui.Interop.User32.WNDCLASSEX@)">
            <summary>
            Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.
            </summary>
            <param name="lpwcx">A pointer to a <see cref="T:Wpf.Ui.Interop.User32.WNDCLASSEX"/> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
            <returns>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.DefWindowProcW(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Calls the default window procedure to provide default processing for any window messages that an application does not process.
            This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure.
            <para>Unicode declaration for <see cref="M:Wpf.Ui.Interop.User32.DefWindowProc(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)"/></para>
            </summary>
            <param name="hWnd">A handle to the window procedure that received the message.</param>
            <param name="Msg">The message.</param>
            <param name="wParam">Additional message information. The content of this parameter depends on the value of the Msg parameter.</param>
            <param name="lParam">Additional message information. The content of this parameter depends on the value of the Msg parameter.~</param>
            <returns>The return value is the result of the message processing and depends on the message.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.DefWindowProcA(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Calls the default window procedure to provide default processing for any window messages that an application does not process.
            This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure.
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.DefWindowProc(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)"/></para>
            </summary>
            <param name="hWnd">A handle to the window procedure that received the message.</param>
            <param name="Msg">The message.</param>
            <param name="wParam">Additional message information. The content of this parameter depends on the value of the Msg parameter.</param>
            <param name="lParam">Additional message information. The content of this parameter depends on the value of the Msg parameter.~</param>
            <returns>The return value is the result of the message processing and depends on the message.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.DefWindowProc(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Calls the default window procedure to provide default processing for any window messages that an application does not process.
            This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure.
            </summary>
            <param name="hWnd">A handle to the window procedure that received the message.</param>
            <param name="Msg">The message.</param>
            <param name="wParam">Additional message information. The content of this parameter depends on the value of the Msg parameter.</param>
            <param name="lParam">Additional message information. The content of this parameter depends on the value of the Msg parameter.~</param>
            <returns>The return value is the result of the message processing and depends on the message.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowLongW(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the 32-bit (DWORD) value at the specified offset into the extra window memory.
            <para>If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/> function.</para>
            <para>Unicode declaration for <see cref="M:Wpf.Ui.Interop.User32.GetWindowLong(System.IntPtr,System.Int32)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be retrieved.</param>
            <returns>If the function succeeds, the return value is the requested value.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowLongA(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the 32-bit (DWORD) value at the specified offset into the extra window memory.
            <para>If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/> function.</para>
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.GetWindowLong(System.IntPtr,System.Int32)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be retrieved.</param>
            <returns>If the function succeeds, the return value is the requested value.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowLong(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the 32-bit (DWORD) value at the specified offset into the extra window memory.
            <para>If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/> function.</para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be retrieved.</param>
            <returns>If the function succeeds, the return value is the requested value.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowLong(System.IntPtr,Wpf.Ui.Interop.User32.GWL)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the 32-bit (DWORD) value at the specified offset into the extra window memory.
            <para>If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/> function.</para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be retrieved.</param>
            <returns>If the function succeeds, the return value is the requested value.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowLongPtrW(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.
            <para>Unicode declaration for <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be retrieved.</param>
            <returns>If the function succeeds, the return value is the requested value.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowLongPtrA(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be retrieved.</param>
            <returns>If the function succeeds, the return value is the requested value.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be retrieved.</param>
            <returns>If the function succeeds, the return value is the requested value.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLongW(System.IntPtr,System.Int32,System.Int64)">
            <summary>
            Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.
            <para>Note: This function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the SetWindowLongPtr function.</para>
            <para>Unicode declaration for <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLongA(System.IntPtr,System.Int32,System.Int64)">
            <summary>
            Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.
            <para>Note: This function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the SetWindowLongPtr function.</para>
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLong(System.IntPtr,System.Int32,System.Int64)">
            <summary>
            Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.
            <para>Note: This function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the SetWindowLongPtr function.</para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLong(System.IntPtr,Wpf.Ui.Interop.User32.GWL,System.Int64)">
            <summary>
            Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.
            <para>Note: This function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the SetWindowLongPtr function.</para>
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLong(System.IntPtr,Wpf.Ui.Interop.User32.GWL,Wpf.Ui.Interop.User32.WS)">
            <summary>
            Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.
            <para>Note: This function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the SetWindowLongPtr function.</para>
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.</param>
            <param name="dwNewLong">New window style.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLongPtrW(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory.
            <para>Unicode declaration for <see cref="M:Wpf.Ui.Interop.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified offset.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLongPtrA(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory.
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified offset.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory.
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified offset.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLong(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Changes an attribute of the specified window.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.DestroyIcon(System.IntPtr)">
            <summary>
            Destroys an icon and frees any memory the icon occupied.
            </summary>
            <param name="handle">A handle to the icon to be destroyed. The icon must not be in use.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.IsWindow(System.IntPtr)">
            <summary>
            Determines whether the specified window handle identifies an existing window.
            </summary>
            <param name="hWnd">A handle to the window to be tested.</param>
            <returns>If the window handle identifies an existing window, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.DestroyWindow(System.IntPtr)">
            <summary>
            Destroys the specified window. The function sends WM_DESTROY and WM_NCDESTROY messages to the window to deactivate it and remove the keyboard focus from it.
            </summary>
            <param name="hWnd">A handle to the window to be destroyed.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowPlacement(System.IntPtr,Wpf.Ui.Interop.User32.WINDOWPLACEMENT)">
            <summary>
            Retrieves the show state and the restored, minimized, and maximized positions of the specified window.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="lpwndpl">A pointer to the <see cref="T:Wpf.Ui.Interop.User32.WINDOWPLACEMENT"/> structure that receives the show state and position information. Before calling GetWindowPlacement, set the length member to sizeof(WINDOWPLACEMENT). GetWindowPlacement fails if lpwndpl-> length is not set correctly.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowRect(System.IntPtr,System.Windows.Rect@)">
            <summary>
            Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="lpRect">A pointer to a RECT structure that receives the screen coordinates of the upper-left and lower-right corners of the window.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.IsWindowVisible(System.IntPtr)">
            <summary>
            Determines the visibility state of the specified window.
            </summary>
            <param name="hWnd">A handle to the window to be tested.</param>
            <returns>If the specified window, its parent window, its parent's parent window, and so forth, have the WS_VISIBLE style, the return value is nonzero. Otherwise, the return value is zero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.IsWindowEnabled(System.IntPtr)">
            <summary>
            Determines whether the specified window is enabled for mouse and keyboard input.
            </summary>
            <param name="hWnd">A handle to the window to be tested.</param>
            <returns>If the window is enabled, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.MonitorFromWindow(System.IntPtr,System.UInt32)">
            <summary>
            The MonitorFromWindow function retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window.
            </summary>
            <param name="hWnd">A handle to the window of interest.</param>
            <param name="dwFlags">Determines the function's return value if the window does not intersect any display monitor.</param>
            <returns>If the window intersects one or more display monitor rectangles, the return value is an HMONITOR handle to the display monitor that has the largest area of intersection with the window.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetSystemMetrics(Wpf.Ui.Interop.User32.SM)">
            <summary>
            Retrieves the specified system metric or system configuration setting.
            Note that all dimensions retrieved by GetSystemMetrics are in pixels.
            </summary>
            <param name="nIndex">The system metric or configuration setting to be retrieved. This parameter can be one of the <see cref="T:Wpf.Ui.Interop.User32.SM"/> values.
            Note that all SM_CX* values are widths and all SM_CY* values are heights. Also note that all settings designed to return Boolean data represent <see langword="true"/> as any nonzero value, and <see langword="false"/> as a zero value.</param>
            <returns>If the function succeeds, the return value is the requested system metric or configuration setting.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.RegisterWindowMessageW(System.String)">
            <summary>
            Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.
            <para>Unicode declaration for <see cref="M:Wpf.Ui.Interop.User32.RegisterWindowMessage(System.String)"/></para>
            </summary>
            <param name="lpString">The message to be registered.</param>
            <returns>If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.RegisterWindowMessageA(System.String)">
            <summary>
            Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.RegisterWindowMessage(System.String)"/></para>
            </summary>
            <param name="lpString">The message to be registered.</param>
            <returns>If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.RegisterWindowMessage(System.String)">
            <summary>
            Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.
            </summary>
            <param name="lpString">The message to be registered.</param>
            <returns>If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetActiveWindow(System.IntPtr)">
            <summary>
            Activates a window. The window must be attached to the calling thread's message queue.
            </summary>
            <param name="hWnd">A handle to the top-level window to be activated.</param>
            <returns>If the function succeeds, the return value is the handle to the window that was previously active.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetForegroundWindow(System.IntPtr)">
            <summary>
            Brings the thread that created the specified window into the foreground and activates the window.
            Keyboard input is directed to the window, and various visual cues are changed for the user.
            The system assigns a slightly higher priority to the thread that created the foreground window than it does to other threads.
            </summary>
            <param name="hWnd">A handle to the window that should be activated and brought to the foreground.</param>
            <returns>If the window was brought to the foreground, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetCursorPos(Wpf.Ui.Interop.WinDef.POINT@)">
            <summary>
            Retrieves the position of the mouse cursor, in screen coordinates.
            </summary>
            <param name="lpPoint">A pointer to a <see cref="T:Wpf.Ui.Interop.WinDef.POINT"/> structure that receives the screen coordinates of the cursor.</param>
            <returns>Returns nonzero if successful or zero otherwise. To get extended error information, call <see cref="M:Wpf.Ui.Interop.Kernel32.GetLastError"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.EnableMenuItem(System.IntPtr,Wpf.Ui.Interop.User32.SC,Wpf.Ui.Interop.User32.MF)">
            <summary>
            Enables, disables, or grays the specified menu item.
            </summary>
            <param name="hMenu">A handle to the menu.</param>
            <param name="uIDEnableItem">The menu item to be enabled, disabled, or grayed, as determined by the uEnable parameter.</param>
            <param name="uEnable">Controls the interpretation of the uIDEnableItem parameter and indicate whether the menu item is enabled, disabled, or grayed.</param>
            <returns>The return value specifies the previous state of the menu item (it is either MF_DISABLED, MF_ENABLED, or MF_GRAYED). If the menu item does not exist, the return value is -1 (<see cref="F:Wpf.Ui.Interop.User32.MF.DOES_NOT_EXIST"/>).</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            The SetWindowRgn function sets the window region of a window. The window region determines the area within the window where the system permits drawing. The system does not display any portion of a window that lies outside of the window region.
            </summary>
            <param name="hWnd">A handle to the window whose window region is to be set.</param>
            <param name="hRgn">A handle to a region. The function sets the window region of the window to this region.</param>
            <param name="bRedraw">Specifies whether the system redraws the window after setting the window region. If bRedraw is <see langword="true"/>, the system does so; otherwise, it does not.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Native method returned HRESULT.</exception>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Wpf.Ui.Interop.User32.SWP)">
            <summary>
            Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="hWndInsertAfter">A handle to the window to precede the positioned window in the Z order.</param>
            <param name="x">The new position of the left side of the window, in client coordinates.</param>
            <param name="y">The new position of the top of the window, in client coordinates.</param>
            <param name="cx">The new width of the window, in pixels.</param>
            <param name="cy">The new height of the window, in pixels.</param>
            <param name="uFlags">The window sizing and positioning flags.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetProcessDPIAware">
            <summary>
            Sets the process-default DPI awareness to system-DPI awareness. This is equivalent to calling SetProcessDpiAwarenessContext with a DPI_AWARENESS_CONTEXT value of DPI_AWARENESS_CONTEXT_SYSTEM_AWARE.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowCompositionAttribute(System.IntPtr,Wpf.Ui.Interop.User32.WINCOMPATTRDATA@)">
            <summary>
            Sets various information regarding DWM window attributes.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowCompositionAttribute(System.IntPtr,Wpf.Ui.Interop.User32.WINCOMPATTRDATA@)">
            <summary>
            Sets various information regarding DWM window attributes.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetDpiForWindow(System.IntPtr)">
            <summary>
            Returns the dots per inch (dpi) value for the specified window.
            </summary>
            <param name="hWnd">The window that you want to get information about.</param>
            <returns>The DPI for the window, which depends on the DPI_AWARENESS of the window.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetDpiForWindow(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Returns the dots per inch (dpi) value for the specified window.
            </summary>
            <param name="hwnd">The window that you want to get information about.</param>
            <returns>The DPI for the window, which depends on the DPI_AWARENESS of the window.</returns>
        </member>
        <member name="T:Wpf.Ui.Interop.UxTheme.MARGINS">
            <summary>
            Returned by the GetThemeMargins function to define the margins of windows that have visual styles applied.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.MARGINS.cxLeftWidth">
            <summary>
            Width of left border that retains its size.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.MARGINS.cxRightWidth">
            <summary>
            Width of right border that retains its size.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.MARGINS.cyTopHeight">
            <summary>
            Height of top border that retains its size.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.MARGINS.cyBottomHeight">
            <summary>
            Height of bottom border that retains its size.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.UxTheme.WINDOWTHEMEATTRIBUTETYPE">
            <summary>
            Specifies the type of visual style attribute to set on a window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.WINDOWTHEMEATTRIBUTETYPE.WTA_NONCLIENT">
            <summary>
            Non-client area window attributes will be set.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.UxTheme.WTNCA">
            <summary>
            WindowThemeNonClientAttributes
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.WTNCA.NODRAWCAPTION">
            <summary>
            Prevents the window caption from being drawn.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.WTNCA.NODRAWICON">
            <summary>
            Prevents the system icon from being drawn.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.WTNCA.NOSYSMENU">
            <summary>
            Prevents the system icon menu from appearing.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.WTNCA.NOMIRRORHELP">
            <summary>
            Prevents mirroring of the question mark, even in right-to-left (RTL) layout.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.WTNCA.VALIDBITS">
            <summary>
            A mask that contains all the valid bits.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.UxTheme.WTA_OPTIONS">
            <summary>
            Defines options that are used to set window visual style attributes.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.WTA_OPTIONS.dwFlags">
            <summary>
            A combination of flags that modify window visual style attributes.
            Can be a combination of the WTNCA constants.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.WTA_OPTIONS.dwMask">
            <summary>
            A bitmask that describes how the values specified in dwFlags should be applied.
            If the bit corresponding to a value in dwFlags is 0, that flag will be removed.
            If the bit is 1, the flag will be added.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UxTheme.SetWindowThemeAttribute(System.IntPtr,Wpf.Ui.Interop.UxTheme.WINDOWTHEMEATTRIBUTETYPE,Wpf.Ui.Interop.UxTheme.WTA_OPTIONS@,System.UInt32)">
            <summary>
            Sets attributes to control how visual styles are applied to a specified window.
            </summary>
            <param name="hWnd">
            Handle to a window to apply changes to.
            </param>
            <param name="eAttribute">
            Value of type WINDOWTHEMEATTRIBUTETYPE that specifies the type of attribute to set.
            The value of this parameter determines the type of data that should be passed in the pvAttribute parameter.
            Can be the following value:
            <list>WTA_NONCLIENT (Specifies non-client related attributes).</list>
            pvAttribute must be a pointer of type WTA_OPTIONS.
            </param>
            <param name="pvAttribute">
            A pointer that specifies attributes to set. Type is determined by the value of the eAttribute value.
            </param>
            <param name="cbAttribute">
            Specifies the size, in bytes, of the data pointed to by pvAttribute.
            </param>
        </member>
        <member name="M:Wpf.Ui.Interop.UxTheme.IsThemeActive">
            <summary>
            Tests if a visual style for the current application is active.
            </summary>
            <returns><see langword="true"/> if a visual style is enabled, and windows with visual styles applied should call OpenThemeData to start using theme drawing services.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UxTheme.GetCurrentThemeName(System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32)">
            <summary>
            Retrieves the name of the current visual style, and optionally retrieves the color scheme name and size name.
            </summary>
            <param name="pszThemeFileName">Pointer to a string that receives the theme path and file name.</param>
            <param name="dwMaxNameChars">Value of type int that contains the maximum number of characters allowed in the theme file name.</param>
            <param name="pszColorBuff">Pointer to a string that receives the color scheme name. This parameter may be set to NULL.</param>
            <param name="cchMaxColorChars">Value of type int that contains the maximum number of characters allowed in the color scheme name.</param>
            <param name="pszSizeBuff">Pointer to a string that receives the size name. This parameter may be set to NULL.</param>
            <param name="cchMaxSizeChars">Value of type int that contains the maximum number of characters allowed in the size name.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="T:Wpf.Ui.Interop.WinDef.POINT">
            <summary>
            The POINT structure defines the x- and y-coordinates of a point.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.WinDef.POINT.x">
            <summary>
            Specifies the x-coordinate of the point.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.WinDef.POINT.y">
            <summary>
            Specifies the y-coordinate of the point.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.WinDef.POINTL">
            <summary>
            The <see cref="T:Wpf.Ui.Interop.WinDef.POINTL"/> structure defines the x- and y-coordinates of a point.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.WinDef.POINTL.x">
            <summary>
            Specifies the x-coordinate of the point.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.WinDef.POINTL.y">
            <summary>
            Specifies the y-coordinate of the point.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.WinDef.RECT">
            <summary>
            The RECT structure defines a rectangle by the coordinates of its upper-left and lower-right corners.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECT.Left">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECT.Right">
            <summary>
            Gets or sets the x-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECT.Top">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECT.Bottom">
            <summary>
            Gets or sets the y-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECT.Width">
            <summary>
            Gets the width of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECT.Height">
            <summary>
            Gets the height of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECT.Position">
            <summary>
            Gets the position of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECT.Size">
            <summary>
            Gets the size of the rectangle.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.WinDef.RECT.Offset(System.Int32,System.Int32)">
            <summary>
            Sets offset of the rectangle.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.WinDef.RECT.Union(Wpf.Ui.Interop.WinDef.RECT,Wpf.Ui.Interop.WinDef.RECT)">
            <summary>
            Combines two RECTs.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.WinDef.RECT.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Interop.WinDef.RECT.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.Interop.WinDef.RECTL">
            <summary>
            The RECTL structure defines a rectangle by the coordinates of its upper-left and lower-right corners.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECTL.Left">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECTL.Right">
            <summary>
            Gets or sets the x-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECTL.Top">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECTL.Bottom">
            <summary>
            Gets or sets the y-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECTL.Width">
            <summary>
            Gets the width of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECTL.Height">
            <summary>
            Gets the height of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECTL.Position">
            <summary>
            Gets the position of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECTL.Size">
            <summary>
            Gets the size of the rectangle.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.WinDef.RECTL.Offset(System.Int32,System.Int32)">
            <summary>
            Sets offset of the rectangle.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.WinDef.RECTL.Union(Wpf.Ui.Interop.WinDef.RECTL,Wpf.Ui.Interop.WinDef.RECTL)">
            <summary>
            Combines two RECTLs
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.WinDef.RECTL.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Interop.WinDef.RECTL.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.Interop.WinDef.SIZE">
            <summary>
            The SIZE structure defines the width and height of a rectangle.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.WinDef.SIZE.cx">
            <summary>
            Specifies the rectangle's width. The units depend on which function uses this structure.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.WinDef.SIZE.cy">
            <summary>
            Specifies the rectangle's height. The units depend on which function uses this structure.
            </summary>
        </member>
        <member name="T:Wpf.Ui.ISnackbarService">
            <summary>
            Represents a contract with the service that provides global <see cref="T:Wpf.Ui.Controls.Snackbar"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.ISnackbarService.DefaultTimeOut">
            <summary>
            Gets or sets a time for which the <see cref="T:Wpf.Ui.Controls.Snackbar"/> should be visible. (By default 2 seconds)
            </summary>
        </member>
        <member name="M:Wpf.Ui.ISnackbarService.SetSnackbarPresenter(Wpf.Ui.Controls.SnackbarPresenter)">
            <summary>
            Sets the <see cref="T:Wpf.Ui.Controls.SnackbarPresenter"/>
            </summary>
            <param name="contentPresenter"><see cref="T:System.Windows.Controls.ContentPresenter"/> inside of which the snackbar will be placed. The new <see cref="T:Wpf.Ui.Controls.Snackbar"/> will replace the current <see cref="P:System.Windows.Controls.ContentPresenter.Content"/>.</param>
        </member>
        <member name="M:Wpf.Ui.ISnackbarService.GetSnackbarPresenter">
            <summary>
            Provides direct access to the <see cref="T:System.Windows.Controls.ContentPresenter"/>
            </summary>
            <returns><see cref="T:Wpf.Ui.Controls.Snackbar"/> currently in use.</returns>
        </member>
        <member name="M:Wpf.Ui.ISnackbarService.Show(System.String,System.String,Wpf.Ui.Controls.ControlAppearance,Wpf.Ui.Controls.IconElement,System.TimeSpan)">
            <summary>
            Shows the snackbar. If it is already visible, firstly hides it for a moment, changes its content, and then shows it again.
            </summary>
            <param name="title">Name displayed on top of snackbar.</param>
            <param name="message">Message inside the snackbar.</param>
            <param name="appearance">Display style.</param>
            <param name="icon">Additional icon on the left.</param>
            <param name="timeout">The time after which the snackbar should disappear.</param>
        </member>
        <member name="T:Wpf.Ui.ITaskBarService">
            <summary>
            Represents a contract with a service that provides methods for manipulating the taskbar.
            </summary>
        </member>
        <member name="M:Wpf.Ui.ITaskBarService.GetState(System.IntPtr)">
            <summary>
            Gets taskbar state of the selected window handle.
            </summary>
            <param name="hWnd">Window handle.</param>
            <returns>The current state of system TaskBar.</returns>
        </member>
        <member name="M:Wpf.Ui.ITaskBarService.GetState(System.Windows.Window)">
            <summary>
            Gets taskbar state of the selected window.
            </summary>
            <param name="window">Selected window.</param>
            <returns>The current state of system TaskBar.</returns>
        </member>
        <member name="M:Wpf.Ui.ITaskBarService.SetState(System.IntPtr,Wpf.Ui.TaskBar.TaskBarProgressState)">
            <summary>
            Sets taskbar state of the selected window handle.
            </summary>
            <param name="hWnd">Window handle to modify.</param>
            <param name="taskBarProgressState">Progress sate to set.</param>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Wpf.Ui.ITaskBarService.SetValue(System.IntPtr,Wpf.Ui.TaskBar.TaskBarProgressState,System.Int32,System.Int32)">
            <summary>
            Sets taskbar value of the selected window handle.
            </summary>
            <param name="hWnd">Window handle to modify.</param>
            <param name="taskBarProgressState">Progress sate to set.</param>
            <param name="current">Current value to display.</param>
            <param name="total">Maximum number for division.</param>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Wpf.Ui.ITaskBarService.SetValue(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Sets taskbar value of the selected window handle.
            </summary>
            <param name="hWnd">Window handle to modify.</param>
            <param name="current">Current value to display.</param>
            <param name="max">Maximum number for division.</param>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Wpf.Ui.ITaskBarService.SetState(System.Windows.Window,Wpf.Ui.TaskBar.TaskBarProgressState)">
            <summary>
            Sets taskbar state of the selected window.
            </summary>
            <param name="window">Window to modify.</param>
            <param name="taskBarProgressState">Progress sate to set.</param>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Wpf.Ui.ITaskBarService.SetValue(System.Windows.Window,Wpf.Ui.TaskBar.TaskBarProgressState,System.Int32,System.Int32)">
            <summary>
            Sets taskbar value of the selected window.
            </summary>
            <param name="window">Window to modify.</param>
            <param name="taskBarProgressState">Progress sate to set.</param>
            <param name="current">Current value to display.</param>
            <param name="total">Maximum number for division.</param>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Wpf.Ui.ITaskBarService.SetValue(System.Windows.Window,System.Int32,System.Int32)">
            <summary>
            Sets taskbar value of the selected window.
            </summary>
            <param name="window">Window to modify.</param>
            <param name="current">Current value to display.</param>
            <param name="total">Maximum number for division.</param>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Wpf.Ui.IThemeService">
            <summary>
            Represents a contract with a service that provides tools for manipulating the theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.IThemeService.GetTheme">
            <summary>
            Gets current application theme.
            </summary>
            <returns>Currently set application theme.</returns>
        </member>
        <member name="M:Wpf.Ui.IThemeService.GetSystemTheme">
            <summary>
            Gets current system theme.
            </summary>
            <returns>Currently set Windows theme.</returns>
        </member>
        <member name="M:Wpf.Ui.IThemeService.GetNativeSystemTheme">
            <summary>
            Gets current system theme.
            </summary>
            <returns>Currently set Windows theme using system enumeration.</returns>
        </member>
        <member name="M:Wpf.Ui.IThemeService.SetTheme(Wpf.Ui.Appearance.ApplicationTheme)">
            <summary>
            Sets current application theme.
            </summary>
            <param name="applicationTheme">Theme type to set.</param>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Wpf.Ui.IThemeService.SetSystemAccent">
            <summary>
            Sets currently used Windows OS accent.
            </summary>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Wpf.Ui.IThemeService.SetAccent(System.Windows.Media.Color)">
            <summary>
            Sets current application accent.
            </summary>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Wpf.Ui.IThemeService.SetAccent(System.Windows.Media.SolidColorBrush)">
            <summary>
            Sets current application accent.
            </summary>
            <returns><see langword="true"/> if the operation succeeds. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Wpf.Ui.Markup.ControlsDictionary">
            <summary>
            Provides a dictionary implementation that contains <c>WPF UI</c> controls resources used by components and other elements of a WPF application.
            </summary>
            <example>
            <code lang="xml">
            &lt;Application
                xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"&gt;
                &lt;Application.Resources&gt;
                    &lt;ResourceDictionary&gt;
                        &lt;ResourceDictionary.MergedDictionaries&gt;
                            &lt;ui:ControlsDictionary /&gt;
                        &lt;/ResourceDictionary.MergedDictionaries&gt;
                    &lt;/ResourceDictionary&gt;
                &lt;/Application.Resources&gt;
            &lt;/Application&gt;
            </code>
            </example>
        </member>
        <member name="M:Wpf.Ui.Markup.ControlsDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Markup.ControlsDictionary"/> class.
            Default constructor defining <see cref="P:System.Windows.ResourceDictionary.Source"/> of the <c>WPF UI</c> controls dictionary.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Markup.Design">
            <summary>
            Custom design time attributes based on Marcin Najder implementation.
            </summary>
            <example>
            <code lang="xml">
            &lt;ui:FluentWindow
                xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
                ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
                ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"&gt;
                &lt;Button Content="Hello World" /&gt;
            &lt;/FluentWindow&gt;
            </code>
            </example>
        </member>
        <member name="P:Wpf.Ui.Markup.Design.InDesignMode">
            <summary>
            Gets a value indicating whether the framework is in design-time mode. (Caliburn.Micro implementation)
            </summary>
        </member>
        <member name="M:Wpf.Ui.Markup.Design.GetBackground(System.Windows.DependencyObject)">
            <summary>Helper for getting <see cref="F:Wpf.Ui.Markup.Design.BackgroundProperty"/> from <paramref name="dependencyObject"/>.</summary>
            <param name="dependencyObject"><see cref="T:System.Windows.DependencyObject"/> to read <see cref="F:Wpf.Ui.Markup.Design.BackgroundProperty"/> from.</param>
            <returns>Background property value.</returns>
        </member>
        <member name="M:Wpf.Ui.Markup.Design.SetBackground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Helper for setting <see cref="F:Wpf.Ui.Markup.Design.BackgroundProperty"/> on <paramref name="dependencyObject"/>.</summary>
            <param name="dependencyObject"><see cref="T:System.Windows.DependencyObject"/> to set <see cref="F:Wpf.Ui.Markup.Design.BackgroundProperty"/> on.</param>
            <param name="value">Background property value.</param>
        </member>
        <member name="M:Wpf.Ui.Markup.Design.GetForeground(System.Windows.DependencyObject)">
            <summary>Helper for getting <see cref="F:Wpf.Ui.Markup.Design.ForegroundProperty"/> from <paramref name="dependencyObject"/>.</summary>
            <param name="dependencyObject"><see cref="T:System.Windows.DependencyObject"/> to read <see cref="F:Wpf.Ui.Markup.Design.ForegroundProperty"/> from.</param>
            <returns>Foreground property value.</returns>
        </member>
        <member name="M:Wpf.Ui.Markup.Design.SetForeground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Helper for setting <see cref="F:Wpf.Ui.Markup.Design.ForegroundProperty"/> on <paramref name="dependencyObject"/>.</summary>
            <param name="dependencyObject"><see cref="T:System.Windows.DependencyObject"/> to set <see cref="F:Wpf.Ui.Markup.Design.ForegroundProperty"/> on.</param>
            <param name="value">Foreground property value.</param>
        </member>
        <member name="T:Wpf.Ui.Markup.FontIconExtension">
            <summary>
            Custom <see cref="T:System.Windows.Markup.MarkupExtension"/> which can provide <see cref="T:Wpf.Ui.Controls.FontIcon"/>.
            </summary>
            <example>
            <code lang="xml">
            &lt;ui:Button
                Appearance="Primary"
                Content="WPF UI button with font icon"
                Icon="{ui:FontIcon '&#x1F308;'}" /&gt;
            </code>
            <code lang="xml">
            &lt;ui:Button Icon="{ui:FontIcon '&amp;#x1F308;'}" /&gt;
            </code>
            <code lang="xml">
            &lt;ui:HyperlinkButton Icon="{ui:FontIcon '&amp;#x1F308;'}" /&gt;
            </code>
            <code lang="xml">
            &lt;ui:TitleBar Icon="{ui:FontIcon '&amp;#x1F308;'}" /&gt;
            </code>
            </example>
        </member>
        <member name="T:Wpf.Ui.Markup.ImageIconExtension">
            <summary>
            Custom <see cref="T:System.Windows.Markup.MarkupExtension"/> which can provide <see cref="T:Wpf.Ui.Controls.ImageIcon"/>.
            </summary>
            <example>
            <code lang="xml">
            &lt;ui:Button
                Appearance="Primary"
                Content="WPF UI button with font icon"
                Icon="{ui:ImageIcon '/my-icon.png'}" /&gt;
            </code>
            <code lang="xml">
            &lt;ui:Button Icon="{ui:ImageIcon 'pack://application:,,,/Assets/wpfui.png'}" /&gt;
            </code>
            <code lang="xml">
            &lt;ui:HyperlinkButton Icon="{ui:ImageIcon 'pack://application:,,,/Assets/wpfui.png'}" /&gt;
            </code>
            <code lang="xml">
            &lt;ui:TitleBar Icon="{ui:ImageIcon 'pack://application:,,,/Assets/wpfui.png'}" /&gt;
            </code>
            </example>
        </member>
        <member name="T:Wpf.Ui.Markup.SymbolIconExtension">
            <summary>
            Custom <see cref="T:System.Windows.Markup.MarkupExtension"/> which can provide <see cref="T:Wpf.Ui.Controls.SymbolIcon"/>.
            </summary>
            <example>
            <code lang="xml">
            &lt;ui:Button
                Appearance="Primary"
                Content="WPF UI button with font icon"
                Icon="{ui:SymbolIcon Symbol=Fluent24}" /&gt;
            </code>
            <code lang="xml">
            &lt;ui:Button Icon="{ui:SymbolIcon Fluent24}" /&gt;
            </code>
            <code lang="xml">
            &lt;ui:HyperlinkButton Icon="{ui:SymbolIcon Fluent24}" /&gt;
            </code>
            <code lang="xml">
            &lt;ui:TitleBar Icon="{ui:SymbolIcon Fluent24}" /&gt;
            </code>
            </example>
        </member>
        <member name="T:Wpf.Ui.Markup.ThemeResource">
            <summary>
            Collection of theme resources.
            </summary>
            <example>
            <code lang="xml">
            &lt;ui:TextBox Foreground={ui:ThemeResource TextFillColorSecondaryBrush} /&gt;
            </code>
            </example>
        </member>
        <member name="F:Wpf.Ui.Markup.ThemeResource.Unknown">
            <summary>
            Unspecified theme resource.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Markup.ThemeResource.ControlElevationBorderBrush">
            <summary>
            Gradient <see cref="T:System.Windows.Media.Brush"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Markup.ThemeResource.CircleElevationBorderBrush">
            <summary>
            Gradient <see cref="T:System.Windows.Media.Brush"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Markup.ThemeResource.AccentControlElevationBorderBrush">
            <summary>
            Gradient <see cref="T:System.Windows.Media.Brush"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Markup.ThemeResourceExtension">
            <summary>
            Class for Xaml markup extension for static resource references.
            </summary>
            <example>
            <code lang="xml">
            &lt;ui:Button
                Appearance="Primary"
                Content="WPF UI button with font icon"
                Foreground={ui:ThemeResource SystemAccentColorPrimaryBrush} /&gt;
            </code>
            <code lang="xml">
            &lt;ui:TextBox Foreground={ui:ThemeResource TextFillColorSecondaryBrush} /&gt;
            </code>
            </example>
        </member>
        <member name="M:Wpf.Ui.Markup.ThemeResourceExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Markup.ThemeResourceExtension"/> class.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Markup.ThemeResourceExtension.#ctor(Wpf.Ui.Markup.ThemeResource)">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.Markup.ThemeResourceExtension"/> class.
            Takes the resource key that this is a static reference to.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Markup.ThemesDictionary">
            <summary>
            Provides a dictionary implementation that contains <c>WPF UI</c> theme resources used by components and other elements of a WPF application.
            </summary>
            <example>
            <code lang="xml">
            &lt;Application
                xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"&gt;
                &lt;Application.Resources&gt;
                    &lt;ResourceDictionary&gt;
                        &lt;ResourceDictionary.MergedDictionaries&gt;
                            &lt;ui:ThemesDictionary Theme = "Dark" /&gt;
                        &lt;/ResourceDictionary.MergedDictionaries&gt;
                    &lt;/ResourceDictionary&gt;
                &lt;/Application.Resources&gt;
            &lt;/Application&gt;
            </code>
            </example>
        </member>
        <member name="P:Wpf.Ui.Markup.ThemesDictionary.Theme">
            <summary>
            Sets the default application theme.
            </summary>
        </member>
        <member name="T:Wpf.Ui.NavigationService">
            <summary>
            A service that provides methods related to navigation.
            </summary>
        </member>
        <member name="M:Wpf.Ui.NavigationService.#ctor(Wpf.Ui.Abstractions.INavigationViewPageProvider)">
            <summary>
            A service that provides methods related to navigation.
            </summary>
        </member>
        <member name="P:Wpf.Ui.NavigationService.NavigationControl">
            <summary>
            Gets or sets the control representing navigation.
            </summary>
        </member>
        <member name="M:Wpf.Ui.NavigationService.GetNavigationControl">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.NavigationService.SetNavigationControl(Wpf.Ui.Controls.INavigationView)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.NavigationService.Navigate(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.NavigationService.Navigate(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.NavigationService.Navigate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.NavigationService.Navigate(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.NavigationService.GoBack">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.NavigationService.NavigateWithHierarchy(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.NavigationService.NavigateWithHierarchy(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.SimpleContentDialogCreateOptions">
            <summary>
            Set of properties used when creating a new simple content dialog.
            </summary>
        </member>
        <member name="P:Wpf.Ui.SimpleContentDialogCreateOptions.Title">
            <summary>
            Gets or sets a name at the top of the content dialog.
            </summary>
        </member>
        <member name="P:Wpf.Ui.SimpleContentDialogCreateOptions.Content">
            <summary>
            Gets or sets a message displayed in the content dialog.
            </summary>
        </member>
        <member name="P:Wpf.Ui.SimpleContentDialogCreateOptions.CloseButtonText">
            <summary>
            Gets or sets the name of the button that closes the content dialog.
            </summary>
        </member>
        <member name="P:Wpf.Ui.SimpleContentDialogCreateOptions.PrimaryButtonText">
            <summary>
            Gets or sets the default text of the primary button at the bottom of the content dialog.
            <para>If not added, or <see cref="F:System.String.Empty"/>, it will not be displayed.</para>
            </summary>
        </member>
        <member name="P:Wpf.Ui.SimpleContentDialogCreateOptions.SecondaryButtonText">
            <summary>
            Gets or sets the default text of the secondary button at the bottom of the content dialog.
            <para>If not added, or <see cref="F:System.String.Empty"/>, it will not be displayed.</para>
            </summary>
        </member>
        <member name="T:Wpf.Ui.SnackbarService">
            <summary>
            A service that provides methods related to displaying the <see cref="T:Wpf.Ui.Controls.Snackbar"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.SnackbarService.DefaultTimeOut">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.SnackbarService.SetSnackbarPresenter(Wpf.Ui.Controls.SnackbarPresenter)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.SnackbarService.GetSnackbarPresenter">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.SnackbarService.Show(System.String,System.String,Wpf.Ui.Controls.ControlAppearance,Wpf.Ui.Controls.IconElement,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.TaskBarService">
            <summary>
            Allows you to manage the animations of the window icon in the taskbar.
            </summary>
        </member>
        <member name="M:Wpf.Ui.TaskBarService.GetState(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.TaskBarService.GetState(System.Windows.Window)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.TaskBarService.SetState(System.Windows.Window,Wpf.Ui.TaskBar.TaskBarProgressState)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.TaskBarService.SetValue(System.Windows.Window,Wpf.Ui.TaskBar.TaskBarProgressState,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.TaskBarService.SetValue(System.Windows.Window,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.TaskBarService.SetState(System.IntPtr,Wpf.Ui.TaskBar.TaskBarProgressState)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.TaskBarService.SetValue(System.IntPtr,Wpf.Ui.TaskBar.TaskBarProgressState,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.TaskBarService.SetValue(System.IntPtr,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.TaskBar.TaskBarProgress">
            <summary>
            Allows to change the status of the displayed notification in the application icon on the TaskBar.
            </summary>
        </member>
        <member name="M:Wpf.Ui.TaskBar.TaskBarProgress.IsSupported">
            <summary>
            Gets a value indicating whether the current operating system supports task bar manipulation.
            </summary>
        </member>
        <member name="M:Wpf.Ui.TaskBar.TaskBarProgress.SetState(System.Windows.Window,Wpf.Ui.TaskBar.TaskBarProgressState)">
            <summary>
            Allows to change the status of the progress bar in the task bar.
            </summary>
            <param name="window">Window to manipulate.</param>
            <param name="taskBarProgressState">State of the progress indicator.</param>
        </member>
        <member name="M:Wpf.Ui.TaskBar.TaskBarProgress.SetState(System.IntPtr,Wpf.Ui.TaskBar.TaskBarProgressState)">
            <summary>
            Allows to change the status of the progress bar in the task bar.
            </summary>
            <param name="hWnd">Window handle.</param>
            <param name="taskBarProgressState">State of the progress indicator.</param>
        </member>
        <member name="M:Wpf.Ui.TaskBar.TaskBarProgress.SetValue(System.Windows.Window,Wpf.Ui.TaskBar.TaskBarProgressState,System.Int32)">
            <summary>
            Allows to change the fill of the task bar.
            </summary>
            <param name="window">Window to manipulate.</param>
            <param name="taskBarProgressState">Progress sate to set.</param>
            <param name="current">Current value to display</param>
        </member>
        <member name="M:Wpf.Ui.TaskBar.TaskBarProgress.SetValue(System.Windows.Window,Wpf.Ui.TaskBar.TaskBarProgressState,System.Int32,System.Int32)">
            <summary>
            Allows to change the fill of the task bar.
            </summary>
            <param name="window">Window to manipulate.</param>
            <param name="taskBarProgressState">Progress sate to set.</param>
            <param name="current">Current value to display</param>
            <param name="total">Total number for division.</param>
        </member>
        <member name="M:Wpf.Ui.TaskBar.TaskBarProgress.SetValue(System.IntPtr,Wpf.Ui.TaskBar.TaskBarProgressState,System.Int32)">
            <summary>
            Allows to change the fill of the task bar.
            </summary>
            <param name="hWnd">Window handle.</param>
            <param name="taskBarProgressState">Progress sate to set.</param>
            <param name="current">Current value to display</param>
        </member>
        <member name="M:Wpf.Ui.TaskBar.TaskBarProgress.SetValue(System.IntPtr,Wpf.Ui.TaskBar.TaskBarProgressState,System.Int32,System.Int32)">
            <summary>
            Allows to change the fill of the task bar.
            </summary>
            <param name="hWnd">Window handle.</param>
            <param name="taskBarProgressState">Progress sate to set.</param>
            <param name="current">Current value to display</param>
            <param name="total">Total number for division.</param>
        </member>
        <member name="T:Wpf.Ui.TaskBar.TaskBarProgressState">
            <summary>
            Specifies the state of the progress indicator in the Windows task bar.
            <see href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.shell.taskbaritemprogressstate?view=windowsdesktop-5.0"/>
            </summary>
        </member>
        <member name="F:Wpf.Ui.TaskBar.TaskBarProgressState.None">
            <summary>
            No progress indicator is displayed in the task bar area.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TaskBar.TaskBarProgressState.Indeterminate">
            <summary>
            A pulsing green (W10) or gray (W11) indicator is displayed in the task bar area.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TaskBar.TaskBarProgressState.Normal">
            <summary>
            A green progress indicator is displayed in the task bar area.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TaskBar.TaskBarProgressState.Error">
            <summary>
            A red progress indicator is displayed in the task bar area.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TaskBar.TaskBarProgressState.Paused">
            <summary>
            A yellow progress indicator is displayed in the task bar area.
            </summary>
        </member>
        <member name="T:Wpf.Ui.ThemeService">
            <summary>
            Lets you set the app theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.ThemeService.GetTheme">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.ThemeService.GetNativeSystemTheme">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.ThemeService.GetSystemTheme">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.ThemeService.SetTheme(Wpf.Ui.Appearance.ApplicationTheme)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.ThemeService.SetSystemAccent">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.ThemeService.SetAccent(System.Windows.Media.Color)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.ThemeService.SetAccent(System.Windows.Media.SolidColorBrush)">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.UiApplication">
            <summary>
            Represents a UI application.
            </summary>
        </member>
        <member name="M:Wpf.Ui.UiApplication.#ctor(System.Windows.Application)">
            <summary>
            Initializes a new instance of the <see cref="T:Wpf.Ui.UiApplication"/> class.
            </summary>
        </member>
        <member name="P:Wpf.Ui.UiApplication.IsApplication">
            <summary>
            Gets a value indicating whether the application is running outside of the desktop app context.
            </summary>
        </member>
        <member name="P:Wpf.Ui.UiApplication.Current">
            <summary>
            Gets the current application.
            </summary>
        </member>
        <member name="P:Wpf.Ui.UiApplication.MainWindow">
            <summary>
            Gets or sets the application's main window.
            </summary>
        </member>
        <member name="P:Wpf.Ui.UiApplication.Resources">
            <summary>
            Gets or sets the application's resources.
            </summary>
        </member>
        <member name="M:Wpf.Ui.UiApplication.TryFindResource(System.Object)">
            <summary>
            Gets or sets the application's main window.
            </summary>
        </member>
        <member name="M:Wpf.Ui.UiApplication.Shutdown">
            <summary>
            Turns the application's into shutdown mode.
            </summary>
        </member>
        <member name="T:Wpf.Ui.UiAssembly">
            <summary>
            Allows to get the WPF UI assembly through <see cref="P:Wpf.Ui.UiAssembly.Assembly"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.UiAssembly.Assembly">
            <summary>
            Gets the WPF UI assembly.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Win32.Utilities">
            <summary>
            Common Window utilities.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsNT">
            <summary>
            Gets a value indicating whether the operating system is NT or newer.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsOSVistaOrNewer">
            <summary>
            Gets a value indicating whether the operating system version is greater than or equal to 6.0.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsOSWindows7OrNewer">
            <summary>
            Gets a value indicating whether the operating system version is greater than or equal to 6.1.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsOSWindows8OrNewer">
            <summary>
            Gets a value indicating whether the operating system version is greater than or equal to 6.2.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsOSWindows10OrNewer">
            <summary>
            Gets a value indicating whether the operating system version is greater than or equal to 10.0* (build 10240).
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsOSWindows11OrNewer">
            <summary>
            Gets a value indicating whether the operating system version is greater than or equal to 10.0* (build 22000).
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsOSWindows11Insider1OrNewer">
            <summary>
            Gets a value indicating whether the operating system version is greater than or equal to 10.0* (build 22523).
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsOSWindows11Insider2OrNewer">
            <summary>
            Gets a value indicating whether the operating system version is greater than or equal to 10.0* (build 22557).
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsCompositionEnabled">
            <summary>
            Gets a value indicating whether Desktop Window Manager (DWM) composition is enabled.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Win32.Utilities.GetOSVersionFromRegistry">
            <summary>
            Tries to get the OS version from the Windows registry.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/>.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="!:ReadOnlySpan&lt;T&gt;"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
